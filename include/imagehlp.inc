ifndef _IMAGEHLP_
define _IMAGEHLP_
.pragma list(push, 0)

ifdef _WIN64
ifndef _IMAGEHLP64
define _IMAGEHLP64
endif
endif

.pragma pack(push, 8)

ifndef WINTRUST_H
include wintrust.inc
endif

define IMAGE_SEPARATION (64*1024)

LOADED_IMAGE		STRUC
ModuleName		PSTR ?
hFile			HANDLE ?
MappedAddress		PUCHAR ?
FileHeader		PIMAGE_NT_HEADERS ?
LastRvaSection		PIMAGE_SECTION_HEADER ?
NumberOfSections	ULONG ?
Sections		PIMAGE_SECTION_HEADER ?
Characteristics		ULONG ?
fSystemImage		BOOLEAN ?
fDOSImage		BOOLEAN ?
fReadOnly		BOOLEAN ?
Version			UCHAR ?
Links			LIST_ENTRY <>
SizeOfImage		ULONG ?
LOADED_IMAGE		ENDS
PLOADED_IMAGE		typedef ptr LOADED_IMAGE

define MAX_SYM_NAME 2000

BindImage proto WINAPI :PCSTR, :PCSTR, :PCSTR

.enum IMAGEHLP_STATUS_REASON {
    BindOutOfMemory,
    BindRvaToVaFailed,
    BindNoRoomInImage,
    BindImportModuleFailed,
    BindImportProcedureFailed,
    BindImportModule,
    BindImportProcedure,
    BindForwarder,
    BindForwarderNOT,
    BindImageModified,
    BindExpandFileHeaders,
    BindImageComplete,
    BindMismatchedSymbols,
    BindSymbolsNotUpdated,
    BindImportProcedure32,
    BindImportProcedure64,
    BindForwarder32,
    BindForwarder64,
    BindForwarderNOT32,
    BindForwarderNOT64
    }

CALLBACK(PIMAGEHLP_STATUS_ROUTINE, :IMAGEHLP_STATUS_REASON, :PCSTR, :PCSTR, :ULONG_PTR, :ULONG_PTR)
CALLBACK(PIMAGEHLP_STATUS_ROUTINE32, :IMAGEHLP_STATUS_REASON, :PCSTR, :PCSTR, :ULONG, :ULONG_PTR)
CALLBACK(PIMAGEHLP_STATUS_ROUTINE64, :IMAGEHLP_STATUS_REASON, :PCSTR, :PCSTR, :ULONG64, :ULONG_PTR)

BindImageEx proto WINAPI :DWORD, :PCSTR, :PCSTR, :PCSTR, :PIMAGEHLP_STATUS_ROUTINE

define BIND_NO_BOUND_IMPORTS	0x00000001
define BIND_NO_UPDATE		0x00000002
define BIND_ALL_IMAGES		0x00000004
define BIND_CACHE_IMPORT_DLLS	0x00000008
define BIND_REPORT_64BIT_VA	0x00000010

ReBaseImage proto WINAPI :PCSTR, :PCSTR, :BOOL, :BOOL, :BOOL, :ULONG, :ptr, :ptr, :ptr, :ptr, :ULONG
ReBaseImage64 proto WINAPI :PCSTR, :PCSTR, :BOOL, :BOOL, :BOOL, :ULONG, :ptr, :ptr, :ptr, :ptr, :ULONG

define CHECKSUM_SUCCESS		0
define CHECKSUM_OPEN_FAILURE	1
define CHECKSUM_MAP_FAILURE	2
define CHECKSUM_MAPVIEW_FAILURE 3
define CHECKSUM_UNICODE_FAILURE 4

define SPLITSYM_REMOVE_PRIVATE	0x00000001
define SPLITSYM_EXTRACT_ALL	0x00000002
define SPLITSYM_SYMBOLPATH_IS_SRC 0x00000004

CheckSumMappedFile proto WINAPI :ptr, :DWORD, :PDWORD, :PDWORD
MapFileAndCheckSumA proto WINAPI :PCSTR, :PDWORD, :PDWORD
MapFileAndCheckSumW proto WINAPI :PCWSTR, :PDWORD, :PDWORD
ifdef _UNICODE
define MapFileAndCheckSum <MapFileAndCheckSumW>
else
define MapFileAndCheckSum <MapFileAndCheckSumA>
endif

GetImageConfigInformation proto WINAPI :PLOADED_IMAGE, :PIMAGE_LOAD_CONFIG_DIRECTORY
GetImageUnusedHeaderBytes proto WINAPI :PLOADED_IMAGE, :PDWORD
SetImageConfigInformation proto WINAPI :PLOADED_IMAGE, :PIMAGE_LOAD_CONFIG_DIRECTORY

define CERT_PE_IMAGE_DIGEST_DEBUG_INFO		0x01
define CERT_PE_IMAGE_DIGEST_RESOURCES		0x02
define CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO	0x04
define CERT_PE_IMAGE_DIGEST_NON_PE_INFO		0x08

define CERT_SECTION_TYPE_ANY			0xFF

DIGEST_HANDLE typedef ptr

CALLBACK(DIGEST_FUNCTION, :DIGEST_HANDLE, :PBYTE, :DWORD)

ImageGetDigestStream proto WINAPI :HANDLE, :DWORD, :DIGEST_FUNCTION, :DIGEST_HANDLE
ImageAddCertificate proto WINAPI :HANDLE, :LPWIN_CERTIFICATE, :PDWORD
ImageRemoveCertificate proto WINAPI :HANDLE, :DWORD
ImageEnumerateCertificates proto WINAPI :HANDLE, :WORD, :PDWORD, :PDWORD, :DWORD
ImageGetCertificateData proto WINAPI :HANDLE, :DWORD, :LPWIN_CERTIFICATE, :PDWORD
ImageGetCertificateHeader proto WINAPI :HANDLE, :DWORD, :LPWIN_CERTIFICATE
ImageLoad proto WINAPI :PCSTR, :PCSTR
ImageUnload proto WINAPI :PLOADED_IMAGE
MapAndLoad proto WINAPI :PCSTR, :PCSTR, :PLOADED_IMAGE, :BOOL, :BOOL
UnMapAndLoad proto WINAPI :PLOADED_IMAGE
TouchFileTimes proto WINAPI :HANDLE, :PSYSTEMTIME
SplitSymbols proto WINAPI :PSTR, :PCSTR, :PSTR, :ULONG
UpdateDebugInfoFile proto WINAPI :PCSTR, :PCSTR, :PSTR, :PIMAGE_NT_HEADERS32
UpdateDebugInfoFileEx proto WINAPI :PCSTR, :PCSTR, :PSTR, :PIMAGE_NT_HEADERS32, :DWORD

ERROR_IMAGE_NOT_STRIPPED equ 0x8800
ERROR_NO_DBG_POINTER	equ 0x8801
ERROR_NO_PDB_POINTER	equ 0x8802

CALLBACK(PFIND_DEBUG_FILE_CALLBACK, :HANDLE, :PCSTR, :PVOID)

SymFindDebugInfoFile proto WINAPI :HANDLE, :PCSTR, :PSTR, :PFIND_DEBUG_FILE_CALLBACK, :ptr

CALLBACK(PFIND_DEBUG_FILE_CALLBACKW, :HANDLE, :PCWSTR, :PVOID)

SymFindDebugInfoFileW proto WINAPI :HANDLE, :PCWSTR, :PWSTR, :PFIND_DEBUG_FILE_CALLBACKW, :ptr
FindDebugInfoFile proto WINAPI :PCSTR, :PCSTR, :PSTR
FindDebugInfoFileEx proto WINAPI :PCSTR, :PCSTR, :PSTR, :PFIND_DEBUG_FILE_CALLBACK, :ptr
FindDebugInfoFileExW proto WINAPI :PCWSTR, :PCWSTR, :PSTR, :PFIND_DEBUG_FILE_CALLBACKW, :ptr

CALLBACK(PFINDFILEINPATHCALLBACK, :PCSTR, :PVOID)

SymFindFileInPath proto WINAPI :HANDLE, :PCSTR, :PCSTR, :ptr, :DWORD, :DWORD, :DWORD, :PSTR, :PFINDFILEINPATHCALLBACK, :ptr

CALLBACK(PFINDFILEINPATHCALLBACKW, :PCWSTR, :PVOID)

SymFindFileInPathW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :ptr, :DWORD, :DWORD, :DWORD, :PWSTR, :PFINDFILEINPATHCALLBACKW, :ptr

CALLBACK(PFIND_EXE_FILE_CALLBACK, :HANDLE, :PCSTR, :PVOID)

SymFindExecutableImage proto WINAPI :HANDLE, :PCSTR, :PSTR, :PFIND_EXE_FILE_CALLBACK, :ptr

CALLBACK(PFIND_EXE_FILE_CALLBACKW, :HANDLE, :PCWSTR, :PVOID)

SymFindExecutableImageW proto WINAPI :HANDLE, :PCWSTR, :PWSTR, :PFIND_EXE_FILE_CALLBACKW, :ptr
FindExecutableImage proto WINAPI :PCSTR, :PCSTR, :PSTR
FindExecutableImageEx proto WINAPI :PCSTR, :PCSTR, :PSTR, :PFIND_EXE_FILE_CALLBACK, :ptr
FindExecutableImageExW proto WINAPI :PCWSTR, :PCWSTR, :PWSTR, :PFIND_EXE_FILE_CALLBACKW, :ptr
ImageNtHeader proto WINAPI :ptr
ImageDirectoryEntryToDataEx proto WINAPI :ptr, :BOOLEAN, :USHORT, :PULONG, :ptr
ImageDirectoryEntryToData proto WINAPI :ptr, :BOOLEAN, :USHORT, :PULONG
ImageRvaToSection proto WINAPI :PIMAGE_NT_HEADERS, :ptr, :ULONG
ImageRvaToVa proto WINAPI :PIMAGE_NT_HEADERS, :ptr, :ULONG, :PIMAGE_SECTION_HEADER

ifndef _WIN64

IMAGE_DEBUG_INFORMATION	 STRUC
List			LIST_ENTRY <>
ReservedSize		dd ?
ReservedMappedBase	PVOID ?
ReservedMachine		USHORT ?
ReservedCharacteristics USHORT ?
ReservedCheckSum	dd ?
ImageBase		dd ?
SizeOfImage		dd ?
ReservedNumberOfSections dd ?
ReservedSections	PIMAGE_SECTION_HEADER ?
ReservedExportedNamesSize dd ?
ReservedExportedNames	PSTR ?
ReservedNumberOfFunctionTableEntries dd ?
ReservedFunctionTableEntries PIMAGE_FUNCTION_ENTRY ?
ReservedLowestFunctionStartingAddress dd ?
ReservedHighestFunctionEndingAddress dd ?
ReservedNumberOfFpoTableEntries dd ?
ReservedFpoTableEntries PFPO_DATA ?
SizeOfCoffSymbols	dd ?
CoffSymbols		PIMAGE_COFF_SYMBOLS_HEADER ?
ReservedSizeOfCodeViewSymbols dd ?
ReservedCodeViewSymbols PVOID ?
ImageFilePath		PSTR ?
ImageFileName		PSTR ?
ReservedDebugFilePath	PSTR ?
ReservedTimeDateStamp	dd ?
ReservedRomImage	BOOL ?
ReservedDebugDirectory	PIMAGE_DEBUG_DIRECTORY ?
ReservedNumberOfDebugDirectories dd ?
ReservedOriginalFunctionTableBaseAddress dd ?
Reserved		dd  2  dup(?)
IMAGE_DEBUG_INFORMATION ENDS
PIMAGE_DEBUG_INFORMATION typedef ptr IMAGE_DEBUG_INFORMATION

MapDebugInformation proto WINAPI :HANDLE, :PCSTR, :PCSTR, :ULONG
UnmapDebugInformation proto WINAPI :PIMAGE_DEBUG_INFORMATION
endif

SearchTreeForFile proto WINAPI :PCSTR, :PCSTR, :PSTR
SearchTreeForFileW proto WINAPI :PCWSTR, :PCWSTR, :PWSTR

CALLBACK(PENUMDIRTREE_CALLBACK, :PCSTR, :PVOID)

EnumDirTree proto WINAPI :HANDLE, :PCSTR, :PCSTR, :PSTR, :PENUMDIRTREE_CALLBACK, :ptr

CALLBACK(PENUMDIRTREE_CALLBACKW, :PCWSTR, :PVOID)

EnumDirTreeW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :PWSTR, :PENUMDIRTREE_CALLBACKW, :ptr
MakeSureDirectoryPathExists proto WINAPI :PCSTR

UNDNAME_COMPLETE	equ (0x0000)
UNDNAME_NO_LEADING_UNDERSCORES equ (0x0001)
UNDNAME_NO_MS_KEYWORDS	equ (0x0002)
UNDNAME_NO_FUNCTION_RETURNS equ (0x0004)
UNDNAME_NO_ALLOCATION_MODEL equ (0x0008)
UNDNAME_NO_ALLOCATION_LANGUAGE equ (0x0010)
UNDNAME_NO_MS_THISTYPE	equ (0x0020)
UNDNAME_NO_CV_THISTYPE	equ (0x0040)
UNDNAME_NO_THISTYPE	equ (0x0060)
UNDNAME_NO_ACCESS_SPECIFIERS equ (0x0080)
UNDNAME_NO_THROW_SIGNATURES equ (0x0100)
UNDNAME_NO_MEMBER_TYPE	equ (0x0200)
UNDNAME_NO_RETURN_UDT_MODEL equ (0x0400)
UNDNAME_32_BIT_DECODE	equ (0x0800)
UNDNAME_NAME_ONLY	equ (0x1000)
UNDNAME_NO_ARGUMENTS	equ (0x2000)
UNDNAME_NO_SPECIAL_SYMS equ (0x4000)

UnDecorateSymbolName proto WINAPI :PCSTR, :PSTR, :DWORD, :DWORD
UnDecorateSymbolNameW proto WINAPI :PCWSTR, :PWSTR, :DWORD, :DWORD

DBHHEADER_DEBUGDIRS	equ 0x1
DBHHEADER_CVMISC	equ 0x2
DBHHEADER_PDBGUID	equ 0x3
MODLOAD_DATA		STRUC
ssize			dd ?
ssig			dd ?
data			PVOID ?
size			dd ?
flags			dd ?
MODLOAD_DATA		ENDS
PMODLOAD_DATA		typedef ptr MODLOAD_DATA

MODLOAD_CVMISC		STRUC
oCV			dd ?
cCV			size_t ?
oMisc			dd ?
cMisc			size_t ?
dtImage			dd ?
cImage			dd ?
MODLOAD_CVMISC		ENDS
PMODLOAD_CVMISC		typedef ptr MODLOAD_CVMISC

MODLOAD_PDBGUID_PDBAGE	STRUC
PdbGuid			GUID <>
PdbAge			dd ?
MODLOAD_PDBGUID_PDBAGE	ENDS
PMODLOAD_PDBGUID_PDBAGE typedef ptr MODLOAD_PDBGUID_PDBAGE


.enum ADDRESS_MODE {
	AddrMode1616,
	AddrMode1632,
	AddrModeReal,
	AddrModeFlat
	}

ADDRESS64		STRUC
_Offset			dd ?
_Segment		dw ?
_Mode			ADDRESS_MODE ?
ADDRESS64		ENDS
LPADDRESS64		typedef ptr ADDRESS64
ADDRESS			typedef ADDRESS64
LPADDRESS		typedef LPADDRESS64

KDHELP64		STRUC
Thread			dd ?
ThCallbackStack		dd ?
ThCallbackBStore	dd ?
NextCallback		dd ?
FramePointer		dd ?
KiCallUserMode		dd ?
KeUserCallbackDispatcher dd ?
SystemRangeStart	dd ?
KiUserExceptionDispatcher dd ?
StackBase		dd ?
StackLimit		dd ?
Reserved		dd 5 dup(?)
KDHELP64		ENDS
PKDHELP64		typedef ptr KDHELP64
KDHELP			typedef KDHELP64
PKDHELP			typedef PKDHELP64

STACKFRAME64		STRUC
AddrPC			ADDRESS64 <>
AddrReturn		ADDRESS64 <>
AddrFrame		ADDRESS64 <>
AddrStack		ADDRESS64 <>
AddrBStore		ADDRESS64 <>
FuncTableEntry		PVOID ?
Params			dd 4 dup(?)
_Far			BOOL ?
Virtual			BOOL ?
Reserved		dd 3 dup(?)
KdHelp			KDHELP64 <>
STACKFRAME64		ENDS
LPSTACKFRAME64		typedef ptr STACKFRAME64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
STACKFRAME		equ STACKFRAME64
LPSTACKFRAME		equ LPSTACKFRAME64
else
STACKFRAME		STRUC
AddrPC			ADDRESS <>
AddrReturn		ADDRESS <>
AddrFrame		ADDRESS <>
AddrStack		ADDRESS <>
FuncTableEntry		PVOID ?
Params			dd 4 dup(?)
_Far			BOOL ?
Virtual			BOOL ?
Reserved		dd 3 dup(?)
KdHelp			KDHELP <>
AddrBStore		ADDRESS <>
STACKFRAME		ENDS
LPSTACKFRAME		typedef ptr STACKFRAME
endif

CALLBACK(PREAD_PROCESS_MEMORY_ROUTINE64, :HANDLE, :DWORD64)
CALLBACK(PFUNCTION_TABLE_ACCESS_ROUTINE64, :HANDLE, :DWORD64)
CALLBACK(PGET_MODULE_BASE_ROUTINE64, :HANDLE, :DWORD64)
CALLBACK(PTRANSLATE_ADDRESS_ROUTINE64, :HANDLE, :HANDLE, :LPADDRESS64)

StackWalk64 proto WINAPI :DWORD, :HANDLE, :HANDLE, :ptr, :ptr, :ptr, :ptr, :ptr, :ptr

define StackWalk <StackWalk64>
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
PREAD_PROCESS_MEMORY_ROUTINE	equ <PREAD_PROCESS_MEMORY_ROUTINE64>
PFUNCTION_TABLE_ACCESS_ROUTINE	equ <PFUNCTION_TABLE_ACCESS_ROUTINE64>
PGET_MODULE_BASE_ROUTINE	equ <PGET_MODULE_BASE_ROUTINE64>
PTRANSLATE_ADDRESS_ROUTINE	equ <PTRANSLATE_ADDRESS_ROUTINE64>
else
CALLBACK(PREAD_PROCESS_MEMORY_ROUTINE, :HANDLE, :DWORD)
CALLBACK(PFUNCTION_TABLE_ACCESS_ROUTINE, :HANDLE, :DWORD)
CALLBACK(PGET_MODULE_BASE_ROUTINE, :HANDLE, :DWORD)
CALLBACK(PTRANSLATE_ADDRESS_ROUTINE, :HANDLE, :HANDLE, :LPADDRESS)
endif

define API_VERSION_NUMBER 11

API_VERSION		STRUC
MajorVersion		USHORT ?
MinorVersion		USHORT ?
Revision		USHORT ?
Reserved		USHORT ?
API_VERSION		ENDS
LPAPI_VERSION		typedef ptr API_VERSION

ImagehlpApiVersion proto WINAPI
ImagehlpApiVersionEx proto WINAPI :LPAPI_VERSION
GetTimestampForLoadedLibrary proto WINAPI :HMODULE

CALLBACK(PSYM_ENUMMODULES_CALLBACK64, :PCSTR, :DWORD64, :PVOID)
CALLBACK(PSYM_ENUMMODULES_CALLBACKW64, :PCWSTR, :DWORD64, :PVOID)
CALLBACK(PENUMLOADED_MODULES_CALLBACK64, :PCSTR, :DWORD64, :ULONG, :PVOID)
CALLBACK(PENUMLOADED_MODULES_CALLBACKW64, :PCWSTR, :DWORD64, :ULONG, :PVOID)
CALLBACK(PSYM_ENUMSYMBOLS_CALLBACK64, :PCSTR, :DWORD64, :ULONG, :PVOID)
CALLBACK(PSYM_ENUMSYMBOLS_CALLBACK64W, :PCWSTR, :DWORD64, :ULONG, :PVOID)
CALLBACK(PSYMBOL_REGISTERED_CALLBACK64, :HANDLE, :ULONG, :ULONG64, :ULONG64)
CALLBACK(PSYMBOL_FUNCENTRY_CALLBACK64, :HANDLE, :ULONG64, :ULONG64)

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
PSYM_ENUMMODULES_CALLBACK equ <PSYM_ENUMMODULES_CALLBACK64>
PSYM_ENUMSYMBOLS_CALLBACK equ <PSYM_ENUMSYMBOLS_CALLBACK64>
PSYM_ENUMSYMBOLS_CALLBACKW equ <PSYM_ENUMSYMBOLS_CALLBACK64W>
PENUMLOADED_MODULES_CALLBACK equ <PENUMLOADED_MODULES_CALLBACK64>
PSYMBOL_REGISTERED_CALLBACK equ <PSYMBOL_REGISTERED_CALLBACK64>
PSYMBOL_FUNCENTRY_CALLBACK equ <PSYMBOL_FUNCENTRY_CALLBACK64>
else
CALLBACK(PSYMBOL_FUNCENTRY_CALLBACK, :HANDLE, :DWORD, :PVOID)
CALLBACK(PSYM_ENUMMODULES_CALLBACK, :PCSTR, :ULONG, :PVOID)
CALLBACK(PSYM_ENUMSYMBOLS_CALLBACK, :PCSTR, :ULONG, :ULONG, :PVOID)
CALLBACK(PSYM_ENUMSYMBOLS_CALLBACKW, :PCWSTR, :ULONG, :ULONG, :PVOID)
CALLBACK(PENUMLOADED_MODULES_CALLBACK, :PCSTR, :ULONG, :ULONG, :PVOID)
CALLBACK(PSYMBOL_REGISTERED_CALLBACK, :HANDLE, :ULONG, :PVOID, :PVOID)
endif

ifdef _NO_CVCONST_H

.enum SymTagEnum {
    SymTagNull,
    SymTagExe,
    SymTagCompiland,
    SymTagCompilandDetails,
    SymTagCompilandEnv,
    SymTagFunction,
    SymTagBlock,
    SymTagData,
    SymTagAnnotation,
    SymTagLabel,
    SymTagPublicSymbol,
    SymTagUDT,
    SymTagEnum,
    SymTagFunctionType,
    SymTagPointerType,
    SymTagArrayType,
    SymTagBaseType,
    SymTagTypedef,
    SymTagBaseClass,
    SymTagFriend,
    SymTagFunctionArgType,
    SymTagFuncDebugStart,
    SymTagFuncDebugEnd,
    SymTagUsingNamespace,
    SymTagVTableShape,
    SymTagVTable,
    SymTagCustom,
    SymTagThunk,
    SymTagCustomType,
    SymTagManagedType,
    SymTagDimension,
    SymTagCallSite,
    SymTagInlineSite,
    SymTagBaseInterface,
    SymTagVectorType,
    SymTagMatrixType,
    SymTagHLSLType,
    SymTagCaller,
    SymTagCallee,
    SymTagExport,
    SymTagHeapAllocationSite,
    SymTagCoffGroup,
    SymTagMax
    }

endif

define SYMFLAG_VALUEPRESENT		0x00000001
define SYMFLAG_REGISTER			0x00000008
define SYMFLAG_REGREL			0x00000010
define SYMFLAG_FRAMEREL			0x00000020
define SYMFLAG_PARAMETER		0x00000040
define SYMFLAG_LOCAL			0x00000080
define SYMFLAG_CONSTANT			0x00000100
define SYMFLAG_EXPORT			0x00000200
define SYMFLAG_FORWARDER		0x00000400
define SYMFLAG_FUNCTION			0x00000800
define SYMFLAG_VIRTUAL			0x00001000
define SYMFLAG_THUNK			0x00002000
define SYMFLAG_TLSREL			0x00004000
define SYMFLAG_SLOT			0x00008000
define SYMFLAG_ILREL			0x00010000
define SYMFLAG_METADATA			0x00020000
define SYMFLAG_CLR_TOKEN		0x00040000
define SYMFLAG_NULL			0x00080000
define SYMFLAG_FUNC_NO_RETURN		0x00100000
define SYMFLAG_SYNTHETIC_ZEROBASE	0x00200000
define SYMFLAG_PUBLIC_CODE		0x00400000
define SYMFLAG_REGREL_ALIASINDIR	0x00800000
define SYMFLAG_FIXUP_ARM64X		0x01000000
define SYMFLAG_GLOBAL			0x02000000

define SYMFLAG_RESET			0x80000000

.enum SYM_TYPE {
    SymNone,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym,
    SymDia,
    SymVirtual,
    NumSymTypes
    }

IMAGEHLP_SYMBOL64	STRUC
SizeOfStruct		dd ?
Address			dd ?
Size			dd ?
Flags			dd ?
MaxNameLength		dd ?
Name			CHAR 1 dup(?)
IMAGEHLP_SYMBOL64	ENDS
PIMAGEHLP_SYMBOL64	typedef ptr IMAGEHLP_SYMBOL64
IMAGEHLP_SYMBOL		typedef IMAGEHLP_SYMBOL64
PIMAGEHLP_SYMBOL	typedef PIMAGEHLP_SYMBOL64

IMAGEHLP_SYMBOL64_PACKAGE STRUC
sym			IMAGEHLP_SYMBOL64 <>
name			CHAR MAX_SYM_NAME + 1 dup(?)
IMAGEHLP_SYMBOL64_PACKAGE ENDS
PIMAGEHLP_SYMBOL64_PACKAGE typedef ptr IMAGEHLP_SYMBOL64_PACKAGE
IMAGEHLP_SYMBOL_PACKAGE	 typedef IMAGEHLP_SYMBOL64_PACKAGE
PIMAGEHLP_SYMBOL_PACKAGE typedef PIMAGEHLP_SYMBOL64_PACKAGE

IMAGEHLP_SYMBOLW64	STRUC
SizeOfStruct		dd ?
Address			dd ?
Size			dd ?
Flags			dd ?
MaxNameLength		dd ?
Name			WCHAR 1 dup(?)
IMAGEHLP_SYMBOLW64	ENDS
PIMAGEHLP_SYMBOLW64	typedef ptr IMAGEHLP_SYMBOLW64
IMAGEHLP_SYMBOLW	typedef IMAGEHLP_SYMBOLW64
PIMAGEHLP_SYMBOLW	typedef PIMAGEHLP_SYMBOLW64

IMAGEHLP_SYMBOLW64_PACKAGE STRUC
sym			IMAGEHLP_SYMBOLW64 <>
name			WCHAR MAX_SYM_NAME + 1 dup(?)
IMAGEHLP_SYMBOLW64_PACKAGE ENDS
PIMAGEHLP_SYMBOLW64_PACKAGE typedef ptr IMAGEHLP_SYMBOLW64_PACKAGE
IMAGEHLP_SYMBOLW_PACKAGE typedef IMAGEHLP_SYMBOLW64_PACKAGE
PIMAGEHLP_SYMBOLW_PACKAGE typedef PIMAGEHLP_SYMBOLW64_PACKAGE

IMAGEHLP_MODULE64	STRUC
SizeOfStruct		dd ?
BaseOfImage		dd ?
ImageSize		dd ?
TimeDateStamp		dd ?
CheckSum		dd ?
NumSyms			dd ?
SymType			SYM_TYPE ?
ModuleName		CHAR 32 dup(?)
ImageName		CHAR 256 dup(?)
LoadedImageName		CHAR 256 dup(?)
LoadedPdbName		CHAR 256 dup(?)
CVSig			dd ?
CVData			CHAR MAX_PATH * 3 dup(?)
PdbSig			dd ?
PdbSig70		GUID <>
PdbAge			dd ?
PdbUnmatched		BOOL ?
DbgUnmatched		BOOL ?
LineNumbers		BOOL ?
GlobalSymbols		BOOL ?
TypeInfo		BOOL ?
SourceIndexed		BOOL ?
Publics			BOOL ?
IMAGEHLP_MODULE64	ENDS
PIMAGEHLP_MODULE64	typedef ptr IMAGEHLP_MODULE64

IMAGEHLP_MODULEW64	STRUC
SizeOfStruct		dd ?
BaseOfImage		dd ?
ImageSize		dd ?
TimeDateStamp		dd ?
CheckSum		dd ?
NumSyms			dd ?
SymType			SYM_TYPE ?
ModuleName		WCHAR 32 dup(?)
ImageName		WCHAR 256 dup(?)
LoadedImageName		WCHAR 256 dup(?)
LoadedPdbName		WCHAR 256 dup(?)
CVSig			dd ?
CVData			WCHAR MAX_PATH * 3 dup(?)
PdbSig			dd ?
PdbSig70		GUID <>
PdbAge			dd ?
PdbUnmatched		BOOL ?
DbgUnmatched		BOOL ?
LineNumbers		BOOL ?
GlobalSymbols		BOOL ?
TypeInfo		BOOL ?
SourceIndexed		BOOL ?
Publics			BOOL ?
IMAGEHLP_MODULEW64	ENDS
PIMAGEHLP_MODULEW64	typedef ptr IMAGEHLP_MODULEW64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
IMAGEHLP_MODULE		typedef IMAGEHLP_MODULE64
PIMAGEHLP_MODULE	typedef PIMAGEHLP_MODULE64
IMAGEHLP_MODULEW	typedef IMAGEHLP_MODULEW64
PIMAGEHLP_MODULEW	typedef PIMAGEHLP_MODULEW64
else
IMAGEHLP_MODULE		STRUC
SizeOfStruct		dd ?
BaseOfImage		dd ?
ImageSize		dd ?
TimeDateStamp		dd ?
CheckSum		dd ?
NumSyms			dd ?
SymType			SYM_TYPE ?
ModuleName		CHAR 32 dup(?)
ImageName		CHAR 256 dup(?)
LoadedImageName		CHAR 256 dup(?)
IMAGEHLP_MODULE		ENDS
PIMAGEHLP_MODULE	typedef ptr IMAGEHLP_MODULE

IMAGEHLP_MODULEW	STRUC
SizeOfStruct		dd ?
BaseOfImage		dd ?
ImageSize		dd ?
TimeDateStamp		dd ?
CheckSum		dd ?
NumSyms			dd ?
SymType			SYM_TYPE ?
ModuleName		WCHAR 32 dup(?)
ImageName		WCHAR 256 dup(?)
LoadedImageName		WCHAR 256 dup(?)
IMAGEHLP_MODULEW	ENDS
PIMAGEHLP_MODULEW	typedef ptr IMAGEHLP_MODULEW
endif


IMAGEHLP_LINE64		STRUC
SizeOfStruct		dd ?
Key			PVOID ?
LineNumber		dd ?
FileName		PCHAR ?
Address			dd ?
IMAGEHLP_LINE64		ENDS
PIMAGEHLP_LINE64	typedef ptr IMAGEHLP_LINE64

IMAGEHLP_LINEW64	STRUC
SizeOfStruct		dd ?
Key			PVOID ?
LineNumber		dd ?
FileName		PWSTR ?
Address			dd ?
IMAGEHLP_LINEW64	ENDS
PIMAGEHLP_LINEW64	typedef ptr IMAGEHLP_LINEW64

IMAGEHLP_LINE		typedef IMAGEHLP_LINE64
PIMAGEHLP_LINE		typedef PIMAGEHLP_LINE64

SOURCEFILE		STRUC
ModBase			dd ?
FileName		PCHAR ?
SOURCEFILE		ENDS
PSOURCEFILE		typedef ptr SOURCEFILE

SOURCEFILEW		STRUC
ModBase			dd ?
FileName		PWSTR ?
SOURCEFILEW		ENDS
PSOURCEFILEW		typedef ptr SOURCEFILEW

define CBA_DEFERRED_SYMBOL_LOAD_START	       0x00000001
define CBA_DEFERRED_SYMBOL_LOAD_COMPLETE       0x00000002
define CBA_DEFERRED_SYMBOL_LOAD_FAILURE	       0x00000003
define CBA_SYMBOLS_UNLOADED		       0x00000004
define CBA_DUPLICATE_SYMBOL		       0x00000005
define CBA_READ_MEMORY			       0x00000006
define CBA_DEFERRED_SYMBOL_LOAD_CANCEL	       0x00000007
define CBA_SET_OPTIONS			       0x00000008
define CBA_EVENT			       0x00000010
define CBA_DEFERRED_SYMBOL_LOAD_PARTIAL	       0x00000020
define CBA_DEBUG_INFO			       0x10000000
define CBA_SRCSRV_INFO			       0x20000000
define CBA_SRCSRV_EVENT			       0x40000000
define CBA_UPDATE_STATUS_BAR		       0x50000000
define CBA_ENGINE_PRESENT		       0x60000000
define CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS 0x70000000
define CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE 0x80000000
define CBA_XML_LOG			       0x90000000
define CBA_MAP_JIT_SYMBOL		       0xA0000000

IMAGEHLP_CBA_READ_MEMORY STRUC
_addr			DWORD64 ?
buf			PVOID ?
bytes			dd ?
bytesread		LPDWORD ?
IMAGEHLP_CBA_READ_MEMORY ENDS
PIMAGEHLP_CBA_READ_MEMORY typedef ptr IMAGEHLP_CBA_READ_MEMORY

.enum {
    sevInfo,
    sevProblem,
    sevAttn,
    sevFatal,
    sevMax
    }

define EVENT_SRCSPEW_START 100
define EVENT_SRCSPEW	   100
define EVENT_SRCSPEW_END   199

IMAGEHLP_CBA_EVENT	STRUC
severity		dd ?
code			dd ?
desc			PCHAR ?
object			PVOID ?
IMAGEHLP_CBA_EVENT	ENDS
PIMAGEHLP_CBA_EVENT	typedef ptr IMAGEHLP_CBA_EVENT

IMAGEHLP_CBA_EVENTW	STRUC
severity		dd ?
code			dd ?
desc			PCWSTR ?
object			PVOID ?
IMAGEHLP_CBA_EVENTW	ENDS
PIMAGEHLP_CBA_EVENTW	typedef ptr IMAGEHLP_CBA_EVENTW

IMAGEHLP_DEFERRED_SYMBOL_LOAD64 STRUC
SizeOfStruct		dd ?
BaseOfImage		DWORD64 ?
CheckSum		dd ?
TimeDateStamp		dd ?
FileName		CHAR MAX_PATH dup(?)
Reparse			BOOLEAN ?
hFile			HANDLE ?
Flags			dd ?
IMAGEHLP_DEFERRED_SYMBOL_LOAD64 ENDS
PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 typedef ptr IMAGEHLP_DEFERRED_SYMBOL_LOAD64

IMAGEHLP_DEFERRED_SYMBOL_LOADW64 STRUC
SizeOfStruct		dd ?
BaseOfImage		DWORD64 ?
CheckSum		dd ?
TimeDateStamp		dd ?
FileName		WCHAR MAX_PATH + 1 dup(?)
Reparse			BOOLEAN ?
hFile			HANDLE ?
Flags			dd ?
IMAGEHLP_DEFERRED_SYMBOL_LOADW64 ENDS
PIMAGEHLP_DEFERRED_SYMBOL_LOADW64 typedef ptr IMAGEHLP_DEFERRED_SYMBOL_LOADW64

define DSLFLAG_MISMATCHED_PDB		   0x1
define DSLFLAG_MISMATCHED_DBG		   0x2
define FLAG_ENGINE_PRESENT		   0x4
define FLAG_ENGOPT_DISALLOW_NETWORK_PATHS  0x8
define FLAG_OVERRIDE_ARM_MACHINE_TYPE	   0x10

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
IMAGEHLP_DEFERRED_SYMBOL_LOAD typedef IMAGEHLP_DEFERRED_SYMBOL_LOAD64
PIMAGEHLP_DEFERRED_SYMBOL_LOAD typedef PIMAGEHLP_DEFERRED_SYMBOL_LOAD64
else
IMAGEHLP_DEFERRED_SYMBOL_LOAD STRUC
SizeOfStruct		dd ?
BaseOfImage		dd ?
CheckSum		dd ?
TimeDateStamp		dd ?
FileName		CHAR MAX_PATH dup(?)
Reparse			BOOLEAN ?
hFile			HANDLE ?
IMAGEHLP_DEFERRED_SYMBOL_LOAD ENDS
PIMAGEHLP_DEFERRED_SYMBOL_LOAD typedef ptr IMAGEHLP_DEFERRED_SYMBOL_LOAD
endif

IMAGEHLP_DUPLICATE_SYMBOL64 STRUC
SizeOfStruct		dd ?
NumberOfDups		dd ?
Symbol			PIMAGEHLP_SYMBOL64 ?
SelectedSymbol		dd ?
IMAGEHLP_DUPLICATE_SYMBOL64 ENDS
PIMAGEHLP_DUPLICATE_SYMBOL64 typedef ptr IMAGEHLP_DUPLICATE_SYMBOL64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
IMAGEHLP_DUPLICATE_SYMBOL equ IMAGEHLP_DUPLICATE_SYMBOL64
PIMAGEHLP_DUPLICATE_SYMBOL equ PIMAGEHLP_DUPLICATE_SYMBOL64
else
IMAGEHLP_DUPLICATE_SYMBOL STRUC
SizeOfStruct		dd ?
NumberOfDups		dd ?
Symbol			PIMAGEHLP_SYMBOL ?
SelectedSymbol		dd ?
IMAGEHLP_DUPLICATE_SYMBOL ENDS
PIMAGEHLP_DUPLICATE_SYMBOL typedef ptr IMAGEHLP_DUPLICATE_SYMBOL
endif

SymSetParentWindow proto WINAPI :HWND
SymSetHomeDirectory proto WINAPI :HANDLE, :PSTR
SymSetHomeDirectoryW proto WINAPI :HANDLE, :PCWSTR
SymGetHomeDirectory proto WINAPI :DWORD, :PSTR, :size_t
SymGetHomeDirectoryW proto WINAPI :DWORD, :PWSTR, :size_t

.enum IMAGEHLP_HD_TYPE {
    hdBase,
    hdSym,
    hdSrc,
    hdMax
    }

OMAP			STRUC
rva			ULONG ?
rvaTo			ULONG ?
OMAP			ENDS
POMAP			typedef ptr OMAP

SymGetOmaps proto WINAPI :HANDLE, :DWORD64, :ptr, :PDWORD64, :ptr, :PDWORD64

define SYMOPT_CASE_INSENSITIVE		0x00000001
define SYMOPT_UNDNAME			0x00000002
define SYMOPT_DEFERRED_LOADS		0x00000004
define SYMOPT_NO_CPP			0x00000008
define SYMOPT_LOAD_LINES		0x00000010
define SYMOPT_OMAP_FIND_NEAREST		0x00000020
define SYMOPT_LOAD_ANYTHING		0x00000040
define SYMOPT_IGNORE_CVREC		0x00000080
define SYMOPT_NO_UNQUALIFIED_LOADS	0x00000100
define SYMOPT_FAIL_CRITICAL_ERRORS	0x00000200
define SYMOPT_EXACT_SYMBOLS		0x00000400
define SYMOPT_ALLOW_ABSOLUTE_SYMBOLS	0x00000800
define SYMOPT_IGNORE_NT_SYMPATH		0x00001000
define SYMOPT_INCLUDE_32BIT_MODULES	0x00002000
define SYMOPT_PUBLICS_ONLY		0x00004000
define SYMOPT_NO_PUBLICS		0x00008000
define SYMOPT_AUTO_PUBLICS		0x00010000
define SYMOPT_NO_IMAGE_SEARCH		0x00020000
define SYMOPT_SECURE			0x00040000
define SYMOPT_NO_PROMPTS		0x00080000
define SYMOPT_OVERWRITE			0x00100000
define SYMOPT_IGNORE_IMAGEDIR		0x00200000
define SYMOPT_FLAT_DIRECTORY		0x00400000
define SYMOPT_FAVOR_COMPRESSED		0x00800000
define SYMOPT_ALLOW_ZERO_ADDRESS	0x01000000
define SYMOPT_DISABLE_SYMSRV_AUTODETECT 0x02000000
define SYMOPT_READONLY_CACHE		0x04000000
define SYMOPT_SYMPATH_LAST		0x08000000
define SYMOPT_DISABLE_FAST_SYMBOLS	0x10000000
define SYMOPT_DISABLE_SYMSRV_TIMEOUT	0x20000000
define SYMOPT_DISABLE_SRVSTAR_ON_STARTUP 0x40000000
define SYMOPT_DEBUG			0x80000000

.enum IMAGEHLP_EXTENDED_OPTIONS {
    SYMOPT_EX_DISABLEACCESSTIMEUPDATE,
    SYMOPT_EX_LASTVALIDDEBUGDIRECTORY,
    SYMOPT_EX_NOIMPLICITPATTERNSEARCH,
    SYMOPT_EX_NEVERLOADSYMBOLS,
    SYMOPT_EX_MAX
   }

SymSetOptions proto WINAPI :DWORD
SymGetOptions proto WINAPI
SymCleanup proto WINAPI :HANDLE
SymMatchString proto WINAPI :PCSTR, :PCSTR, :BOOL
SymMatchStringA proto WINAPI :PCSTR, :PCSTR, :BOOL
SymMatchStringW proto WINAPI :PCWSTR, :PCWSTR, :BOOL

CALLBACK(PSYM_ENUMSOURCEFILES_CALLBACK, :PSOURCEFILE, :PVOID)

PSYM_ENUMSOURCFILES_CALLBACK equ PSYM_ENUMSOURCEFILES_CALLBACK

SymEnumSourceFiles proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMSOURCEFILES_CALLBACK, :ptr

CALLBACK(PSYM_ENUMSOURCEFILES_CALLBACKW, :PSOURCEFILEW, :PVOID)

SymEnumSourceFilesW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMSOURCEFILES_CALLBACKW, :ptr
SymEnumerateModules64 proto WINAPI :HANDLE, :PSYM_ENUMMODULES_CALLBACK64, :ptr
SymEnumerateModulesW64 proto WINAPI :HANDLE, :PSYM_ENUMMODULES_CALLBACKW64, :ptr

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymEnumerateModules	equ <SymEnumerateModules64>
else
SymEnumerateModules proto WINAPI :HANDLE, :PSYM_ENUMMODULES_CALLBACK, :ptr
endif
EnumerateLoadedModulesEx proto WINAPI :HANDLE, :PENUMLOADED_MODULES_CALLBACK64, :ptr
EnumerateLoadedModulesExW proto WINAPI :HANDLE, :PENUMLOADED_MODULES_CALLBACKW64, :ptr
EnumerateLoadedModules64 proto WINAPI :HANDLE, :PENUMLOADED_MODULES_CALLBACK64, :ptr
EnumerateLoadedModulesW64 proto WINAPI :HANDLE, :PENUMLOADED_MODULES_CALLBACKW64, :ptr
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
EnumerateLoadedModules	equ <EnumerateLoadedModules64>
else
EnumerateLoadedModules proto WINAPI :HANDLE, :PENUMLOADED_MODULES_CALLBACK, :ptr
endif
SymFunctionTableAccess64 proto WINAPI :HANDLE, :DWORD64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymFunctionTableAccess	equ <SymFunctionTableAccess64>
else
SymFunctionTableAccess proto WINAPI :HANDLE, :DWORD
endif
SymGetUnwindInfo proto WINAPI :HANDLE, :DWORD64, :ptr, :PULONG
SymGetModuleInfo64 proto WINAPI :HANDLE, :DWORD64, :PIMAGEHLP_MODULE64
SymGetModuleInfoW64 proto WINAPI :HANDLE,:DWORD64, :PIMAGEHLP_MODULEW64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetModuleInfo	equ <SymGetModuleInfo64>
SymGetModuleInfoW	equ <SymGetModuleInfoW64>
else
SymGetModuleInfo proto WINAPI :HANDLE, :DWORD, :PIMAGEHLP_MODULE
SymGetModuleInfoW proto WINAPI :HANDLE, :DWORD, :PIMAGEHLP_MODULEW
endif
SymGetModuleBase64 proto WINAPI :HANDLE, :DWORD64
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetModuleBase	equ <SymGetModuleBase64>
else
SymGetModuleBase proto WINAPI :HANDLE, :DWORD
endif

SRCCODEINFO		STRUC
SizeOfStruct		dd ?
Key			PVOID ?
ModBase			dd ?
Obj			CHAR MAX_PATH + 1 dup(?)
FileName		CHAR MAX_PATH + 1 dup(?)
LineNumber		dd ?
Address			dd ?
SRCCODEINFO		ENDS
PSRCCODEINFO		typedef ptr SRCCODEINFO

SRCCODEINFOW		STRUC
SizeOfStruct		dd ?
Key			PVOID ?
ModBase			dd ?
Obj			WCHAR MAX_PATH + 1 dup(?)
FileName		WCHAR MAX_PATH + 1 dup(?)
LineNumber		dd ?
Address			dd ?
SRCCODEINFOW		ENDS
PSRCCODEINFOW		typedef ptr SRCCODEINFOW

CALLBACK(PSYM_ENUMLINES_CALLBACK, :PSRCCODEINFO, :PVOID)

SymEnumLines proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PCSTR, :PSYM_ENUMLINES_CALLBACK, :ptr

CALLBACK(PSYM_ENUMLINES_CALLBACKW, :PSRCCODEINFOW, :PVOID)

SymEnumLinesW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PCWSTR, :PSYM_ENUMLINES_CALLBACKW, :ptr
SymGetLineFromAddr64 proto WINAPI :HANDLE, :DWORD64, :PDWORD, :PIMAGEHLP_LINE64
SymGetLineFromAddrW64 proto WINAPI :HANDLE, :DWORD64, :PDWORD, :PIMAGEHLP_LINEW64
SymEnumSourceLines proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PCSTR, :DWORD, :DWORD, :PSYM_ENUMLINES_CALLBACK, :ptr
SymEnumSourceLinesW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PCWSTR, :DWORD, :DWORD, :PSYM_ENUMLINES_CALLBACKW, :ptr

define SYM_INLINE_COMP_ERROR	 0
define SYM_INLINE_COMP_IDENTICAL 1
define SYM_INLINE_COMP_STEPIN	 2
define SYM_INLINE_COMP_STEPOUT	 3
define SYM_INLINE_COMP_STEPOVER	 4
define SYM_INLINE_COMP_DIFFERENT 5

define ESLFLAG_FULLPATH	       0x00000001
define ESLFLAG_NEAREST	       0x00000002
define ESLFLAG_PREV	       0x00000004
define ESLFLAG_NEXT	       0x00000008
define ESLFLAG_INLINE_SITE     0x00000010

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetLineFromAddr	equ <SymGetLineFromAddr64>
SymGetLineFromAddrW	equ <SymGetLineFromAddrW64>
else
SymGetLineFromAddr proto WINAPI :HANDLE, :DWORD, :PDWORD, :PIMAGEHLP_LINE
SymGetLineFromAddrW proto WINAPI :HANDLE, :DWORD, :PDWORD, :PIMAGEHLP_LINEW
endif
SymGetLineFromName64 proto WINAPI :HANDLE, :PCSTR, :PCSTR, :DWORD, :PLONG, :PIMAGEHLP_LINE64
SymGetLineFromNameW64 proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :DWORD, :PLONG, :PIMAGEHLP_LINEW64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetLineFromName	equ <SymGetLineFromName64>
else
SymGetLineFromName proto WINAPI :HANDLE, :PCSTR, :PCSTR, :DWORD, :PLONG, :PIMAGEHLP_LINE
endif
SymGetLineNext64 proto WINAPI :HANDLE, :PIMAGEHLP_LINE64
SymGetLineNextW64 proto WINAPI :HANDLE, :PIMAGEHLP_LINEW64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetLineNext		equ <SymGetLineNext64>
else
SymGetLineNext proto WINAPI :HANDLE, :PIMAGEHLP_LINE
SymGetLineNextW proto WINAPI :HANDLE, :PIMAGEHLP_LINEW
endif

SymGetLinePrev64 proto WINAPI :HANDLE, :PIMAGEHLP_LINE64
SymGetLinePrevW64 proto WINAPI :HANDLE, :PIMAGEHLP_LINEW64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetLinePrev		equ <SymGetLinePrev64>
else
SymGetLinePrev proto WINAPI :HANDLE, :PIMAGEHLP_LINE
SymGetLinePrevW proto WINAPI :HANDLE, :PIMAGEHLP_LINEW
endif

SymGetFileLineOffsets64 proto WINAPI :HANDLE, :PCSTR, :PCSTR, :PDWORD64, :ULONG
SymMatchFileName proto WINAPI :PCSTR, :PCSTR, :ptr, :ptr
SymMatchFileNameW proto WINAPI :PCWSTR, :PCWSTR, :ptr, :ptr
SymGetSourceFile proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PCSTR, :PSTR, :DWORD
SymGetSourceFileW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PCWSTR, :PWSTR, :DWORD
SymGetSourceFileToken proto WINAPI :HANDLE, :ULONG64, :PCSTR, :ptr, :ptr
SymGetSourceFileTokenW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :ptr, :ptr
SymGetSourceFileFromToken proto WINAPI :HANDLE, :ptr, :PCSTR, :PSTR, :DWORD
SymGetSourceFileFromTokenW proto WINAPI :HANDLE, :ptr, :PCWSTR, :PWSTR, :DWORD
SymGetSourceVarFromToken proto WINAPI :HANDLE, :ptr, :PCSTR, :PCSTR, :PSTR, :DWORD
SymGetSourceVarFromTokenW proto WINAPI :HANDLE, :ptr, :PCWSTR, :PCWSTR, :PWSTR, :DWORD

CALLBACK(PENUMSOURCEFILETOKENSCALLBACK, :PVOID, :size_t)

SymEnumSourceFileTokens proto WINAPI :HANDLE, :ULONG64, :PENUMSOURCEFILETOKENSCALLBACK
SymInitialize proto WINAPI :HANDLE, :PCSTR, :BOOL
SymInitializeW proto WINAPI :HANDLE, :PCWSTR, :BOOL
SymGetSearchPath proto WINAPI :HANDLE, :PSTR, :DWORD
SymGetSearchPathW proto WINAPI :HANDLE, :PWSTR, :DWORD
SymSetSearchPath proto WINAPI :HANDLE, :PCSTR
SymSetSearchPathW proto WINAPI :HANDLE, :PCWSTR

define SLMFLAG_VIRTUAL	   0x1
define SLMFLAG_ALT_INDEX   0x2
define SLMFLAG_NO_SYMBOLS  0x4

SymLoadModuleEx proto WINAPI :HANDLE, :HANDLE, :PCSTR, :PCSTR, :DWORD64, :DWORD, :PMODLOAD_DATA, :DWORD
SymLoadModuleExW proto WINAPI :HANDLE, :HANDLE, :PCWSTR, :PCWSTR, :DWORD64, :DWORD, :PMODLOAD_DATA, :DWORD
SymUnloadModule64 proto WINAPI :HANDLE, :DWORD64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymUnloadModule		equ <SymUnloadModule64>
else
SymUnloadModule proto WINAPI :HANDLE, :DWORD
endif
SymUnDName64 proto WINAPI :PIMAGEHLP_SYMBOL64, :PSTR, :DWORD
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymUnDName		equ <SymUnDName64>
else
SymUnDName proto WINAPI :PIMAGEHLP_SYMBOL, :PSTR, :DWORD
endif
SymRegisterCallback64 proto WINAPI :HANDLE, :PSYMBOL_REGISTERED_CALLBACK64, :ULONG64
SymRegisterCallbackW64 proto WINAPI :HANDLE, :PSYMBOL_REGISTERED_CALLBACK64, :ULONG64
SymRegisterFunctionEntryCallback64 proto WINAPI :HANDLE, :PSYMBOL_FUNCENTRY_CALLBACK64, :ULONG64
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymRegisterCallback	equ <SymRegisterCallback64>
SymRegisterFunctionEntryCallback equ <SymRegisterFunctionEntryCallback64>
else
SymRegisterCallback proto WINAPI :HANDLE, :PSYMBOL_REGISTERED_CALLBACK, :ptr
SymRegisterFunctionEntryCallback proto WINAPI :HANDLE, :PSYMBOL_FUNCENTRY_CALLBACK, :ptr
endif

IMAGEHLP_SYMBOL_SRC	STRUC
sizeofstruct		dd ?
type			dd ?
file			CHAR MAX_PATH dup(?)
IMAGEHLP_SYMBOL_SRC	ENDS
PIMAGEHLP_SYMBOL_SRC	typedef ptr IMAGEHLP_SYMBOL_SRC

MODULE_TYPE_INFO	STRUC
dataLength		USHORT ?
leaf			USHORT ?
data			db 1 dup(?)
MODULE_TYPE_INFO	ENDS
PMODULE_TYPE_INFO	typedef ptr MODULE_TYPE_INFO

SYMBOL_INFO		STRUC
SizeOfStruct		ULONG ?
TypeIndex		ULONG ?
Reserved		ULONG64 2 dup(?)
Index			ULONG ?
Size			ULONG ?
ModBase			ULONG64 ?
Flags			ULONG ?
Value			ULONG64 ?
Address			ULONG64 ?
Register		ULONG ?
Scope			ULONG ?
Tag			ULONG ?
NameLen			ULONG ?
MaxNameLen		ULONG ?
Name			CHAR 1 dup(?)
SYMBOL_INFO		ENDS
PSYMBOL_INFO		typedef ptr SYMBOL_INFO

SYMBOL_INFO_PACKAGE	STRUC
_si			SYMBOL_INFO <>
name			CHAR MAX_SYM_NAME + 1 dup(?)
SYMBOL_INFO_PACKAGE	ENDS
PSYMBOL_INFO_PACKAGE	typedef ptr SYMBOL_INFO_PACKAGE

SYMBOL_INFOW		STRUC
SizeOfStruct		ULONG ?
TypeIndex		ULONG ?
Reserved		ULONG64 2 dup(?)
Index			ULONG ?
Size			ULONG ?
ModBase			ULONG64 ?
Flags			ULONG ?
Value			ULONG64 ?
Address			ULONG64 ?
Register		ULONG ?
Scope			ULONG ?
Tag			ULONG ?
NameLen			ULONG ?
MaxNameLen		ULONG ?
Name			WCHAR 1 dup(?)
SYMBOL_INFOW		ENDS
PSYMBOL_INFOW		typedef ptr SYMBOL_INFOW

SYMBOL_INFO_PACKAGEW	STRUC
_si			SYMBOL_INFOW <>
name			WCHAR MAX_SYM_NAME + 1 dup(?)
SYMBOL_INFO_PACKAGEW	ENDS
PSYMBOL_INFO_PACKAGEW	typedef ptr SYMBOL_INFO_PACKAGEW

IMAGEHLP_STACK_FRAME	STRUC
InstructionOffset	ULONG64 ?
ReturnOffset		ULONG64 ?
FrameOffset		ULONG64 ?
StackOffset		ULONG64 ?
BackingStoreOffset	ULONG64 ?
FuncTableEntry		ULONG64 ?
Params			ULONG64 4 dup(?)
Reserved		ULONG64 5 dup(?)
Virtual			BOOL ?
Reserved2		ULONG ?
IMAGEHLP_STACK_FRAME	ENDS
PIMAGEHLP_STACK_FRAME	typedef ptr IMAGEHLP_STACK_FRAME


IMAGEHLP_CONTEXT	typedef ;VOID
PIMAGEHLP_CONTEXT	typedef ptr IMAGEHLP_CONTEXT

SymSetContext proto WINAPI :HANDLE, :PIMAGEHLP_STACK_FRAME, :PIMAGEHLP_CONTEXT
SymSetScopeFromAddr proto WINAPI :HANDLE, :ULONG64
SymSetScopeFromIndex proto WINAPI :HANDLE, :ULONG64, :DWORD

CALLBACK(PSYM_ENUMPROCESSES_CALLBACK, :HANDLE, :PVOID)

SymEnumProcesses proto WINAPI :PSYM_ENUMPROCESSES_CALLBACK, :ptr
SymFromAddr proto WINAPI :HANDLE, :DWORD64, :PDWORD64, :PSYMBOL_INFO
SymFromAddrW proto WINAPI :HANDLE, :DWORD64, :PDWORD64, :PSYMBOL_INFOW
SymFromToken proto WINAPI :HANDLE, :DWORD64, :DWORD, :PSYMBOL_INFO
SymFromTokenW proto WINAPI :HANDLE, :DWORD64, :DWORD, :PSYMBOL_INFOW
SymNext proto WINAPI :HANDLE, :PSYMBOL_INFO
SymNextW proto WINAPI :HANDLE, :PSYMBOL_INFOW
SymPrev proto WINAPI :HANDLE, :PSYMBOL_INFO
SymPrevW proto WINAPI :HANDLE, :PSYMBOL_INFOW
SymFromName proto WINAPI :HANDLE, :PCSTR, :PSYMBOL_INFO
SymFromNameW proto WINAPI :HANDLE, :PCWSTR, :PSYMBOL_INFOW

CALLBACK(PSYM_ENUMERATESYMBOLS_CALLBACK, :PSYMBOL_INFO, :ULONG, :PVOID)

SymEnumSymbols proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMERATESYMBOLS_CALLBACK, :ptr

CALLBACK(PSYM_ENUMERATESYMBOLS_CALLBACKW, :PSYMBOL_INFOW, :ULONG, :PVOID)

SymEnumSymbolsW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :ptr
SymEnumSymbolsForAddr proto WINAPI :HANDLE, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :ptr
SymEnumSymbolsForAddrW proto WINAPI :HANDLE, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :ptr

define SYMSEARCH_MASKOBJS      0x01
define SYMSEARCH_RECURSE       0X02
define SYMSEARCH_GLOBALSONLY   0X04
define SYMSEARCH_ALLITEMS      0X08

SymSearch proto WINAPI :HANDLE, :ULONG64, :DWORD, :DWORD, :PCSTR, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :ptr, :DWORD
SymSearchW proto WINAPI :HANDLE, :ULONG64, :DWORD, :DWORD, :PCWSTR, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :ptr, :DWORD
SymGetScope proto WINAPI :HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFO
SymGetScopeW proto WINAPI :HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFOW
SymFromIndex proto WINAPI :HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFO
SymFromIndexW proto WINAPI :HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFOW

IMAGEHLP_SYMBOL_TYPE_INFO typedef SDWORD
PIMAGEHLP_SYMBOL_TYPE_INFO typedef ptr IMAGEHLP_SYMBOL_TYPE_INFO

.enum IMAGEHLP_SYMBOL_TYPE_INFO {
    TI_GET_SYMTAG,
    TI_GET_SYMNAME,
    TI_GET_LENGTH,
    TI_GET_TYPE,
    TI_GET_TYPEID,
    TI_GET_BASETYPE,
    TI_GET_ARRAYINDEXTYPEID,
    TI_FINDCHILDREN,
    TI_GET_DATAKIND,
    TI_GET_ADDRESSOFFSET,
    TI_GET_OFFSET,
    TI_GET_VALUE,
    TI_GET_COUNT,
    TI_GET_CHILDRENCOUNT,
    TI_GET_BITPOSITION,
    TI_GET_VIRTUALBASECLASS,
    TI_GET_VIRTUALTABLESHAPEID,
    TI_GET_VIRTUALBASEPOINTEROFFSET,
    TI_GET_CLASSPARENTID,
    TI_GET_NESTED,
    TI_GET_SYMINDEX,
    TI_GET_LEXICALPARENT,
    TI_GET_ADDRESS,
    TI_GET_THISADJUST,
    TI_GET_UDTKIND,
    TI_IS_EQUIV_TO,
    TI_GET_CALLING_CONVENTION,
    TI_IS_CLOSE_EQUIV_TO,
    TI_GTIEX_REQS_VALID,
    TI_GET_VIRTUALBASEOFFSET,
    TI_GET_VIRTUALBASEDISPINDEX,
    TI_GET_IS_REFERENCE,
    TI_GET_INDIRECTVIRTUALBASECLASS,
    TI_GET_VIRTUALBASETABLETYPE,
    TI_GET_OBJECTPOINTERTYPE,
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX,
    }

TI_FINDCHILDREN_PARAMS	STRUC
Count			ULONG ?
Start			ULONG ?
ChildId			ULONG 1 dup(?)
TI_FINDCHILDREN_PARAMS	ENDS

SymGetTypeInfo proto WINAPI :HANDLE, :DWORD64, :ULONG, :IMAGEHLP_SYMBOL_TYPE_INFO, :ptr

define IMAGEHLP_GET_TYPE_INFO_UNCACHED 0x00000001
define IMAGEHLP_GET_TYPE_INFO_CHILDREN 0x00000002

IMAGEHLP_GET_TYPE_INFO_PARAMS STRUC
SizeOfStruct		ULONG ?
Flags			ULONG ?
NumIds			ULONG ?
TypeIds			PULONG ?
TagFilter		ULONG64 ?
NumReqs			ULONG ?
ReqKinds		PIMAGEHLP_SYMBOL_TYPE_INFO ?
ReqOffsets		PULONG_PTR ?
ReqSizes		PULONG ?
ReqStride		ULONG_PTR ?
BufferSize		ULONG_PTR ?
Buffer			PVOID ?
EntriesMatched		ULONG ?
EntriesFilled		ULONG ?
TagsFound		ULONG64 ?
AllReqsValid		ULONG64 ?
NumReqsValid		ULONG ?
ReqsValid		PULONG64 ?
IMAGEHLP_GET_TYPE_INFO_PARAMS ENDS
PIMAGEHLP_GET_TYPE_INFO_PARAMS typedef ptr IMAGEHLP_GET_TYPE_INFO_PARAMS

SymGetTypeInfoEx proto WINAPI :HANDLE, :DWORD64, :PIMAGEHLP_GET_TYPE_INFO_PARAMS
SymEnumTypes proto WINAPI :HANDLE, :ULONG64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :ptr
SymEnumTypesW proto WINAPI :HANDLE, :ULONG64, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :ptr
SymEnumTypesByName proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMERATESYMBOLS_CALLBACK, :ptr
SymEnumTypesByNameW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :ptr
SymGetTypeFromName proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PSYMBOL_INFO
SymGetTypeFromNameW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PSYMBOL_INFOW
SymAddSymbol proto WINAPI :HANDLE, :ULONG64, :PCSTR, :DWORD64, :DWORD, :DWORD
SymAddSymbolW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :DWORD64, :DWORD, :DWORD
SymDeleteSymbol proto WINAPI :HANDLE, :ULONG64, :PCSTR, :DWORD64, :DWORD
SymDeleteSymbolW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :DWORD64, :DWORD
SymRefreshModuleList proto WINAPI :HANDLE
SymAddSourceStream proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t

CALLBACK(SYMADDSOURCESTREAM, :HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t)

SymAddSourceStreamA proto WINAPI :HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t

CALLBACK(SYMADDSOURCESTREAMA, :HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t)

SymAddSourceStreamW proto WINAPI :HANDLE, :ULONG64, :PCWSTR, :PBYTE, :size_t
SymSrvIsStoreW proto WINAPI :HANDLE, :PCWSTR
SymSrvIsStore proto WINAPI :HANDLE, :PCSTR
SymSrvDeltaName proto WINAPI :HANDLE, :PCSTR, :PCSTR, :PCSTR, :PCSTR
SymSrvDeltaNameW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR
SymSrvGetSupplement proto WINAPI :HANDLE, :PCSTR, :PCSTR, :PCSTR
SymSrvGetSupplementW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :PCWSTR
SymSrvGetFileIndexes proto WINAPI :PCSTR, :ptr, :PDWORD, :PDWORD, :DWORD
SymSrvGetFileIndexesW proto WINAPI :PCWSTR, :ptr, :PDWORD, :PDWORD, :DWORD
SymSrvGetFileIndexStringW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :PWSTR, :size_t, :DWORD
SymSrvGetFileIndexString proto WINAPI :HANDLE, :PCSTR, :PCSTR, :PSTR, :size_t, :DWORD

SYMSRV_INDEX_INFO	STRUC
sizeofstruct		dd ?
file			CHAR MAX_PATH +1 dup(?)
stripped		BOOL ?
timestamp		dd ?
size			dd ?
dbgfile			CHAR MAX_PATH +1 dup(?)
pdbfile			CHAR MAX_PATH + 1 dup(?)
guid			GUID <>
sig			dd ?
age			dd ?
SYMSRV_INDEX_INFO	ENDS
PSYMSRV_INDEX_INFO	typedef ptr SYMSRV_INDEX_INFO

SYMSRV_INDEX_INFOW	STRUC
sizeofstruct		dd ?
file			WCHAR MAX_PATH +1 dup(?)
stripped		BOOL ?
timestamp		dd ?
size			dd ?
dbgfile			WCHAR MAX_PATH +1 dup(?)
pdbfile			WCHAR MAX_PATH + 1 dup(?)
guid			GUID <>
sig			dd ?
age			dd ?
SYMSRV_INDEX_INFOW	ENDS
PSYMSRV_INDEX_INFOW	typedef ptr SYMSRV_INDEX_INFOW

SymSrvGetFileIndexInfo proto WINAPI :PCSTR, :PSYMSRV_INDEX_INFO, :DWORD
SymSrvGetFileIndexInfoW proto WINAPI :PCWSTR, :PSYMSRV_INDEX_INFOW, :DWORD
SymSrvStoreSupplement proto WINAPI :HANDLE, :PCSTR, :PCSTR, :PCSTR, :DWORD
SymSrvStoreSupplementW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD
SymSrvStoreFile proto WINAPI :HANDLE, :PCSTR, :PCSTR, :DWORD
SymSrvStoreFileW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :DWORD

sfImage			equ 0
sfDbg			equ 1
sfPdb			equ 2
sfMpd			equ 3
sfMax			equ 4

SymGetSymbolFile proto WINAPI :HANDLE, :PCSTR, :PCSTR, :DWORD, :PSTR, :size_t, :PSTR, :size_t
SymGetSymbolFileW proto WINAPI :HANDLE, :PCWSTR, :PCWSTR, :DWORD, :PWSTR, :size_t, :PWSTR, :size_t

CALLBACK(PDBGHELP_CREATE_USER_DUMP_CALLBACK, :DWORD, :PVOID, :LPDWORD, :PVOID)

DbgHelpCreateUserDump proto WINAPI :LPCSTR, :PDBGHELP_CREATE_USER_DUMP_CALLBACK, :ptr
DbgHelpCreateUserDumpW proto WINAPI :LPCWSTR, :PDBGHELP_CREATE_USER_DUMP_CALLBACK, :ptr
SymGetSymFromAddr64 proto WINAPI :HANDLE, :DWORD64, :PDWORD64, :PIMAGEHLP_SYMBOL64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetSymFromAddr	equ <SymGetSymFromAddr64>
else
SymGetSymFromAddr proto WINAPI :HANDLE, :DWORD, :PDWORD, :PIMAGEHLP_SYMBOL
endif
SymGetSymFromName64 proto WINAPI :HANDLE, :PCSTR, :PIMAGEHLP_SYMBOL64
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetSymFromName	equ <SymGetSymFromName64>
else
SymGetSymFromName proto WINAPI :HANDLE, :PCSTR, :PIMAGEHLP_SYMBOL
endif

CALLBACK(PSYMBOLSERVERPROC, :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :PSTR)
CALLBACK(PSYMBOLSERVERPROCA, :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :PSTR)
CALLBACK(PSYMBOLSERVERPROCW, :PCWSTR, :PCWSTR, :PVOID, :DWORD, :DWORD, :PWSTR)
CALLBACK(PSYMBOLSERVERBYINDEXPROC, :PCSTR, :PCSTR, :PCSTR, :PSTR)
CALLBACK(PSYMBOLSERVERBYINDEXPROCA, :PCSTR, :PCSTR, :PCSTR, :PSTR)
CALLBACK(PSYMBOLSERVERBYINDEXPROCW, :PCWSTR, :PCWSTR, :PCWSTR, :PWSTR)
CALLBACK(PSYMBOLSERVEROPENPROC)
CALLBACK(PSYMBOLSERVERCLOSEPROC)
CALLBACK(PSYMBOLSERVERSETOPTIONSPROC, :UINT_PTR, :ULONG64)
CALLBACK(PSYMBOLSERVERSETOPTIONSWPROC, :UINT_PTR, :ULONG64)
CALLBACK(PSYMBOLSERVERCALLBACKPROC, :UINT_PTR, :ULONG64, :ULONG64)
CALLBACK(PSYMBOLSERVERGETOPTIONSPROC)
CALLBACK(PSYMBOLSERVERPINGPROC, :PCSTR)
CALLBACK(PSYMBOLSERVERPINGPROCA, :PCSTR)
CALLBACK(PSYMBOLSERVERPINGPROCW, :PCWSTR)
CALLBACK(PSYMBOLSERVERGETVERSION, :LPAPI_VERSION)
CALLBACK(PSYMBOLSERVERDELTANAME, :PCSTR, :PVOID, :DWORD, :DWORD, :PVOID, :DWORD, :DWORD, :PSTR, :size_t)
CALLBACK(PSYMBOLSERVERDELTANAMEW, :PCWSTR, :PVOID, :DWORD, :DWORD, :PVOID, :DWORD, :DWORD, :PWSTR, :size_t)
CALLBACK(PSYMBOLSERVERGETSUPPLEMENT, :PCSTR, :PCSTR, :PCSTR, :PSTR, :size_t)
CALLBACK(PSYMBOLSERVERGETSUPPLEMENTW, :PCWSTR, :PCWSTR, :PCWSTR, :PWSTR, :size_t)
CALLBACK(PSYMBOLSERVERSTORESUPPLEMENT, :PCSTR, :PCSTR, :PCSTR, :PSTR, :size_t, :DWORD)
CALLBACK(PSYMBOLSERVERSTORESUPPLEMENTW, :PCWSTR, :PCWSTR, :PCWSTR, :PWSTR, :size_t, :DWORD)
CALLBACK(PSYMBOLSERVERGETINDEXSTRING, :PVOID, :DWORD, :DWORD, :PSTR, :size_t)
CALLBACK(PSYMBOLSERVERGETINDEXSTRINGW, :PVOID, :DWORD, :DWORD, :PWSTR, :size_t)
CALLBACK(PSYMBOLSERVERSTOREFILE, :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :PSTR, :size_t, :DWORD)
CALLBACK(PSYMBOLSERVERSTOREFILEW, :PCWSTR, :PCWSTR, :PVOID, :DWORD, :DWORD, :PWSTR, :size_t, :DWORD)
CALLBACK(PSYMBOLSERVERISSTORE, :PCSTR)
CALLBACK(PSYMBOLSERVERISSTOREW, :PCWSTR)
CALLBACK(PSYMBOLSERVERVERSION)
CALLBACK(PSYMBOLSERVERMESSAGEPROC, :UINT_PTR, :ULONG64, :ULONG64)

define SYMSRV_VERSION		   2

define SSRVOPT_CALLBACK		   0x00000001
define SSRVOPT_DWORD		   0x00000002
define SSRVOPT_DWORDPTR		   0x00000004
define SSRVOPT_GUIDPTR		   0x00000008
define SSRVOPT_OLDGUIDPTR	   0x00000010
define SSRVOPT_UNATTENDED	   0x00000020
define SSRVOPT_NOCOPY		   0x00000040
define SSRVOPT_GETPATH		   0x00000040
define SSRVOPT_PARENTWIN	   0x00000080
define SSRVOPT_PARAMTYPE	   0x00000100
define SSRVOPT_SECURE		   0x00000200
define SSRVOPT_TRACE		   0x00000400
define SSRVOPT_SETCONTEXT	   0x00000800
define SSRVOPT_PROXY		   0x00001000
define SSRVOPT_DOWNSTREAM_STORE	   0x00002000
define SSRVOPT_OVERWRITE	   0x00004000
define SSRVOPT_RESETTOU		   0x00008000
define SSRVOPT_CALLBACKW	   0x00010000
define SSRVOPT_FLAT_DEFAULT_STORE  0x00020000
define SSRVOPT_PROXYW		   0x00040000
define SSRVOPT_MESSAGE		   0x00080000
define SSRVOPT_SERVICE		   0x00100000
define SSRVOPT_FAVOR_COMPRESSED	   0x00200000
define SSRVOPT_STRING		   0x00400000
define SSRVOPT_WINHTTP		   0x00800000
define SSRVOPT_WININET		   0x01000000
define SSRVOPT_DONT_UNCOMPRESS	   0x02000000
define SSRVOPT_DISABLE_PING_HOST   0x04000000
define SSRVOPT_DISABLE_TIMEOUT	   0x08000000
define SSRVOPT_ENABLE_COMM_MSG	   0x10000000
define SSRVOPT_URI_FILTER	   0x20000000
define SSRVOPT_URI_TIERS	   0x40000000
define SSRVOPT_RETRY_APP_HANG	   0x80000000

define SSRVOPT_MAX		   0x80000000

define SSRVOPT_RESET		   (-1)

define NUM_SSRVOPTS		   32

define SSRVURI_HTTP_NORMAL	   0x01
define SSRVURI_HTTP_COMPRESSED	   0x02
define SSRVURI_HTTP_FILEPTR	   0x04

define SSRVURI_UNC_NORMAL	   0x10
define SSRVURI_UNC_COMPRESSED	   0x20
define SSRVURI_UNC_FILEPTR	   0x40

define SSRVURI_HTTP_MASK	   0x0F
define SSRVURI_UNC_MASK		   0xF0
define SSRVURI_ALL		   0xFF

define SSRVURI_NORMAL		   SSRVURI_HTTP_NORMAL
define SSRVURI_COMPRESSED	   SSRVURI_HTTP_COMPRESSED
define SSRVURI_FILEPTR		   SSRVURI_HTTP_FILEPTR

define SSRVACTION_TRACE		   1
define SSRVACTION_QUERYCANCEL	   2
define SSRVACTION_EVENT		   3
define SSRVACTION_EVENTW	   4
define SSRVACTION_SIZE		   5
define SSRVACTION_HTTPSTATUS	   6
define SSRVACTION_XMLOUTPUT	   7
define SSRVACTION_CHECKSUMSTATUS   8

define SYMSTOREOPT_COMPRESS	   0x01
define SYMSTOREOPT_OVERWRITE	   0x02
define SYMSTOREOPT_RETURNINDEX	   0x04
define SYMSTOREOPT_POINTER	   0x08
define SYMSTOREOPT_ALT_INDEX	   0x10
define SYMSTOREOPT_UNICODE	   0x20
define SYMSTOREOPT_PASS_IF_EXISTS  0x40

ifdef DBGHELP_TRANSLATE_TCHAR
SymInitialize		equ <SymInitializeW>
SymAddSymbol		equ <SymAddSymbolW>
SymDeleteSymbol		equ <SymDeleteSymbolW>
SearchTreeForFile	equ <SearchTreeForFileW>
UnDecorateSymbolName	equ <UnDecorateSymbolNameW>
SymGetLineFromName64	equ <SymGetLineFromNameW64>
SymGetLineFromAddr64	equ <SymGetLineFromAddrW64>
SymGetLineNext64	equ <SymGetLineNextW64>
SymGetLinePrev64	equ <SymGetLinePrevW64>
SymFromName		equ <SymFromNameW>
SymFindExecutableImage	equ <SymFindExecutableImageW>
FindExecutableImageEx	equ <FindExecutableImageExW>
SymSearch		equ <SymSearchW>
SymEnumLines		equ <SymEnumLinesW>
SymEnumSourceLines	equ <SymEnumSourceLinesW>
SymGetTypeFromName	equ <SymGetTypeFromNameW>
SymEnumSymbolsForAddr	equ <SymEnumSymbolsForAddrW>
SymFromAddr		equ <SymFromAddrW>
SymMatchString		equ <SymMatchStringW>
SymEnumSourceFiles	equ <SymEnumSourceFilesW>
SymEnumSymbols		equ <SymEnumSymbolsW>
SymLoadModuleEx		equ <SymLoadModuleExW>
SymSetSearchPath	equ <SymSetSearchPathW>
SymGetSearchPath	equ <SymGetSearchPathW>
EnumDirTree		equ <EnumDirTreeW>
SymFromToken		equ <SymFromTokenW>
SymFromIndex		equ <SymFromIndexW>
SymGetScope		equ <SymGetScopeW>
SymNext			equ <SymNextW>
SymPrev			equ <SymPrevW>
SymEnumTypes		equ <SymEnumTypesW>
SymEnumTypesByName	equ <SymEnumTypesByNameW>
SymRegisterCallback64	equ <SymRegisterCallbackW64>
SymFindDebugInfoFile	equ <SymFindDebugInfoFileW>
FindDebugInfoFileEx	equ <FindDebugInfoFileExW>
SymFindFileInPath	equ <SymFindFileInPathW>
SymEnumerateModules64	equ <SymEnumerateModulesW64>
SymSetHomeDirectory	equ <SymSetHomeDirectoryW>
SymGetHomeDirectory	equ <SymGetHomeDirectoryW>
SymGetSourceFile	equ <SymGetSourceFileW>
SymGetSourceFileToken	equ <SymGetSourceFileTokenW>
SymGetSourceFileFromToken equ <SymGetSourceFileFromTokenW>
SymGetSourceVarFromToken equ <SymGetSourceVarFromTokenW>
SymGetSourceFileToken	equ <SymGetSourceFileTokenW>
SymGetFileLineOffsets64 equ <SymGetFileLineOffsetsW64>
SymFindFileInPath	equ <SymFindFileInPathW>
SymMatchFileName	equ <SymMatchFileNameW>
SymGetSourceFileFromToken equ <SymGetSourceFileFromTokenW>
SymGetSourceVarFromToken equ <SymGetSourceVarFromTokenW>
SymGetModuleInfo64	equ <SymGetModuleInfoW64>
SymSrvIsStore		equ <SymSrvIsStoreW>
SymSrvDeltaName		equ <SymSrvDeltaNameW>
SymSrvGetSupplement	equ <SymSrvGetSupplementW>
SymSrvStoreSupplement	equ <SymSrvStoreSupplementW>
SymSrvGetFileIndexes	equ <SymSrvGetFileIndexes>
SymSrvGetFileIndexString equ <SymSrvGetFileIndexStringW>
SymSrvStoreFile		equ <SymSrvStoreFileW>
SymGetSymbolFile	equ <SymGetSymbolFileW>
EnumerateLoadedModules64 equ <EnumerateLoadedModulesW64>
EnumerateLoadedModulesEx equ <EnumerateLoadedModulesExW>
SymSrvGetFileIndexInfo	equ <SymSrvGetFileIndexInfoW>

IMAGEHLP_LINE64		equ IMAGEHLP_LINEW64
PIMAGEHLP_LINE64	equ PIMAGEHLP_LINEW64
SYMBOL_INFO		equ <SYMBOL_INFOW>
PSYMBOL_INFO		equ <PSYMBOL_INFOW>
SYMBOL_INFO_PACKAGE	equ <SYMBOL_INFO_PACKAGEW>
PSYMBOL_INFO_PACKAGE	equ <PSYMBOL_INFO_PACKAGEW>
FIND_EXE_FILE_CALLBACK	equ <FIND_EXE_FILE_CALLBACKW>
PFIND_EXE_FILE_CALLBACK equ <PFIND_EXE_FILE_CALLBACKW>
SYM_ENUMERATESYMBOLS_CALLBACK equ <SYM_ENUMERATESYMBOLS_CALLBACKW>
PSYM_ENUMERATESYMBOLS_CALLBACK equ <PSYM_ENUMERATESYMBOLS_CALLBACKW>
SRCCODEINFO		equ <SRCCODEINFOW>
PSRCCODEINFO		equ <PSRCCODEINFOW>
SOURCEFILE		equ <SOURCEFILEW>
PSOURCEFILE		equ <PSOURCEFILEW>
SYM_ENUMSOURECFILES_CALLBACK equ <SYM_ENUMSOURCEFILES_CALLBACKW>
PSYM_ENUMSOURCEFILES_CALLBACK equ <PSYM_ENUMSOURECFILES_CALLBACKW>
IMAGEHLP_CBA_EVENT	equ <IMAGEHLP_CBA_EVENTW>
PIMAGEHLP_CBA_EVENT	equ <PIMAGEHLP_CBA_EVENTW>
PENUMDIRTREE_CALLBACK	equ <PENUMDIRTREE_CALLBACKW>
IMAGEHLP_DEFERRED_SYMBOL_LOAD64 equ IMAGEHLP_DEFERRED_SYMBOL_LOADW64
PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 equ PIMAGEHLP_DEFERRED_SYMBOL_LOADW64
PFIND_DEBUG_FILE_CALLBACK equ <PFIND_DEBUG_FILE_CALLBACKW>
PFINDFILEINPATHCALLBACK equ <PFINDFILEINPATHCALLBACKW>
IMAGEHLP_MODULE64	equ IMAGEHLP_MODULEW64
PIMAGEHLP_MODULE64	equ PIMAGEHLP_MODULEW64
SYMSRV_INDEX_INFO	equ <SYMSRV_INDEX_INFOW>
PSYMSRV_INDEX_INFO	equ <PSYMSRV_INDEX_INFOW>

PSYMBOLSERVERPROC	equ <PSYMBOLSERVERPROCW>
PSYMBOLSERVERPINGPROC	equ <PSYMBOLSERVERPINGPROCW>
endif

FindFileInPath proto WINAPI :HANDLE, :PCSTR, :PCSTR, :ptr, :DWORD, :DWORD, :DWORD, :PSTR
FindFileInSearchPath proto WINAPI :HANDLE, :PCSTR, :PCSTR, :DWORD, :DWORD, :DWORD, :PSTR
SymEnumSym proto WINAPI :HANDLE, :ULONG64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :ptr
SymEnumerateSymbols64 proto WINAPI :HANDLE, :ULONG64, :PSYM_ENUMSYMBOLS_CALLBACK64, :ptr
SymEnumerateSymbolsW64 proto WINAPI :HANDLE, :ULONG64, :PSYM_ENUMSYMBOLS_CALLBACK64W, :ptr

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymEnumerateSymbols	equ <SymEnumerateSymbols64>
SymEnumerateSymbolsW	equ <SymEnumerateSymbolsW64>
else
SymEnumerateSymbols proto WINAPI :HANDLE, :ULONG, :PSYM_ENUMSYMBOLS_CALLBACK, :ptr
SymEnumerateSymbolsW proto WINAPI :HANDLE, :ULONG, :PSYM_ENUMSYMBOLS_CALLBACKW, :ptr
endif
SymLoadModule64 proto WINAPI :HANDLE, :HANDLE, :PCSTR, :PCSTR, :DWORD64, :DWORD
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymLoadModule		equ <SymLoadModule64>
else
SymLoadModule proto WINAPI :HANDLE, :HANDLE, :PCSTR, :PCSTR, :DWORD, :DWORD
endif
SymGetSymNext64 proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOL64
SymGetSymNextW64 proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOLW64

if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetSymNext		equ <SymGetSymNext64>
SymGetSymNextW		equ <SymGetSymNextW64>
else
SymGetSymNext proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOL
SymGetSymNextW proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOLW
endif
SymGetSymPrev64 proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOL64
SymGetSymPrevW64 proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOLW64
if NOT defined(_IMAGEHLP_SOURCE_) AND defined(_IMAGEHLP64)
SymGetSymPrev		equ <SymGetSymPrev64>
SymGetSymPrevW		equ <SymGetSymPrevW64>
else
SymGetSymPrev proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOL
SymGetSymPrevW proto WINAPI :HANDLE, :PIMAGEHLP_SYMBOLW
endif

define SYMF_OMAP_GENERATED   0x00000001
define SYMF_OMAP_MODIFIED    0x00000002
define SYMF_REGISTER	     0x00000008
define SYMF_REGREL	     0x00000010
define SYMF_FRAMEREL	     0x00000020
define SYMF_PARAMETER	     0x00000040
define SYMF_LOCAL	     0x00000080
define SYMF_CONSTANT	     0x00000100
define SYMF_EXPORT	     0x00000200
define SYMF_FORWARDER	     0x00000400
define SYMF_FUNCTION	     0x00000800
define SYMF_VIRTUAL	     0x00001000
define SYMF_THUNK	     0x00002000
define SYMF_TLSREL	     0x00004000

define IMAGEHLP_SYMBOL_INFO_VALUEPRESENT	  1
define IMAGEHLP_SYMBOL_INFO_REGISTER		  SYMF_REGISTER
define IMAGEHLP_SYMBOL_INFO_REGRELATIVE		  SYMF_REGREL
define IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE	  SYMF_FRAMEREL
define IMAGEHLP_SYMBOL_INFO_PARAMETER		  SYMF_PARAMETER
define IMAGEHLP_SYMBOL_INFO_LOCAL		  SYMF_LOCAL
define IMAGEHLP_SYMBOL_INFO_CONSTANT		  SYMF_CONSTANT
define IMAGEHLP_SYMBOL_FUNCTION			  SYMF_FUNCTION
define IMAGEHLP_SYMBOL_VIRTUAL			  SYMF_VIRTUAL
define IMAGEHLP_SYMBOL_THUNK			  SYMF_THUNK
define IMAGEHLP_SYMBOL_INFO_TLSRELATIVE		  SYMF_TLSREL

define IMAGEHLP_RMAP_MAPPED_FLAT		   0x00000001
define IMAGEHLP_RMAP_BIG_ENDIAN			   0x00000002
define IMAGEHLP_RMAP_IGNORE_MISCOMPARE		   0x00000004

define IMAGEHLP_RMAP_FIXUP_ARM64X		   0x10000000
define IMAGEHLP_RMAP_LOAD_RW_DATA_SECTIONS	   0x20000000
define IMAGEHLP_RMAP_OMIT_SHARED_RW_DATA_SECTIONS  0x40000000
define IMAGEHLP_RMAP_FIXUP_IMAGEBASE		   0x80000000

.pragma pack(pop)

include minidumpapiset.inc

.pragma list(pop)
endif
