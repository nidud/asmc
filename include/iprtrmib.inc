ifndef __ROUTING_IPRTRMIB_H__
define __ROUTING_IPRTRMIB_H__
ifndef _WINAPIFAMILY_
include winapifamily.inc
endif

if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)

include mprapidef.inc
include ipifcons.inc

define IPRTRMGR_PID 10000

ifndef ANY_SIZE
define ANY_SIZE 1
endif

.enum {
	IF_NUMBER,
	IF_TABLE,
	IF_ROW,
	IP_STATS,
	IP_ADDRTABLE,
	IP_ADDRROW,
	IP_FORWARDNUMBER,
	IP_FORWARDTABLE,
	IP_FORWARDROW,
	IP_NETTABLE,
	IP_NETROW,
	ICMP_STATS,
	TCP_STATS,
	TCP_TABLE,
	TCP_ROW,
	UDP_STATS,
	UDP_TABLE,
	UDP_ROW,
	MCAST_MFE,
	MCAST_MFE_STATS,
	BEST_IF,
	BEST_ROUTE,
	PROXY_ARP,
	MCAST_IF_ENTRY,
	MCAST_GLOBAL,
	IF_STATUS,
	MCAST_BOUNDARY,
	MCAST_SCOPE,
	DEST_MATCHING,
	DEST_LONGER,
	DEST_SHORTER,
	ROUTE_MATCHING
	ROUTE_LONGER,
	ROUTE_SHORTER,
	ROUTE_STATE,
	MCAST_MFE_STATS_EX,
	IP6_STATS,
	UDP6_STATS,
	TCP6_STATS,
	}

if (NTDDI_VERSION ge NTDDI_VISTA)
define NUMBER_OF_EXPORTED_VARIABLES    (TCP6_STATS + 1)
else
define NUMBER_OF_EXPORTED_VARIABLES    (ROUTE_STATE + 1)
endif

MIB_OPAQUE_QUERY	struct
dwVarId			DWORD ?
rgdwVarIndex		DWORD ANY_SIZE dup(?)
MIB_OPAQUE_QUERY	ends
PMIB_OPAQUE_QUERY	typedef ptr MIB_OPAQUE_QUERY

include ipmib.inc
include tcpmib.inc
include udpmib.inc

.enum TCP_TABLE_CLASS {
    TCP_TABLE_BASIC_LISTENER,
    TCP_TABLE_BASIC_CONNECTIONS,
    TCP_TABLE_BASIC_ALL,
    TCP_TABLE_OWNER_PID_LISTENER,
    TCP_TABLE_OWNER_PID_CONNECTIONS,
    TCP_TABLE_OWNER_PID_ALL,
    TCP_TABLE_OWNER_MODULE_LISTENER,
    TCP_TABLE_OWNER_MODULE_CONNECTIONS,
    TCP_TABLE_OWNER_MODULE_ALL
    }

.enum UDP_TABLE_CLASS {
    UDP_TABLE_BASIC,
    UDP_TABLE_OWNER_PID,
    UDP_TABLE_OWNER_MODULE
    }

.enum TCPIP_OWNER_MODULE_INFO_CLASS {
    TCPIP_OWNER_MODULE_INFO_BASIC
    }

TCPIP_OWNER_MODULE_BASIC_INFO struct
pModuleName		PWCHAR ?
pModulePath		PWCHAR ?
TCPIP_OWNER_MODULE_BASIC_INFO ends
PTCPIP_OWNER_MODULE_BASIC_INFO typedef ptr TCPIP_OWNER_MODULE_BASIC_INFO

MIB_IPMCAST_BOUNDARY	struct
dwIfIndex		DWORD ?
dwGroupAddress		DWORD ?
dwGroupMask		DWORD ?
dwStatus		DWORD ?
MIB_IPMCAST_BOUNDARY	ends
PMIB_IPMCAST_BOUNDARY	typedef ptr MIB_IPMCAST_BOUNDARY

MIB_IPMCAST_BOUNDARY_TABLE struct
dwNumEntries		DWORD ?
table			MIB_IPMCAST_BOUNDARY ANY_SIZE dup(<>)
MIB_IPMCAST_BOUNDARY_TABLE ends
PMIB_IPMCAST_BOUNDARY_TABLE typedef ptr MIB_IPMCAST_BOUNDARY_TABLE

SIZEOF_BOUNDARY_TABLE macro X
  exitm<(FIELD_OFFSET(MIB_IPMCAST_BOUNDARY_TABLE,table) + ((X) * sizeof(MIB_IPMCAST_BOUNDARY)) + ALIGN_SIZE)>
  endm

MIB_BOUNDARYROW		struct
dwGroupAddress		DWORD ?
dwGroupMask		DWORD ?
MIB_BOUNDARYROW		ends
PMIB_BOUNDARYROW	typedef ptr MIB_BOUNDARYROW

MIB_MCAST_LIMIT_ROW	struct
dwTtl			DWORD ?
dwRateLimit		DWORD ?
MIB_MCAST_LIMIT_ROW	ends
PMIB_MCAST_LIMIT_ROW	typedef ptr MIB_MCAST_LIMIT_ROW

define MAX_SCOPE_NAME_LEN 255

define SN_UNICODE
SN_CHAR			typedef WCHAR
SCOPE_NAME		typedef ptr WCHAR

MIB_IPMCAST_SCOPE	struct
dwGroupAddress		DWORD ?
dwGroupMask		DWORD ?
snNameBuffer		WCHAR MAX_SCOPE_NAME_LEN+1 dup(?)
dwStatus		DWORD ?
MIB_IPMCAST_SCOPE	ends
PMIB_IPMCAST_SCOPE	typedef ptr MIB_IPMCAST_SCOPE

MIB_IPDESTROW		struct
ForwardRow		MIB_IPFORWARDROW <>
dwForwardPreference	DWORD ?
dwForwardViewSet	DWORD ?
MIB_IPDESTROW		ends
PMIB_IPDESTROW		typedef ptr MIB_IPDESTROW

MIB_IPDESTTABLE		struct
dwNumEntries		DWORD ?
table			MIB_IPDESTROW ANY_SIZE dup(<>)
MIB_IPDESTTABLE		ends
PMIB_IPDESTTABLE	typedef ptr MIB_IPDESTTABLE

MIB_BEST_IF		struct
dwDestAddr		DWORD ?
dwIfIndex		DWORD ?
MIB_BEST_IF		ends
PMIB_BEST_IF		typedef ptr MIB_BEST_IF

MIB_PROXYARP		struct
dwAddress		DWORD ?
dwMask			DWORD ?
dwIfIndex		DWORD ?
MIB_PROXYARP		ends
PMIB_PROXYARP		typedef ptr MIB_PROXYARP

MIB_IFSTATUS		struct
dwIfIndex		DWORD ?
dwAdminStatus		DWORD ?
dwOperationalStatus	DWORD ?
bMHbeatActive		BOOL ?
bMHbeatAlive		BOOL ?
MIB_IFSTATUS		ends
PMIB_IFSTATUS		typedef ptr MIB_IFSTATUS

MIB_ROUTESTATE		struct
bRoutesSetToStack	BOOL ?
MIB_ROUTESTATE		ends
PMIB_ROUTESTATE		typedef ptr MIB_ROUTESTATE

MIB_OPAQUE_INFO		struct
dwId			DWORD ?
union
 ullAlign		ULONGLONG ?
 rgbyData		BYTE 1 dup(?)
ends
MIB_OPAQUE_INFO		ends
PMIB_OPAQUE_INFO	typedef ptr MIB_OPAQUE_INFO

define MAX_MIB_OFFSET	   8

MIB_INFO_SIZE macro S
  exitm<MAX_MIB_OFFSET + sizeof(S)>
  endm

MIB_INFO_SIZE_IN_DWORDS macro S
  exitm<((MIB_INFO_SIZE(S))/sizeof(DWORD) + 1)>
  endm

endif

endif
