ifndef _RPCNDR500_
include rpcndr500.inc
endif
ifndef __vds_h__
define __vds_h__

ifndef __oaidl_h__
include oaidl.inc
endif
include vdssys.inc
include vdserr.inc
include vdslun.inc

ifndef _WINAPIFAMILY_
include winapifamily.inc
endif

if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

VDS_OBJECT_ID typedef GUID

.enum VDS_OBJECT_TYPE {
	VDS_OT_UNKNOWN		= 0,
	VDS_OT_PROVIDER		= 1,
	VDS_OT_PACK		= 10,
	VDS_OT_VOLUME		= 11,
	VDS_OT_VOLUME_PLEX	= 12,
	VDS_OT_DISK		= 13,
	VDS_OT_SUB_SYSTEM	= 30,
	VDS_OT_CONTROLLER	= 31,
	VDS_OT_DRIVE		= 32,
	VDS_OT_LUN		= 33,
	VDS_OT_LUN_PLEX		= 34,
	VDS_OT_PORT		= 35,
	VDS_OT_PORTAL		= 36,
	VDS_OT_TARGET		= 37,
	VDS_OT_PORTAL_GROUP	= 38,
	VDS_OT_STORAGE_POOL	= 39,
	VDS_OT_HBAPORT		= 90,
	VDS_OT_INIT_ADAPTER	= 91,
	VDS_OT_INIT_PORTAL	= 92,
	VDS_OT_ASYNC		= 100,
	VDS_OT_ENUM		= 101,
	VDS_OT_VDISK		= 200,
	VDS_OT_OPEN_VDISK	= 201
	}

.enum VDS_PROVIDER_TYPE {
	VDS_PT_UNKNOWN		= 0,
	VDS_PT_SOFTWARE		= 1,
	VDS_PT_HARDWARE		= 2,
	VDS_PT_VIRTUALDISK	= 3,
	VDS_PT_MAX		= 4
	}

.enum VDS_PROVIDER_FLAG {
	VDS_PF_DYNAMIC			= 0x1,
	VDS_PF_INTERNAL_HARDWARE_PROVIDER	= 0x2,
	VDS_PF_ONE_DISK_ONLY_PER_PACK	= 0x4,
	VDS_PF_ONE_PACK_ONLINE_ONLY	= 0x8,
	VDS_PF_VOLUME_SPACE_MUST_BE_CONTIGUOUS	= 0x10,
	VDS_PF_SUPPORT_DYNAMIC		= 0x80000000,
	VDS_PF_SUPPORT_FAULT_TOLERANT	= 0x40000000,
	VDS_PF_SUPPORT_DYNAMIC_1394	= 0x20000000,
	VDS_PF_SUPPORT_MIRROR		= 0x20,
	VDS_PF_SUPPORT_RAID5		= 0x40
	}

.enum VDS_RECOVER_ACTION {
	VDS_RA_UNKNOWN	= 0,
	VDS_RA_REFRESH	= 1,
	VDS_RA_RESTART	= 2
	}

.enum VDS_NOTIFICATION_TARGET_TYPE {
	VDS_NTT_UNKNOWN		= 0,
	VDS_NTT_PACK		= VDS_OT_PACK,
	VDS_NTT_VOLUME		= VDS_OT_VOLUME,
	VDS_NTT_DISK		= VDS_OT_DISK,
	VDS_NTT_PARTITION	= 60,
	VDS_NTT_DRIVE_LETTER	= 61,
	VDS_NTT_FILE_SYSTEM	= 62,
	VDS_NTT_MOUNT_POINT	= 63,
	VDS_NTT_SUB_SYSTEM	= VDS_OT_SUB_SYSTEM,
	VDS_NTT_CONTROLLER	= VDS_OT_CONTROLLER,
	VDS_NTT_DRIVE		= VDS_OT_DRIVE,
	VDS_NTT_LUN		= VDS_OT_LUN,
	VDS_NTT_PORT		= VDS_OT_PORT,
	VDS_NTT_PORTAL		= VDS_OT_PORTAL,
	VDS_NTT_TARGET		= VDS_OT_TARGET,
	VDS_NTT_PORTAL_GROUP	= VDS_OT_PORTAL_GROUP,
	VDS_NTT_SERVICE		= 200
	}

define	VDS_NF_PACK_ARRIVE	( 1 )
define	VDS_NF_PACK_DEPART	( 2 )
define	VDS_NF_PACK_MODIFY	( 3 )
define	VDS_NF_VOLUME_ARRIVE	( 4 )
define	VDS_NF_VOLUME_DEPART	( 5 )
define	VDS_NF_VOLUME_MODIFY	( 6 )
define	VDS_NF_VOLUME_REBUILDING_PROGRESS	( 7 )
define	VDS_NF_DISK_ARRIVE	( 8 )
define	VDS_NF_DISK_DEPART	( 9 )
define	VDS_NF_DISK_MODIFY	( 10 )
define	VDS_NF_PARTITION_ARRIVE ( 11 )
define	VDS_NF_PARTITION_DEPART ( 12 )
define	VDS_NF_PARTITION_MODIFY ( 13 )
define	VDS_NF_SUB_SYSTEM_ARRIVE	( 101 )
define	VDS_NF_SUB_SYSTEM_DEPART	( 102 )
define	VDS_NF_CONTROLLER_ARRIVE	( 103 )
define	VDS_NF_CONTROLLER_DEPART	( 104 )
define	VDS_NF_DRIVE_ARRIVE	( 105 )
define	VDS_NF_DRIVE_DEPART	( 106 )
define	VDS_NF_DRIVE_MODIFY	( 107 )
define	VDS_NF_LUN_ARRIVE	( 108 )
define	VDS_NF_LUN_DEPART	( 109 )
define	VDS_NF_LUN_MODIFY	( 110 )
define	VDS_NF_PORT_ARRIVE	( 121 )
define	VDS_NF_PORT_DEPART	( 122 )
define	VDS_NF_PORTAL_ARRIVE	( 123 )
define	VDS_NF_PORTAL_DEPART	( 124 )
define	VDS_NF_PORTAL_MODIFY	( 125 )
define	VDS_NF_TARGET_ARRIVE	( 126 )
define	VDS_NF_TARGET_DEPART	( 127 )
define	VDS_NF_TARGET_MODIFY	( 128 )
define	VDS_NF_PORTAL_GROUP_ARRIVE	( 129 )
define	VDS_NF_PORTAL_GROUP_DEPART	( 130 )
define	VDS_NF_PORTAL_GROUP_MODIFY	( 131 )
define	VDS_NF_SUB_SYSTEM_MODIFY	( 151 )
define	VDS_NF_DRIVE_LETTER_FREE	( 201 )
define	VDS_NF_DRIVE_LETTER_ASSIGN	( 202 )
define	VDS_NF_FILE_SYSTEM_MODIFY	( 203 )
define	VDS_NF_FILE_SYSTEM_FORMAT_PROGRESS	( 204 )
define	VDS_NF_MOUNT_POINTS_CHANGE	( 205 )
define	VDS_NF_FILE_SYSTEM_SHRINKING_PROGRESS	( 206 )
define	VDS_NF_SERVICE_OUT_OF_SYNC	( 301 )
define	VDS_NF_CONTROLLER_MODIFY	( 350 )
define	VDS_NF_CONTROLLER_REMOVED	( 351 )
define	VDS_NF_PORT_MODIFY	( 352 )
define	VDS_NF_PORT_REMOVED	( 353 )
define	VDS_NF_DRIVE_REMOVED	( 354 )

VDS_PACK_NOTIFICATION	struct
ulEvent			ULONG ?
packId			VDS_OBJECT_ID <>
VDS_PACK_NOTIFICATION	ends

VDS_DISK_NOTIFICATION	struct
ulEvent			ULONG ?
diskId			VDS_OBJECT_ID <>
VDS_DISK_NOTIFICATION	ends

VDS_VOLUME_NOTIFICATION struct
ulEvent			ULONG ?
volumeId		VDS_OBJECT_ID <>
plexId			VDS_OBJECT_ID <>
ulPercentCompleted	ULONG ?
VDS_VOLUME_NOTIFICATION ends

VDS_PARTITION_NOTIFICATION struct
ulEvent			ULONG ?
diskId			VDS_OBJECT_ID <>
ullOffset		ULONGLONG ?
VDS_PARTITION_NOTIFICATION ends

VDS_SERVICE_NOTIFICATION struct
ulEvent			ULONG ?
action			VDS_RECOVER_ACTION ?
VDS_SERVICE_NOTIFICATION ends

VDS_DRIVE_LETTER_NOTIFICATION struct
ulEvent			ULONG ?
wcLetter		WCHAR ?
volumeId		VDS_OBJECT_ID <>
VDS_DRIVE_LETTER_NOTIFICATION ends

VDS_FILE_SYSTEM_NOTIFICATION struct
ulEvent			ULONG ?
volumeId		VDS_OBJECT_ID <>
dwPercentCompleted	DWORD ?
VDS_FILE_SYSTEM_NOTIFICATION ends

VDS_MOUNT_POINT_NOTIFICATION struct
ulEvent			ULONG ?
volumeId		VDS_OBJECT_ID <>
VDS_MOUNT_POINT_NOTIFICATION ends

VDS_SUB_SYSTEM_NOTIFICATION struct
ulEvent			ULONG ?
subSystemId		VDS_OBJECT_ID <>
VDS_SUB_SYSTEM_NOTIFICATION ends

VDS_CONTROLLER_NOTIFICATION struct
ulEvent			ULONG ?
controllerId		VDS_OBJECT_ID <>
VDS_CONTROLLER_NOTIFICATION ends

VDS_DRIVE_NOTIFICATION	struct
ulEvent			ULONG ?
driveId			VDS_OBJECT_ID <>
VDS_DRIVE_NOTIFICATION	ends

VDS_LUN_NOTIFICATION	struct
ulEvent			ULONG ?
LunId			VDS_OBJECT_ID <>
VDS_LUN_NOTIFICATION	ends

VDS_PORT_NOTIFICATION	struct
ulEvent			ULONG ?
portId			VDS_OBJECT_ID <>
VDS_PORT_NOTIFICATION	ends

VDS_PORTAL_NOTIFICATION struct
ulEvent			ULONG ?
portalId		VDS_OBJECT_ID <>
VDS_PORTAL_NOTIFICATION ends

VDS_TARGET_NOTIFICATION struct
ulEvent			ULONG ?
targetId		VDS_OBJECT_ID <>
VDS_TARGET_NOTIFICATION ends

VDS_PORTAL_GROUP_NOTIFICATION struct
ulEvent			ULONG ?
portalGroupId		VDS_OBJECT_ID <>
VDS_PORTAL_GROUP_NOTIFICATION ends

VDS_NOTIFICATION	struct
objectType		VDS_NOTIFICATION_TARGET_TYPE ?
UNION
 Pack			VDS_PACK_NOTIFICATION <>
 Disk			VDS_DISK_NOTIFICATION <>
 Volume			VDS_VOLUME_NOTIFICATION <>
 Partition		VDS_PARTITION_NOTIFICATION <>
 Letter			VDS_DRIVE_LETTER_NOTIFICATION <>
 FileSystem		VDS_FILE_SYSTEM_NOTIFICATION <>
 MountPoint		VDS_MOUNT_POINT_NOTIFICATION <>
 SubSystem		VDS_SUB_SYSTEM_NOTIFICATION <>
 Controller		VDS_CONTROLLER_NOTIFICATION <>
 Drive			VDS_DRIVE_NOTIFICATION <>
 Lun			VDS_LUN_NOTIFICATION <>
 Port			VDS_PORT_NOTIFICATION <>
 Portal			VDS_PORTAL_NOTIFICATION <>
 Target			VDS_TARGET_NOTIFICATION <>
 PortalGroup		VDS_PORTAL_GROUP_NOTIFICATION <>
 Service		VDS_SERVICE_NOTIFICATION <>
ENDS

VDS_NOTIFICATION	ends

.enum VDS_ASYNC_OUTPUT_TYPE {
	VDS_ASYNCOUT_UNKNOWN		= 0,
	VDS_ASYNCOUT_CREATEVOLUME	= 1,
	VDS_ASYNCOUT_EXTENDVOLUME	= 2,
	VDS_ASYNCOUT_SHRINKVOLUME	= 3,
	VDS_ASYNCOUT_ADDVOLUMEPLEX	= 4,
	VDS_ASYNCOUT_BREAKVOLUMEPLEX	= 5,
	VDS_ASYNCOUT_REMOVEVOLUMEPLEX	= 6,
	VDS_ASYNCOUT_REPAIRVOLUMEPLEX	= 7,
	VDS_ASYNCOUT_RECOVERPACK	= 8,
	VDS_ASYNCOUT_REPLACEDISK	= 9,
	VDS_ASYNCOUT_CREATEPARTITION	= 10,
	VDS_ASYNCOUT_CLEAN		= 11,
	VDS_ASYNCOUT_CREATELUN		= 50,
	VDS_ASYNCOUT_ADDLUNPLEX		= 52,
	VDS_ASYNCOUT_REMOVELUNPLEX	= 53,
	VDS_ASYNCOUT_EXTENDLUN		= 54,
	VDS_ASYNCOUT_SHRINKLUN		= 55,
	VDS_ASYNCOUT_RECOVERLUN		= 56,
	VDS_ASYNCOUT_LOGINTOTARGET	= 60,
	VDS_ASYNCOUT_LOGOUTFROMTARGET	= 61,
	VDS_ASYNCOUT_CREATETARGET	= 62,
	VDS_ASYNCOUT_CREATEPORTALGROUP	= 63,
	VDS_ASYNCOUT_DELETETARGET	= 64,
	VDS_ASYNCOUT_ADDPORTAL		= 65,
	VDS_ASYNCOUT_REMOVEPORTAL	= 66,
	VDS_ASYNCOUT_DELETEPORTALGROUP	= 67,
	VDS_ASYNCOUT_FORMAT		= 101,
	VDS_ASYNCOUT_CREATE_VDISK	= 200,
	VDS_ASYNCOUT_ATTACH_VDISK	= 201,
	VDS_ASYNCOUT_COMPACT_VDISK	= 202,
	VDS_ASYNCOUT_MERGE_VDISK	= 203,
	VDS_ASYNCOUT_EXPAND_VDISK	= 204
	}

VDS_ASYNC_OUTPUT	STRUC
type			VDS_ASYNC_OUTPUT_TYPE ?
UNION
 STRUCT _cp
  ullOffset		ULONGLONG ?
  volumeId		VDS_OBJECT_ID <>
 ENDS
 STRUCT _cv
  pVolumeUnk		LPUNKNOWN ?
 ENDS
 STRUCT _bvp
  pVolumeUnk		LPUNKNOWN ?
 ENDS
 STRUCT _sv
  ullReclaimedBytes	ULONGLONG ?
 ENDS
 STRUCT _cl
  pLunUnk		LPUNKNOWN ?
 ENDS
 STRUCT _ct
  pTargetUnk		LPUNKNOWN ?
 ENDS
 STRUCT _cpg
  pPortalGroupUnk	LPUNKNOWN ?
 ENDS
 STRUCT _cvd
  pVDiskUnk		LPUNKNOWN ?
 ENDS
ENDS
VDS_ASYNC_OUTPUT	ENDS

VDS_ISCSI_PORTALGROUP_TAG typedef USHORT

.enum VDS_IPADDRESS_TYPE {
	VDS_IPT_TEXT,
	VDS_IPT_IPV4,
	VDS_IPT_IPV6,
	VDS_IPT_EMPTY
	}

.enum VDS_HEALTH {
	VDS_H_UNKNOWN,
	VDS_H_HEALTHY,
	VDS_H_REBUILDING,
	VDS_H_STALE,
	VDS_H_FAILING,
	VDS_H_FAILING_REDUNDANCY,
	VDS_H_FAILED_REDUNDANCY,
	VDS_H_FAILED_REDUNDANCY_FAILING,
	VDS_H_FAILED,
	VDS_H_REPLACED,
	VDS_H_PENDING_FAILURE,
	VDS_H_DEGRADED
	}

.enum VDS_TRANSITION_STATE {
	VDS_TS_UNKNOWN,
	VDS_TS_STABLE,
	VDS_TS_EXTENDING,
	VDS_TS_SHRINKING,
	VDS_TS_RECONFIGING,
	VDS_TS_RESTRIPING
	}

.enum VDS_FILE_SYSTEM_TYPE {
	VDS_FST_UNKNOWN,
	VDS_FST_RAW,
	VDS_FST_FAT,
	VDS_FST_FAT32,
	VDS_FST_NTFS,
	VDS_FST_CDFS,
	VDS_FST_UDF,
	VDS_FST_EXFAT,
	VDS_FST_CSVFS,
	VDS_FST_REFS
	}

.enum VDS_HBAPORT_TYPE {
	VDS_HPT_UNKNOWN = 1,
	VDS_HPT_OTHER	= 2,
	VDS_HPT_NOTPRESENT	= 3,
	VDS_HPT_NPORT	= 5,
	VDS_HPT_NLPORT	= 6,
	VDS_HPT_FLPORT	= 7,
	VDS_HPT_FPORT	= 8,
	VDS_HPT_EPORT	= 9,
	VDS_HPT_GPORT	= 10,
	VDS_HPT_LPORT	= 20,
	VDS_HPT_PTP	= 21
	}

.enum VDS_HBAPORT_STATUS {
	VDS_HPS_UNKNOWN = 1,
	VDS_HPS_ONLINE	= 2,
	VDS_HPS_OFFLINE = 3,
	VDS_HPS_BYPASSED	= 4,
	VDS_HPS_DIAGNOSTICS	= 5,
	VDS_HPS_LINKDOWN	= 6,
	VDS_HPS_ERROR	= 7,
	VDS_HPS_LOOPBACK	= 8
	}

.enum VDS_HBAPORT_SPEED_FLAG {
	VDS_HSF_UNKNOWN = 0,
	VDS_HSF_1GBIT	= 0x1,
	VDS_HSF_2GBIT	= 0x2,
	VDS_HSF_10GBIT	= 0x4,
	VDS_HSF_4GBIT	= 0x8,
	VDS_HSF_NOT_NEGOTIATED	= ( 1 shl 15 )
	}

.enum VDS_PATH_STATUS {
	VDS_MPS_UNKNOWN = 0,
	VDS_MPS_ONLINE	= 1,
	VDS_MPS_FAILED	= 5,
	VDS_MPS_STANDBY = 7
	}

.enum VDS_LOADBALANCE_POLICY_ENUM {
	VDS_LBP_UNKNOWN = 0,
	VDS_LBP_FAILOVER	= 1,
	VDS_LBP_ROUND_ROBIN	= 2,
	VDS_LBP_ROUND_ROBIN_WITH_SUBSET = 3,
	VDS_LBP_DYN_LEAST_QUEUE_DEPTH	= 4,
	VDS_LBP_WEIGHTED_PATHS	= 5,
	VDS_LBP_LEAST_BLOCKS	= 6,
	VDS_LBP_VENDOR_SPECIFIC = 7
	}

.enum VDS_PROVIDER_LBSUPPORT_FLAG {
	VDS_LBF_FAILOVER	= 0x1,
	VDS_LBF_ROUND_ROBIN	= 0x2,
	VDS_LBF_ROUND_ROBIN_WITH_SUBSET = 0x4,
	VDS_LBF_DYN_LEAST_QUEUE_DEPTH	= 0x8,
	VDS_LBF_WEIGHTED_PATHS	= 0x10,
	VDS_LBF_LEAST_BLOCKS	= 0x20,
	VDS_LBF_VENDOR_SPECIFIC = 0x40
	}

.enum VDS_VERSION_SUPPORT_FLAG {
	VDS_VSF_1_0	= 0x1,
	VDS_VSF_1_1	= 0x2,
	VDS_VSF_2_0	= 0x4,
	VDS_VSF_2_1	= 0x8,
	VDS_VSF_3_0	= 0x10
	}

.enum VDS_HWPROVIDER_TYPE {
	VDS_HWT_UNKNOWN = 0,
	VDS_HWT_PCI_RAID	= 1,
	VDS_HWT_FIBRE_CHANNEL	= 2,
	VDS_HWT_ISCSI	= 3,
	VDS_HWT_SAS	= 4,
	VDS_HWT_HYBRID	= 5
	}

.enum VDS_ISCSI_LOGIN_TYPE {
	VDS_ILT_MANUAL	= 0,
	VDS_ILT_PERSISTENT	= 1,
	VDS_ILT_BOOT	= 2
	}

.enum VDS_ISCSI_AUTH_TYPE {
	VDS_IAT_NONE	= 0,
	VDS_IAT_CHAP	= 1,
	VDS_IAT_MUTUAL_CHAP	= 2
	}

.enum VDS_ISCSI_IPSEC_FLAG {
	VDS_IIF_VALID	= 0x1,
	VDS_IIF_IKE	= 0x2,
	VDS_IIF_MAIN_MODE	= 0x4,
	VDS_IIF_AGGRESSIVE_MODE = 0x8,
	VDS_IIF_PFS_ENABLE	= 0x10,
	VDS_IIF_TRANSPORT_MODE_PREFERRED	= 0x20,
	VDS_IIF_TUNNEL_MODE_PREFERRED	= 0x40
	}

.enum VDS_ISCSI_LOGIN_FLAG {
	VDS_ILF_REQUIRE_IPSEC	= 0x1,
	VDS_ILF_MULTIPATH_ENABLED	= 0x2
	}

VDS_PATH_ID		struct
ullSourceId		ULONGLONG ?
ullPathId		ULONGLONG ?
VDS_PATH_ID		ends

VDS_WWN			struct
rguchWwn		UCHAR 8 dup(?)
VDS_WWN			ends

VDS_IPADDRESS		struct
type			VDS_IPADDRESS_TYPE ?
ipv4Address		ULONG ?
ipv6Address		UCHAR 16 dup(?)
ulIpv6FlowInfo		ULONG ?
ulIpv6ScopeId		ULONG ?
wszTextAddress		WCHAR 257 dup(?)
ulPort			ULONG ?
VDS_IPADDRESS		ends
PVDS_IPADDRESS		typedef ptr VDS_IPADDRESS

VDS_ISCSI_IPSEC_KEY	struct
pKey			ptr UCHAR ?
ulKeySize		ULONG ?
VDS_ISCSI_IPSEC_KEY	ends

VDS_ISCSI_SHARED_SECRET struct
pSharedSecret		ptr UCHAR ?
ulSharedSecretSize	ULONG ?
VDS_ISCSI_SHARED_SECRET ends

VDS_HBAPORT_PROP	struct
id			VDS_OBJECT_ID <>
wwnNode			VDS_WWN <>
wwnPort			VDS_WWN <>
type			VDS_HBAPORT_TYPE ?
status			VDS_HBAPORT_STATUS ?
ulPortSpeed		ULONG ?
ulSupportedPortSpeed	ULONG ?
VDS_HBAPORT_PROP	ends
PVDS_HBAPORT_PROP	typedef ptr VDS_HBAPORT_PROP

VDS_ISCSI_INITIATOR_ADAPTER_PROP struct
id			VDS_OBJECT_ID <>
pwszName		LPWSTR ?
VDS_ISCSI_INITIATOR_ADAPTER_PROP ends

VDS_ISCSI_INITIATOR_PORTAL_PROP struct
id			VDS_OBJECT_ID <>
address			VDS_IPADDRESS <>
ulPortIndex		ULONG ?
VDS_ISCSI_INITIATOR_PORTAL_PROP ends

VDS_PROVIDER_PROP	struct
id			VDS_OBJECT_ID <>
pwszName		LPWSTR ?
guidVersionId		GUID <>
pwszVersion		LPWSTR ?
type			VDS_PROVIDER_TYPE ?
ulFlags			ULONG ?
ulStripeSizeFlags	ULONG ?
sRebuildPriority	sword ?
VDS_PROVIDER_PROP	ends

VDS_PATH_INFO		STRUC
pathId			VDS_PATH_ID <>
type			VDS_HWPROVIDER_TYPE ?
status			VDS_PATH_STATUS ?
union
 controllerPortId	VDS_OBJECT_ID <>
 targetPortalId		VDS_OBJECT_ID <>
ends
union
 hbaPortId		VDS_OBJECT_ID <>
 initiatorAdapterId	VDS_OBJECT_ID <>
ends
union
 pHbaPortProp		PVDS_HBAPORT_PROP ?
 pInitiatorPortalIpAddr PVDS_IPADDRESS ?
ends
VDS_PATH_INFO		ENDS

VDS_PATH_POLICY		struct
pathId			VDS_PATH_ID <>
bPrimaryPath		BOOL ?
ulWeight		ULONG ?
VDS_PATH_POLICY		ends

ifndef __IEnumVdsObject_INTERFACE_DEFINED__
define __IEnumVdsObject_INTERFACE_DEFINED__
DEFINE_IIDX(IEnumVdsObject, "118610b7-8d94-4030-b5b8-500889788e4e")

.comdef IEnumVdsObject : public IUnknown
    Next		proc :ULONG, :ptr ptr, :ptr
    Skip		proc :ULONG
    Reset		proc
    Clone		proc :ptr ptr
   .ends

endif

ifndef __IVdsAsync_INTERFACE_DEFINED__
define __IVdsAsync_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsAsync, "d5d23b6d-5a55-4492-9889-397a3c2d2dbc")

.comdef IVdsAsync : public IUnknown
    Cancel		proc
    _Wait		proc :ptr, :ptr
    QueryStatus		proc :ptr, :ptr
   .ends

endif

ifndef __IVdsAdviseSink_INTERFACE_DEFINED__
define __IVdsAdviseSink_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsAdviseSink, "8326cd1d-cf59-4936-b786-5efc08798e25")

.comdef IVdsAdviseSink : public IUnknown
    OnNotify		proc :LONG, :ptr
   .ends

endif

ifndef __IVdsProvider_INTERFACE_DEFINED__
define __IVdsProvider_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsProvider, "10c5e575-7984-4e81-a56b-431f5f92ae42")

.comdef IVdsProvider : public IUnknown
    GetProperties	proc :ptr
   .ends

endif

ifndef __IVdsProviderSupport_INTERFACE_DEFINED__
define __IVdsProviderSupport_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsProviderSupport, "1732be13-e8f9-4a03-bfbc-5f616aa66ce1")

.comdef IVdsProviderSupport : public IUnknown
    GetVersionSupport	proc :ptr
   .ends

endif

endif

if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

.enum VDS_PACK_STATUS {
	VDS_PS_UNKNOWN	= 0,
	VDS_PS_ONLINE	= 1,
	VDS_PS_OFFLINE	= 4
	}

.enum VDS_PACK_FLAG {
	VDS_PKF_FOREIGN = 0x1,
	VDS_PKF_NOQUORUM	= 0x2,
	VDS_PKF_POLICY	= 0x4,
	VDS_PKF_CORRUPTED	= 0x8,
	VDS_PKF_ONLINE_ERROR	= 0x10
	}

.enum VDS_DISK_STATUS {
	VDS_DS_UNKNOWN	= 0,
	VDS_DS_ONLINE	= 1,
	VDS_DS_NOT_READY	= 2,
	VDS_DS_NO_MEDIA = 3,
	VDS_DS_FAILED	= 5,
	VDS_DS_MISSING	= 6,
	VDS_DS_OFFLINE	= 4
	}

.enum VDS_PARTITION_STYLE {
	VDS_PST_UNKNOWN = 0,
	VDS_PST_MBR	= 1,
	VDS_PST_GPT	= 2
	}

.enum VDS_DISK_FLAG {
	VDS_DF_AUDIO_CD = 0x1,
	VDS_DF_HOTSPARE = 0x2,
	VDS_DF_RESERVE_CAPABLE	= 0x4,
	VDS_DF_MASKED	= 0x8,
	VDS_DF_STYLE_CONVERTIBLE	= 0x10,
	VDS_DF_CLUSTERED	= 0x20,
	VDS_DF_READ_ONLY	= 0x40,
	VDS_DF_SYSTEM_DISK	= 0x80,
	VDS_DF_BOOT_DISK	= 0x100,
	VDS_DF_PAGEFILE_DISK	= 0x200,
	VDS_DF_HIBERNATIONFILE_DISK	= 0x400,
	VDS_DF_CRASHDUMP_DISK	= 0x800,
	VDS_DF_HAS_ARC_PATH	= 0x1000,
	VDS_DF_DYNAMIC	= 0x2000,
	VDS_DF_BOOT_FROM_DISK	= 0x4000,
	VDS_DF_CURRENT_READ_ONLY	= 0x8000,
	VDS_DF_REFS_NOT_SUPPORTED	= 0x10000
	}

.enum VDS_PARTITION_FLAG {
	VDS_PTF_SYSTEM	= 0x1
	}

.enum VDS_LUN_RESERVE_MODE {
	VDS_LRM_NONE	= 0,
	VDS_LRM_EXCLUSIVE_RW	= 1,
	VDS_LRM_EXCLUSIVE_RO	= 2,
	VDS_LRM_SHARED_RO	= 3,
	VDS_LRM_SHARED_RW	= 4
	}

.enum VDS_VOLUME_STATUS {
	VDS_VS_UNKNOWN	= 0,
	VDS_VS_ONLINE	= 1,
	VDS_VS_NO_MEDIA = 3,
	VDS_VS_FAILED	= 5,
	VDS_VS_OFFLINE	= 4
	}

.enum VDS_VOLUME_TYPE {
	VDS_VT_UNKNOWN	= 0,
	VDS_VT_SIMPLE	= 10,
	VDS_VT_SPAN	= 11,
	VDS_VT_STRIPE	= 12,
	VDS_VT_MIRROR	= 13,
	VDS_VT_PARITY	= 14
	}

.enum VDS_VOLUME_FLAG {
	VDS_VF_SYSTEM_VOLUME	= 0x1,
	VDS_VF_BOOT_VOLUME	= 0x2,
	VDS_VF_ACTIVE	= 0x4,
	VDS_VF_READONLY = 0x8,
	VDS_VF_HIDDEN	= 0x10,
	VDS_VF_CAN_EXTEND	= 0x20,
	VDS_VF_CAN_SHRINK	= 0x40,
	VDS_VF_PAGEFILE = 0x80,
	VDS_VF_HIBERNATION	= 0x100,
	VDS_VF_CRASHDUMP	= 0x200,
	VDS_VF_INSTALLABLE	= 0x400,
	VDS_VF_LBN_REMAP_ENABLED	= 0x800,
	VDS_VF_FORMATTING	= 0x1000,
	VDS_VF_NOT_FORMATTABLE	= 0x2000,
	VDS_VF_NTFS_NOT_SUPPORTED	= 0x4000,
	VDS_VF_FAT32_NOT_SUPPORTED	= 0x8000,
	VDS_VF_FAT_NOT_SUPPORTED	= 0x10000,
	VDS_VF_NO_DEFAULT_DRIVE_LETTER	= 0x20000,
	VDS_VF_PERMANENTLY_DISMOUNTED	= 0x40000,
	VDS_VF_PERMANENT_DISMOUNT_SUPPORTED	= 0x80000,
	VDS_VF_SHADOW_COPY	= 0x100000,
	VDS_VF_FVE_ENABLED	= 0x200000,
	VDS_VF_DIRTY	= 0x400000,
	VDS_VF_REFS_NOT_SUPPORTED	= 0x800000,
	VDS_VF_BACKS_BOOT_VOLUME	= 0x1000000,
	VDS_VF_BACKED_BY_WIM_IMAGE	= 0x2000000
	}

.enum VDS_VOLUME_PLEX_TYPE {
	VDS_VPT_UNKNOWN = 0,
	VDS_VPT_SIMPLE	= VDS_VT_SIMPLE,
	VDS_VPT_SPAN	= VDS_VT_SPAN,
	VDS_VPT_STRIPE	= VDS_VT_STRIPE,
	VDS_VPT_PARITY	= VDS_VT_PARITY
	}

.enum VDS_VOLUME_PLEX_STATUS {
	VDS_VPS_UNKNOWN = 0,
	VDS_VPS_ONLINE	= 1,
	VDS_VPS_NO_MEDIA	= 3,
	VDS_VPS_FAILED	= 5
	}

.enum VDS_DISK_EXTENT_TYPE {
	VDS_DET_UNKNOWN = 0,
	VDS_DET_FREE	= 1,
	VDS_DET_DATA	= 2,
	VDS_DET_OEM	= 3,
	VDS_DET_ESP	= 4,
	VDS_DET_MSR	= 5,
	VDS_DET_LDM	= 6,
	VDS_DET_CLUSTER = 7,
	VDS_DET_UNUSABLE	= 0x7fff
	}

VDS_PACK_PROP		struct
id			VDS_OBJECT_ID <>
pwszName		LPWSTR ?
status			VDS_PACK_STATUS ?
ulFlags			ULONG ?
VDS_PACK_PROP		ends
PVDS_PACK_PROP		typedef ptr VDS_PACK_PROP

VDS_DISK_PROP		struct
id			VDS_OBJECT_ID <>
status			VDS_DISK_STATUS ?
ReserveMode		VDS_LUN_RESERVE_MODE ?
health			VDS_HEALTH ?
dwDeviceType		DWORD ?
dwMediaType		DWORD ?
ullSize			ULONGLONG ?
ulBytesPerSector	ULONG ?
ulSectorsPerTrack	ULONG ?
ulTracksPerCylinder	ULONG ?
ulFlags			ULONG ?
BusType			VDS_STORAGE_BUS_TYPE ?
PartitionStyle		VDS_PARTITION_STYLE ?
union
 dwSignature		DWORD ?
 DiskGuid		GUID <>
ends
pwszDiskAddress		LPWSTR ?
pwszName		LPWSTR ?
pwszFriendlyName	LPWSTR ?
pwszAdaptorName		LPWSTR ?
pwszDevicePath		LPWSTR ?
VDS_DISK_PROP		ends
PVDS_DISK_PROP		typedef ptr VDS_DISK_PROP

.enum VDS_DISK_OFFLINE_REASON {
	VDSDiskOfflineReasonNone	= 0,
	VDSDiskOfflineReasonPolicy	= 1,
	VDSDiskOfflineReasonRedundantPath	= 2,
	VDSDiskOfflineReasonSnapshot	= 3,
	VDSDiskOfflineReasonCollision	= 4,
	VDSDiskOfflineReasonResourceExhaustion	= 5,
	VDSDiskOfflineReasonWriteFailure	= 6,
	VDSDiskOfflineReasonDIScan	= 7,
	VDSDiskOfflineReasonLostDataPersistence = 8
	}

VDS_DISK_PROP2		struct
id			VDS_OBJECT_ID <>
status			VDS_DISK_STATUS ?
OfflineReason		VDS_DISK_OFFLINE_REASON ?
ReserveMode		VDS_LUN_RESERVE_MODE ?
health			VDS_HEALTH ?
dwDeviceType		DWORD ?
dwMediaType		DWORD ?
ullSize			ULONGLONG ?
ulBytesPerSector	ULONG ?
ulSectorsPerTrack	ULONG ?
ulTracksPerCylinder	ULONG ?
ulFlags			ULONG ?
BusType			VDS_STORAGE_BUS_TYPE ?
PartitionStyle		VDS_PARTITION_STYLE ?
union
 dwSignature		DWORD ?
 DiskGuid		GUID <>
ends
pwszDiskAddress		LPWSTR ?
pwszName		LPWSTR ?
pwszFriendlyName	LPWSTR ?
pwszAdaptorName		LPWSTR ?
pwszDevicePath		LPWSTR ?
pwszLocationPath	LPWSTR ?
VDS_DISK_PROP2		ends
PVDS_DISK_PROP2		typedef ptr VDS_DISK_PROP2

VDS_ADVANCEDDISK_PROP	struct
pwszId			LPWSTR ?
pwszPathname		LPWSTR ?
pwszLocation		LPWSTR ?
pwszFriendlyName	LPWSTR ?
pswzIdentifier		LPWSTR ?
usIdentifierFormat	USHORT ?
ulNumber		ULONG ?
pwszSerialNumber	LPWSTR ?
pwszFirmwareVersion	LPWSTR ?
pwszManufacturer	LPWSTR ?
pwszModel		LPWSTR ?
ullTotalSize		ULONGLONG ?
ullAllocatedSize	ULONGLONG ?
ulLogicalSectorSize	ULONG ?
ulPhysicalSectorSize	ULONG ?
ulPartitionCount	ULONG ?
status			VDS_DISK_STATUS ?
health			VDS_HEALTH ?
BusType			VDS_STORAGE_BUS_TYPE ?
PartitionStyle		VDS_PARTITION_STYLE ?
union
 dwSignature		DWORD ?
 DiskGuid		GUID <>
ends
ulFlags			ULONG ?
dwDeviceType		DWORD ?
VDS_ADVANCEDDISK_PROP	ends
PVDS_ADVANCEDDISK_PROP	typedef ptr VDS_ADVANCEDDISK_PROP

VDS_VOLUME_PROP		struct
id			VDS_OBJECT_ID <>
type			VDS_VOLUME_TYPE ?
status			VDS_VOLUME_STATUS ?
health			VDS_HEALTH ?
TransitionState		VDS_TRANSITION_STATE ?
ullSize			ULONGLONG ?
ulFlags			ULONG ?
RecommendedFileSystemType VDS_FILE_SYSTEM_TYPE ?
pwszName		LPWSTR ?
VDS_VOLUME_PROP		ends
PVDS_VOLUME_PROP	typedef ptr VDS_VOLUME_PROP

VDS_VOLUME_PROP2	struct
id			VDS_OBJECT_ID <>
type			VDS_VOLUME_TYPE ?
status			VDS_VOLUME_STATUS ?
health			VDS_HEALTH ?
TransitionState		VDS_TRANSITION_STATE ?
ullSize			ULONGLONG ?
ulFlags			ULONG ?
RecommendedFileSystemType VDS_FILE_SYSTEM_TYPE ?
cbUniqueId		ULONG ?
pwszName		LPWSTR ?
pUniqueId		ptr BYTE ?
VDS_VOLUME_PROP2	ends
PVDS_VOLUME_PROP2	typedef ptr VDS_VOLUME_PROP2

VDS_VOLUME_PLEX_PROP	struct
id			VDS_OBJECT_ID <>
type			VDS_VOLUME_PLEX_TYPE ?
status			VDS_VOLUME_PLEX_STATUS ?
health			VDS_HEALTH ?
TransitionState		VDS_TRANSITION_STATE ?
ullSize			ULONGLONG ?
ulStripeSize		ULONG ?
ulNumberOfMembers	ULONG ?
VDS_VOLUME_PLEX_PROP	ends
PVDS_VOLUME_PLEX_PROP	typedef ptr VDS_VOLUME_PLEX_PROP

VDS_DISK_EXTENT		struct
diskId			VDS_OBJECT_ID <>
type			VDS_DISK_EXTENT_TYPE ?
ullOffset		ULONGLONG ?
ullSize			ULONGLONG ?
volumeId		VDS_OBJECT_ID <>
plexId			VDS_OBJECT_ID <>
memberIdx		ULONG ?
VDS_DISK_EXTENT		ends
PVDS_DISK_EXTENT	typedef ptr VDS_DISK_EXTENT

VDS_DISK_FREE_EXTENT	struct
diskId			VDS_OBJECT_ID <>
ullOffset		ULONGLONG ?
ullSize			ULONGLONG ?
VDS_DISK_FREE_EXTENT	ends
PVDS_DISK_FREE_EXTENT	typedef ptr VDS_DISK_FREE_EXTENT

VDS_INPUT_DISK		struct
diskId			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
plexId			VDS_OBJECT_ID <>
memberIdx		ULONG ?
VDS_INPUT_DISK		ends

define GPT_PARTITION_NAME_LENGTH    36

VDS_PARTITION_INFO_GPT	struct
partitionType		GUID <>
partitionId		GUID <>
attributes		ULONGLONG ?
name			WCHAR 36 dup(?)
VDS_PARTITION_INFO_GPT	ends

VDS_PARTITION_INFO_MBR	struct
partitionType		BYTE ?
bootIndicator		BOOLEAN ?
recognizedPartition	BOOLEAN ?
hiddenSectors		DWORD ?
VDS_PARTITION_INFO_MBR	ends

VDS_PARTITION_PROP	struct
PartitionStyle		VDS_PARTITION_STYLE ?
ulFlags			ULONG ?
ulPartitionNumber	ULONG ?
ullOffset		ULONGLONG ?
ullSize			ULONGLONG ?
union
 Mbr			VDS_PARTITION_INFO_MBR <>
 Gpt			VDS_PARTITION_INFO_GPT <>
ends
VDS_PARTITION_PROP	ends

.enum __VDS_PARTITION_STYLE {
	VDS_PARTITION_STYLE_MBR,
	VDS_PARTITION_STYLE_GPT,
	VDS_PARTITION_STYLE_RAW
	}

VDS_PARTITION_INFORMATION_EX struct
dwPartitionStyle	__VDS_PARTITION_STYLE ?
ullStartingOffset	ULONGLONG ?
ullPartitionLength	ULONGLONG ?
dwPartitionNumber	DWORD ?
bRewritePartition	BOOLEAN ?
union
 Mbr			VDS_PARTITION_INFO_MBR <>
 Gpt			VDS_PARTITION_INFO_GPT <>
ends
VDS_PARTITION_INFORMATION_EX ends

CREATE_PARTITION_PARAMETERS struct
style			VDS_PARTITION_STYLE ?
union
 struc MbrPartInfo
  partitionType		db ?
  bootIndicator		BOOLEAN ?
 ends
 struc GptPartInfo
  partitionType		GUID <>
  partitionId		GUID <>
  attributes		ULONGLONG ?
  name			WCHAR 36 dup(?)
 ends
ends
CREATE_PARTITION_PARAMETERS ends

CHANGE_ATTRIBUTES_PARAMETERS struct
style			VDS_PARTITION_STYLE ?
union
 struc MbrPartInfo
  bootIndicator		BOOLEAN ?
 ends
 struc GptPartInfo
  attributes		ULONGLONG ?
 ends
ends
CHANGE_ATTRIBUTES_PARAMETERS ends

CHANGE_PARTITION_TYPE_PARAMETERS struct
style			VDS_PARTITION_STYLE ?
union
 struc MbrPartInfo
  partitionType		db ?
 ends
 struc GptPartInfo
  partitionType		GUID <>
 ends
ends
CHANGE_PARTITION_TYPE_PARAMETERS ends

ifndef __IVdsSwProvider_INTERFACE_DEFINED__
define __IVdsSwProvider_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSwProvider, "9aa58360-ce33-4f92-b658-ed24b14425b8")

.comdef IVdsSwProvider : public IUnknown
    QueryPacks		proc :ptr ptr
    CreatePack		proc :ptr ptr
   .ends

endif

ifndef __IVdsPack_INTERFACE_DEFINED__
define __IVdsPack_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsPack, "3b69d7f5-9d94-4648-91ca-79939ba263bf")

.comdef IVdsPack : public IUnknown
    GetProperties	proc :ptr
    GetProvider		proc :ptr ptr
    QueryVolumes	proc :ptr ptr
    QueryDisks		proc :ptr ptr
    CreateVolume	proc :VDS_VOLUME_TYPE, :ptr, :LONG, :ULONG, :ptr ptr
    AddDisk		proc :VDS_OBJECT_ID, :VDS_PARTITION_STYLE, :BOOL
    MigrateDisks	proc :ptr, :LONG, :VDS_OBJECT_ID, :BOOL, :BOOL, :ptr, :ptr
    ReplaceDisk		proc :VDS_OBJECT_ID, :VDS_OBJECT_ID, :ptr ptr
    RemoveMissingDisk	proc :VDS_OBJECT_ID
    Recover		proc :ptr ptr
   .ends

endif

ifndef __IVdsPack2_INTERFACE_DEFINED__
define __IVdsPack2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsPack2, "13B50BFF-290A-47DD-8558-B7C58DB1A71A")

.comdef IVdsPack2 : public IUnknown
    CreateVolume2	proc :VDS_VOLUME_TYPE, :ptr, :LONG, :ULONG, :ULONG, :ptr ptr
   .ends

endif

ifndef __IVdsDisk_INTERFACE_DEFINED__
define __IVdsDisk_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDisk, "07e5c822-f00c-47a1-8fce-b244da56fd06")

.comdef IVdsDisk : public IUnknown
    GetProperties	proc :ptr
    GetPack		proc :ptr ptr
    GetIdentificationData proc :ptr
    QueryExtents	proc :ptr ptr, :ptr
    ConvertStyle	proc :VDS_PARTITION_STYLE
    SetFlags		proc :ULONG
    ClearFlags		proc :ULONG
   .ends

endif

ifndef __IVdsDisk2_INTERFACE_DEFINED__
define __IVdsDisk2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDisk2, "40F73C8B-687D-4a13-8D96-3D7F2E683936")

.comdef IVdsDisk2 : public IUnknown
    SetSANMode		proc :BOOL
   .ends

endif

ifndef __IVdsDiskOnline_INTERFACE_DEFINED__
define __IVdsDiskOnline_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDiskOnline, "90681B1D-6A7F-48e8-9061-31B7AA125322")

.comdef IVdsDiskOnline : public IUnknown
    Online		proc
    Offline		proc
   .ends

endif

ifndef __IVdsAdvancedDisk_INTERFACE_DEFINED__
define __IVdsAdvancedDisk_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsAdvancedDisk, "6e6f6b40-977c-4069-bddd-ac710059f8c0")

.comdef IVdsAdvancedDisk : public IUnknown
    GetPartitionProperties proc :ULONGLONG, :ptr
    QueryPartitions	proc :ptr ptr, :ptr
    CreatePartition	proc :ULONGLONG, :ULONGLONG, :ptr, :ptr ptr
    DeletePartition	proc :ULONGLONG, :BOOL, :BOOL
    ChangeAttributes	proc :ULONGLONG, :ptr
    AssignDriveLetter	proc :ULONGLONG, :WCHAR
    DeleteDriveLetter	proc :ULONGLONG, :WCHAR
    GetDriveLetter	proc :ULONGLONG, :ptr
    FormatPartition	proc :ULONGLONG, :VDS_FILE_SYSTEM_TYPE, :LPWSTR, :DWORD, :BOOL, :BOOL, :BOOL, :ptr ptr
    Clean		proc :BOOL, :BOOL, :BOOL, :ptr ptr
   .ends

endif

ifndef __IVdsAdvancedDisk2_INTERFACE_DEFINED__
define __IVdsAdvancedDisk2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsAdvancedDisk2, "9723f420-9355-42de-ab66-e31bb15beeac")

.comdef IVdsAdvancedDisk2 : public IUnknown
    ChangePartitionType proc :ULONGLONG, :BOOL, :ptr
   .ends

endif

ifndef __IVdsAdvancedDisk3_INTERFACE_DEFINED__
define __IVdsAdvancedDisk3_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsAdvancedDisk3, "3858C0D5-0F35-4BF5-9714-69874963BC36")

.comdef IVdsAdvancedDisk3 : public IUnknown
    GetProperties	proc :ptr
    GetUniqueId		proc :ptr
   .ends

endif

ifndef __IVdsCreatePartitionEx_INTERFACE_DEFINED__
define __IVdsCreatePartitionEx_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsCreatePartitionEx, "9882f547-cfc3-420b-9750-00dfbec50662")

.comdef IVdsCreatePartitionEx : public IUnknown
    CreatePartitionEx	proc :ULONGLONG, :ULONGLONG, :ULONG, :ptr, :ptr ptr
   .ends

endif

ifndef __IVdsRemovable_INTERFACE_DEFINED__
define __IVdsRemovable_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsRemovable, "0316560b-5db4-4ed9-bbb5-213436ddc0d9")

.comdef IVdsRemovable : public IUnknown
    QueryMedia		proc
    Eject		proc
   .ends

endif

ifndef __IVdsVolume_INTERFACE_DEFINED__
define __IVdsVolume_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolume, "88306bb2-e71f-478c-86a2-79da200a0f11")

.comdef IVdsVolume : public IUnknown
    GetProperties	proc :ptr
    GetPack		proc :ptr ptr
    QueryPlexes		proc :ptr ptr
    Extend		proc :ptr, :LONG, :ptr ptr
    Shrink		proc :ULONGLONG, :ptr ptr
    AddPlex		proc :VDS_OBJECT_ID, :ptr ptr
    BreakPlex		proc :VDS_OBJECT_ID, :ptr ptr
    RemovePlex		proc :VDS_OBJECT_ID, :ptr ptr
    Delete		proc :BOOL
    SetFlags		proc :ULONG, :BOOL
    ClearFlags		proc :ULONG
   .ends

endif

ifndef __IVdsVolume2_INTERFACE_DEFINED__
define __IVdsVolume2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolume2, "72AE6713-DCBB-4a03-B36B-371F6AC6B53D")

.comdef IVdsVolume2 : public IUnknown
    GetProperties2	proc :ptr
   .ends

endif

ifndef __IVdsVolumeOnline_INTERFACE_DEFINED__
define __IVdsVolumeOnline_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolumeOnline, "1BE2275A-B315-4f70-9E44-879B3A2A53F2")

.comdef IVdsVolumeOnline : public IUnknown
    Online		proc
   .ends

endif

ifndef __IVdsVolumePlex_INTERFACE_DEFINED__
define __IVdsVolumePlex_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolumePlex, "4daa0135-e1d1-40f1-aaa5-3cc1e53221c3")

.comdef IVdsVolumePlex : public IUnknown
    GetProperties	proc :ptr
    GetVolume		proc :ptr ptr
    QueryExtents	proc :ptr ptr, :ptr
    Repair		proc :ptr, :LONG, :ptr ptr
   .ends

endif

ifndef __IVdsDisk3_INTERFACE_DEFINED__
define __IVdsDisk3_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDisk3, "8F4B2F5D-EC15-4357-992F-473EF10975B9")

.comdef IVdsDisk3 : public IUnknown
    GetProperties2	proc :ptr
    QueryFreeExtents	proc :ULONG, :ptr ptr, :ptr
   .ends

endif

endif

if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

.enum VDS_SUB_SYSTEM_STATUS {
	VDS_SSS_UNKNOWN = 0,
	VDS_SSS_ONLINE	= 1,
	VDS_SSS_NOT_READY	= 2,
	VDS_SSS_OFFLINE = 4,
	VDS_SSS_FAILED	= 5,
	VDS_SSS_PARTIALLY_MANAGED	= 9
	}

PVDS_SUB_SYSTEM_STATUS typedef ptr VDS_SUB_SYSTEM_STATUS

.enum VDS_SUB_SYSTEM_FLAG {
	VDS_SF_LUN_MASKING_CAPABLE	= 0x1,
	VDS_SF_LUN_PLEXING_CAPABLE	= 0x2,
	VDS_SF_LUN_REMAPPING_CAPABLE	= 0x4,
	VDS_SF_DRIVE_EXTENT_CAPABLE	= 0x8,
	VDS_SF_HARDWARE_CHECKSUM_CAPABLE	= 0x10,
	VDS_SF_RADIUS_CAPABLE	= 0x20,
	VDS_SF_READ_BACK_VERIFY_CAPABLE = 0x40,
	VDS_SF_WRITE_THROUGH_CACHING_CAPABLE	= 0x80,
	VDS_SF_SUPPORTS_FAULT_TOLERANT_LUNS	= 0x200,
	VDS_SF_SUPPORTS_NON_FAULT_TOLERANT_LUNS = 0x400,
	VDS_SF_SUPPORTS_SIMPLE_LUNS	= 0x800,
	VDS_SF_SUPPORTS_SPAN_LUNS	= 0x1000,
	VDS_SF_SUPPORTS_STRIPE_LUNS	= 0x2000,
	VDS_SF_SUPPORTS_MIRROR_LUNS	= 0x4000,
	VDS_SF_SUPPORTS_PARITY_LUNS	= 0x8000,
	VDS_SF_SUPPORTS_AUTH_CHAP	= 0x10000,
	VDS_SF_SUPPORTS_AUTH_MUTUAL_CHAP	= 0x20000,
	VDS_SF_SUPPORTS_SIMPLE_TARGET_CONFIG	= 0x40000,
	VDS_SF_SUPPORTS_LUN_NUMBER	= 0x80000,
	VDS_SF_SUPPORTS_MIRRORED_CACHE	= 0x100000,
	VDS_SF_READ_CACHING_CAPABLE	= 0x200000,
	VDS_SF_WRITE_CACHING_CAPABLE	= 0x400000,
	VDS_SF_MEDIA_SCAN_CAPABLE	= 0x800000,
	VDS_SF_CONSISTENCY_CHECK_CAPABLE	= 0x1000000
	}

PVDS_SUB_SYSTEM_FLAG typedef ptr VDS_SUB_SYSTEM_FLAG

.enum VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG {
	VDS_SF_SUPPORTS_RAID2_LUNS	= 0x1,
	VDS_SF_SUPPORTS_RAID3_LUNS	= 0x2,
	VDS_SF_SUPPORTS_RAID4_LUNS	= 0x4,
	VDS_SF_SUPPORTS_RAID5_LUNS	= 0x8,
	VDS_SF_SUPPORTS_RAID6_LUNS	= 0x10,
	VDS_SF_SUPPORTS_RAID01_LUNS	= 0x20,
	VDS_SF_SUPPORTS_RAID03_LUNS	= 0x40,
	VDS_SF_SUPPORTS_RAID05_LUNS	= 0x80,
	VDS_SF_SUPPORTS_RAID10_LUNS	= 0x100,
	VDS_SF_SUPPORTS_RAID15_LUNS	= 0x200,
	VDS_SF_SUPPORTS_RAID30_LUNS	= 0x400,
	VDS_SF_SUPPORTS_RAID50_LUNS	= 0x800,
	VDS_SF_SUPPORTS_RAID51_LUNS	= 0x1000,
	VDS_SF_SUPPORTS_RAID53_LUNS	= 0x2000,
	VDS_SF_SUPPORTS_RAID60_LUNS	= 0x4000,
	VDS_SF_SUPPORTS_RAID61_LUNS	= 0x8000
	}

PVDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG typedef ptr VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG

.enum VDS_INTERCONNECT_FLAG {
	VDS_ITF_PCI_RAID	= 0x1,
	VDS_ITF_FIBRE_CHANNEL	= 0x2,
	VDS_ITF_ISCSI	= 0x4,
	VDS_ITF_SAS	= 0x8
	}

PVDS_INTERCONNECT_FLAG typedef ptr VDS_INTERCONNECT_FLAG

.enum VDS_CONTROLLER_STATUS {
	VDS_CS_UNKNOWN	= 0,
	VDS_CS_ONLINE	= 1,
	VDS_CS_NOT_READY	= 2,
	VDS_CS_OFFLINE	= 4,
	VDS_CS_FAILED	= 5,
	VDS_CS_REMOVED	= 8
	}

PVDS_CONTROLLER_STATUS typedef ptr VDS_CONTROLLER_STATUS

.enum VDS_PORT_STATUS {
	VDS_PRS_UNKNOWN = 0,
	VDS_PRS_ONLINE	= 1,
	VDS_PRS_NOT_READY	= 2,
	VDS_PRS_OFFLINE = 4,
	VDS_PRS_FAILED	= 5,
	VDS_PRS_REMOVED = 8
	}

PVDS_PORT_STATUS typedef ptr  VDS_PORT_STATUS

.enum VDS_DRIVE_STATUS {
	VDS_DRS_UNKNOWN = 0,
	VDS_DRS_ONLINE	= 1,
	VDS_DRS_NOT_READY	= 2,
	VDS_DRS_OFFLINE = 4,
	VDS_DRS_FAILED	= 5,
	VDS_DRS_REMOVED = 8
	}

PVDS_DRIVE_STATUS typedef ptr VDS_DRIVE_STATUS

.enum VDS_DRIVE_FLAG {
	VDS_DRF_HOTSPARE	= 0x1,
	VDS_DRF_ASSIGNED	= 0x2,
	VDS_DRF_UNASSIGNED	= 0x4,
	VDS_DRF_HOTSPARE_IN_USE = 0x8,
	VDS_DRF_HOTSPARE_STANDBY	= 0x10
	}

PVDS_DRIVE_FLAG typedef ptr VDS_DRIVE_FLAG

.enum VDS_LUN_TYPE {
	VDS_LT_UNKNOWN	= 0,
	VDS_LT_DEFAULT	= 1,
	VDS_LT_FAULT_TOLERANT	= 2,
	VDS_LT_NON_FAULT_TOLERANT	= 3,
	VDS_LT_SIMPLE	= 10,
	VDS_LT_SPAN	= 11,
	VDS_LT_STRIPE	= 12,
	VDS_LT_MIRROR	= 13,
	VDS_LT_PARITY	= 14,
	VDS_LT_RAID2	= 15,
	VDS_LT_RAID3	= 16,
	VDS_LT_RAID4	= 17,
	VDS_LT_RAID5	= 18,
	VDS_LT_RAID6	= 19,
	VDS_LT_RAID01	= 20,
	VDS_LT_RAID03	= 21,
	VDS_LT_RAID05	= 22,
	VDS_LT_RAID10	= 23,
	VDS_LT_RAID15	= 24,
	VDS_LT_RAID30	= 25,
	VDS_LT_RAID50	= 26,
	VDS_LT_RAID51	= 27,
	VDS_LT_RAID53	= 28,
	VDS_LT_RAID60	= 29,
	VDS_LT_RAID61	= 30
	}

PVDS_LUN_TYPE typedef ptr VDS_LUN_TYPE

.enum VDS_LUN_STATUS {
	VDS_LS_UNKNOWN		= 0,
	VDS_LS_ONLINE		= 1,
	VDS_LS_NOT_READY	= 2,
	VDS_LS_OFFLINE		= 4,
	VDS_LS_FAILED		= 5
	}

PVDS_LUN_STATUS typedef ptr VDS_LUN_STATUS

.enum VDS_LUN_FLAG {
	VDS_LF_LBN_REMAP_ENABLED		= 0x1,
	VDS_LF_READ_BACK_VERIFY_ENABLED		= 0x2,
	VDS_LF_WRITE_THROUGH_CACHING_ENABLED	= 0x4,
	VDS_LF_HARDWARE_CHECKSUM_ENABLED	= 0x8,
	VDS_LF_READ_CACHE_ENABLED		= 0x10,
	VDS_LF_WRITE_CACHE_ENABLED		= 0x20,
	VDS_LF_MEDIA_SCAN_ENABLED		= 0x40,
	VDS_LF_CONSISTENCY_CHECK_ENABLED	= 0x80,
	VDS_LF_SNAPSHOT				= 0x100
	}

PVDS_LUN_FLAG typedef ptr VDS_LUN_FLAG

.enum VDS_LUN_PLEX_TYPE {
	VDS_LPT_UNKNOWN = 0,
	VDS_LPT_SIMPLE	= VDS_LT_SIMPLE,
	VDS_LPT_SPAN	= VDS_LT_SPAN,
	VDS_LPT_STRIPE	= VDS_LT_STRIPE,
	VDS_LPT_PARITY	= VDS_LT_PARITY,
	VDS_LPT_RAID2	= VDS_LT_RAID2,
	VDS_LPT_RAID3	= VDS_LT_RAID3,
	VDS_LPT_RAID4	= VDS_LT_RAID4,
	VDS_LPT_RAID5	= VDS_LT_RAID5,
	VDS_LPT_RAID6	= VDS_LT_RAID6,
	VDS_LPT_RAID03	= VDS_LT_RAID03,
	VDS_LPT_RAID05	= VDS_LT_RAID05,
	VDS_LPT_RAID10	= VDS_LT_RAID10,
	VDS_LPT_RAID15	= VDS_LT_RAID15,
	VDS_LPT_RAID30	= VDS_LT_RAID30,
	VDS_LPT_RAID50	= VDS_LT_RAID50,
	VDS_LPT_RAID53	= VDS_LT_RAID53,
	VDS_LPT_RAID60	= VDS_LT_RAID60
	}

.enum VDS_LUN_PLEX_STATUS {
	VDS_LPS_UNKNOWN		= 0,
	VDS_LPS_ONLINE		= 1,
	VDS_LPS_NOT_READY	= 2,
	VDS_LPS_OFFLINE		= 4,
	VDS_LPS_FAILED		= 5
	}

.enum VDS_LUN_PLEX_FLAG {
	VDS_LPF_LBN_REMAP_ENABLED = VDS_LF_LBN_REMAP_ENABLED
	}

.enum VDS_ISCSI_PORTAL_STATUS {
	VDS_IPS_UNKNOWN		= 0,
	VDS_IPS_ONLINE		= 1,
	VDS_IPS_NOT_READY	= 2,
	VDS_IPS_OFFLINE		= 4,
	VDS_IPS_FAILED		= 5
	}

.enum VDS_STORAGE_POOL_STATUS {
	VDS_SPS_UNKNOWN		= 0,
	VDS_SPS_ONLINE		= 1,
	VDS_SPS_NOT_READY	= 2,
	VDS_SPS_OFFLINE		= 4
	}

.enum VDS_STORAGE_POOL_TYPE {
	VDS_SPT_UNKNOWN		= 0,
	VDS_SPT_PRIMORDIAL	= 0x1,
	VDS_SPT_CONCRETE	= 0x2
	}

.enum VDS_MAINTENANCE_OPERATION {
	BlinkLight	= 1,
	BeepAlarm	= 2,
	SpinDown	= 3,
	SpinUp		= 4,
	Ping		= 5
	}

VDS_HINTS		struct
ullHintMask		ULONGLONG ?
ullExpectedMaximumSize	ULONGLONG ?
ulOptimalReadSize	ULONG ?
ulOptimalReadAlignment	ULONG ?
ulOptimalWriteSize	ULONG ?
ulOptimalWriteAlignment ULONG ?
ulMaximumDriveCount	ULONG ?
ulStripeSize		ULONG ?
bFastCrashRecoveryRequired BOOL ?
bMostlyReads		BOOL ?
bOptimizeForSequentialReads BOOL ?
bOptimizeForSequentialWrites BOOL ?
bRemapEnabled		BOOL ?
bReadBackVerifyEnabled	BOOL ?
bWriteThroughCachingEnabled BOOL ?
bHardwareChecksumEnabled BOOL ?
bIsYankable		BOOL ?
sRebuildPriority	sword ?
VDS_HINTS		ends
PVDS_HINTS		typedef ptr VDS_HINTS

define VDS_HINT_FASTCRASHRECOVERYREQUIRED	0x1
define VDS_HINT_MOSTLYREADS			0x2
define VDS_HINT_OPTIMIZEFORSEQUENTIALREADS	0x4
define VDS_HINT_OPTIMIZEFORSEQUENTIALWRITES	0x8
define VDS_HINT_READBACKVERIFYENABLED		0x10
define VDS_HINT_REMAPENABLED			0x20
define VDS_HINT_WRITETHROUGHCACHINGENABLED	0x40
define VDS_HINT_HARDWARECHECKSUMENABLED		0x80
define VDS_HINT_ISYANKABLE			0x100

VDS_HINTS2		struct
ullHintMask		ULONGLONG ?
ullExpectedMaximumSize	ULONGLONG ?
ulOptimalReadSize	ULONG ?
ulOptimalReadAlignment	ULONG ?
ulOptimalWriteSize	ULONG ?
ulOptimalWriteAlignment ULONG ?
ulMaximumDriveCount	ULONG ?
ulStripeSize		ULONG ?
ulReserved1		ULONG ?
ulReserved2		ULONG ?
ulReserved3		ULONG ?
bFastCrashRecoveryRequired BOOL ?
bMostlyReads		BOOL ?
bOptimizeForSequentialReads BOOL ?
bOptimizeForSequentialWrites BOOL ?
bRemapEnabled		BOOL ?
bReadBackVerifyEnabled	BOOL ?
bWriteThroughCachingEnabled BOOL ?
bHardwareChecksumEnabled BOOL ?
bIsYankable		BOOL ?
bAllocateHotSpare	BOOL ?
bUseMirroredCache	BOOL ?
bReadCachingEnabled	BOOL ?
bWriteCachingEnabled	BOOL ?
bMediaScanEnabled	BOOL ?
bConsistencyCheckEnabled BOOL ?
BusType			VDS_STORAGE_BUS_TYPE ?
bReserved1		BOOL ?
bReserved2		BOOL ?
bReserved3		BOOL ?
sRebuildPriority	sword ?
VDS_HINTS2		ends
PVDS_HINTS2		typedef ptr VDS_HINTS2

define	VDS_HINT_ALLOCATEHOTSPARE	0x200
define	VDS_HINT_BUSTYPE		0x400
define	VDS_HINT_USEMIRROREDCACHE	0x800
define	VDS_HINT_READCACHINGENABLED	0x1000
define	VDS_HINT_WRITECACHINGENABLED	0x2000
define	VDS_HINT_MEDIASCANENABLED	0x4000
define	VDS_HINT_CONSISTENCYCHECKENABLED 0x8000

VDS_SUB_SYSTEM_PROP	struct
id			VDS_OBJECT_ID <>
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
ulFlags			ULONG ?
ulStripeSizeFlags	ULONG ?
status			VDS_SUB_SYSTEM_STATUS ?
health			VDS_HEALTH ?
sNumberOfInternalBuses	sword ?
sMaxNumberOfSlotsEachBus sword ?
sMaxNumberOfControllers sword ?
sRebuildPriority	sword ?
VDS_SUB_SYSTEM_PROP	ends
PVDS_SUB_SYSTEM_PROP	typedef ptr VDS_SUB_SYSTEM_PROP

VDS_SUB_SYSTEM_PROP2	struct
id			VDS_OBJECT_ID <>
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
ulFlags			ULONG ?
ulStripeSizeFlags	ULONG ?
ulSupportedRaidTypeFlags ULONG ?
status			VDS_SUB_SYSTEM_STATUS ?
health			VDS_HEALTH ?
sNumberOfInternalBuses	sword ?
sMaxNumberOfSlotsEachBus sword ?
sMaxNumberOfControllers sword ?
sRebuildPriority	sword ?
ulNumberOfEnclosures	ULONG ?
VDS_SUB_SYSTEM_PROP2	ends
PVDS_SUB_SYSTEM_PROP2	typedef ptr VDS_SUB_SYSTEM_PROP2

VDS_CONTROLLER_PROP	struct
id			VDS_OBJECT_ID <>
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
status			VDS_CONTROLLER_STATUS ?
health			VDS_HEALTH ?
sNumberOfPorts		sword ?
VDS_CONTROLLER_PROP	ends
PVDS_CONTROLLER_PROP	typedef ptr VDS_CONTROLLER_PROP

VDS_DRIVE_PROP		struct
id			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
ulFlags			ULONG ?
status			VDS_DRIVE_STATUS ?
health			VDS_HEALTH ?
sInternalBusNumber	sword ?
sSlotNumber		sword ?
VDS_DRIVE_PROP		ends
PVDS_DRIVE_PROP		typedef ptr VDS_DRIVE_PROP

VDS_DRIVE_PROP2		struct
id			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
ulFlags			ULONG ?
status			VDS_DRIVE_STATUS ?
health			VDS_HEALTH ?
sInternalBusNumber	sword ?
sSlotNumber		sword ?
ulEnclosureNumber	ULONG ?
busType			VDS_STORAGE_BUS_TYPE ?
ulSpindleSpeed		ULONG ?
VDS_DRIVE_PROP2		ends
PVDS_DRIVE_PROP2	typedef ptr VDS_DRIVE_PROP2

VDS_DRIVE_EXTENT	struct
id			VDS_OBJECT_ID <>
LunId			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
bUsed			BOOL ?
VDS_DRIVE_EXTENT	ends
PVDS_DRIVE_EXTENT	typedef ptr VDS_DRIVE_EXTENT

define VDS_REBUILD_PRIORITY_MIN 0
define VDS_REBUILD_PRIORITY_MAX 16

VDS_LUN_PROP		struct
id			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
pwszUnmaskingList	LPWSTR ?
ulFlags			ULONG ?
type			VDS_LUN_TYPE ?
status			VDS_LUN_STATUS ?
health			VDS_HEALTH ?
TransitionState		VDS_TRANSITION_STATE ?
sRebuildPriority	sword ?
VDS_LUN_PROP		ends
PVDS_LUN_PROP		typedef ptr VDS_LUN_PROP

VDS_LUN_PLEX_PROP	struct
id			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
type			VDS_LUN_PLEX_TYPE ?
status			VDS_LUN_PLEX_STATUS ?
health			VDS_HEALTH ?
TransitionState		VDS_TRANSITION_STATE ?
ulFlags			ULONG ?
ulStripeSize		ULONG ?
sRebuildPriority	sword ?
VDS_LUN_PLEX_PROP	ends
PVDS_LUN_PLEX_PROP	typedef ptr VDS_LUN_PLEX_PROP

VDS_PORT_PROP		struct
id			VDS_OBJECT_ID <>
pwszFriendlyName	LPWSTR ?
pwszIdentification	LPWSTR ?
status			VDS_PORT_STATUS ?
VDS_PORT_PROP		ends
PVDS_PORT_PROP		typedef ptr VDS_PORT_PROP

VDS_ISCSI_PORTAL_PROP	struct
id			VDS_OBJECT_ID <>
address			VDS_IPADDRESS <>
status			VDS_ISCSI_PORTAL_STATUS ?
VDS_ISCSI_PORTAL_PROP	ends
PVDS_ISCSI_PORTAL_PROP	typedef ptr VDS_ISCSI_PORTAL_PROP

VDS_ISCSI_TARGET_PROP	struct
id			VDS_OBJECT_ID <>
pwszIscsiName		LPWSTR ?
pwszFriendlyName	LPWSTR ?
bChapEnabled		BOOL ?
VDS_ISCSI_TARGET_PROP	ends
PVDS_ISCSI_TARGET_PROP	typedef ptr VDS_ISCSI_TARGET_PROP

VDS_ISCSI_PORTALGROUP_PROP struct
id			VDS_OBJECT_ID <>
tag			VDS_ISCSI_PORTALGROUP_TAG ?
VDS_ISCSI_PORTALGROUP_PROP ends
PVDS_ISCSI_PORTALGROUP_PROP typedef ptr VDS_ISCSI_PORTALGROUP_PROP

.enum VDS_RAID_TYPE {
	VDS_RT_UNKNOWN	= 0,
	VDS_RT_RAID0	= 10,
	VDS_RT_RAID1	= 11,
	VDS_RT_RAID2	= 12,
	VDS_RT_RAID3	= 13,
	VDS_RT_RAID4	= 14,
	VDS_RT_RAID5	= 15,
	VDS_RT_RAID6	= 16,
	VDS_RT_RAID01	= 17,
	VDS_RT_RAID03	= 18,
	VDS_RT_RAID05	= 19,
	VDS_RT_RAID10	= 20,
	VDS_RT_RAID15	= 21,
	VDS_RT_RAID30	= 22,
	VDS_RT_RAID50	= 23,
	VDS_RT_RAID51	= 24,
	VDS_RT_RAID53	= 25,
	VDS_RT_RAID60	= 26,
	VDS_RT_RAID61	= 27
	}

PVDS_RAID_TYPE typedef ptr VDS_RAID_TYPE

VDS_POOL_CUSTOM_ATTRIBUTES struct
pwszName		LPWSTR ?
pwszValue		LPWSTR ?
VDS_POOL_CUSTOM_ATTRIBUTES ends
PVDS_POOL_CUSTOM_ATTRIBUTES typedef ptr VDS_POOL_CUSTOM_ATTRIBUTES

VDS_POOL_ATTRIBUTES	struct
ullAttributeMask	ULONGLONG ?
raidType		VDS_RAID_TYPE ?
busType			VDS_STORAGE_BUS_TYPE ?
pwszIntendedUsage	LPWSTR ?
bSpinDown		BOOL ?
bIsThinProvisioned	BOOL ?
ullProvisionedSpace	ULONGLONG ?
bNoSinglePointOfFailure BOOL ?
ulDataRedundancyMax	ULONG ?
ulDataRedundancyMin	ULONG ?
ulDataRedundancyDefault ULONG ?
ulPackageRedundancyMax	ULONG ?
ulPackageRedundancyMin	ULONG ?
ulPackageRedundancyDefault ULONG ?
ulStripeSize		ULONG ?
ulStripeSizeMax		ULONG ?
ulStripeSizeMin		ULONG ?
ulDefaultStripeSize	ULONG ?
ulNumberOfColumns	ULONG ?
ulNumberOfColumnsMax	ULONG ?
ulNumberOfColumnsMin	ULONG ?
ulDefaultNumberofColumns ULONG ?
ulDataAvailabilityHint	ULONG ?
ulAccessRandomnessHint	ULONG ?
ulAccessDirectionHint	ULONG ?
ulAccessSizeHint	ULONG ?
ulAccessLatencyHint	ULONG ?
ulAccessBandwidthWeightHint ULONG ?
ulStorageCostHint	ULONG ?
ulStorageEfficiencyHint ULONG ?
ulNumOfCustomAttributes ULONG ?
pPoolCustomAttributes	ptr VDS_POOL_CUSTOM_ATTRIBUTES ?
bReserved1		BOOL ?
bReserved2		BOOL ?
ulReserved1		ULONG ?
ulReserved2		ULONG ?
ullReserved1		ULONGLONG ?
ullReserved2		ULONGLONG ?
VDS_POOL_ATTRIBUTES	ends
PVDS_POOL_ATTRIBUTES	typedef ptr VDS_POOL_ATTRIBUTES

define	VDS_POOL_ATTRIB_RAIDTYPE	0x1
define	VDS_POOL_ATTRIB_BUSTYPE		0x2
define	VDS_POOL_ATTRIB_ALLOW_SPINDOWN	0x4
define	VDS_POOL_ATTRIB_THIN_PROVISION	0x8
define	VDS_POOL_ATTRIB_NO_SINGLE_POF	0x10
define	VDS_POOL_ATTRIB_DATA_RDNCY_MAX	0x20
define	VDS_POOL_ATTRIB_DATA_RDNCY_MIN	0x40
define	VDS_POOL_ATTRIB_DATA_RDNCY_DEF	0x80
define	VDS_POOL_ATTRIB_PKG_RDNCY_MAX	0x100
define	VDS_POOL_ATTRIB_PKG_RDNCY_MIN	0x200
define	VDS_POOL_ATTRIB_PKG_RDNCY_DEF	0x400
define	VDS_POOL_ATTRIB_STRIPE_SIZE	0x800
define	VDS_POOL_ATTRIB_STRIPE_SIZE_MAX 0x1000
define	VDS_POOL_ATTRIB_STRIPE_SIZE_MIN 0x2000
define	VDS_POOL_ATTRIB_STRIPE_SIZE_DEF 0x4000
define	VDS_POOL_ATTRIB_NUM_CLMNS	0x8000
define	VDS_POOL_ATTRIB_NUM_CLMNS_MAX	0x10000
define	VDS_POOL_ATTRIB_NUM_CLMNS_MIN	0x20000
define	VDS_POOL_ATTRIB_NUM_CLMNS_DEF	0x40000
define	VDS_POOL_ATTRIB_DATA_AVL_HINT	0x80000
define	VDS_POOL_ATTRIB_ACCS_RNDM_HINT	0x100000
define	VDS_POOL_ATTRIB_ACCS_DIR_HINT	0x200000
define	VDS_POOL_ATTRIB_ACCS_SIZE_HINT	0x400000
define	VDS_POOL_ATTRIB_ACCS_LTNCY_HINT 0x800000
define	VDS_POOL_ATTRIB_ACCS_BDW_WT_HINT 0x1000000
define	VDS_POOL_ATTRIB_STOR_COST_HINT	0x2000000
define	VDS_POOL_ATTRIB_STOR_EFFCY_HINT 0x4000000
define	VDS_POOL_ATTRIB_CUSTOM_ATTRIB	0x8000000

VDS_STORAGE_POOL_PROP	struct
id			VDS_OBJECT_ID <>
status			VDS_STORAGE_POOL_STATUS ?
health			VDS_HEALTH ?
type			VDS_STORAGE_POOL_TYPE ?
pwszName		LPWSTR ?
pwszDescription		LPWSTR ?
ullTotalConsumedSpace	ULONGLONG ?
ullTotalManagedSpace	ULONGLONG ?
ullRemainingFreeSpace	ULONGLONG ?
VDS_STORAGE_POOL_PROP	ends
PVDS_STORAGE_POOL_PROP	typedef ptr VDS_STORAGE_POOL_PROP

VDS_STORAGE_POOL_DRIVE_EXTENT struct
id			VDS_OBJECT_ID <>
ullSize			ULONGLONG ?
bUsed			BOOL ?
VDS_STORAGE_POOL_DRIVE_EXTENT ends
PVDS_STORAGE_POOL_DRIVE_EXTENT typedef ptr VDS_STORAGE_POOL_DRIVE_EXTENT

ifndef __IVdsHwProvider_INTERFACE_DEFINED__
define __IVdsHwProvider_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsHwProvider, "d99bdaae-b13a-4178-9fdb-e27f16b4603e")

.comdef IVdsHwProvider : public IUnknown
    QuerySubSystems	proc :ptr ptr
    Reenumerate		proc
    Refresh		proc
   .ends

endif

ifndef __IVdsHwProviderType_INTERFACE_DEFINED__
define __IVdsHwProviderType_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsHwProviderType, "3e0f5166-542d-4fc6-947a-012174240b7e")

.comdef IVdsHwProviderType : public IUnknown
    GetProviderType	proc :ptr
   .ends

endif

ifndef __IVdsHwProviderType2_INTERFACE_DEFINED__
define __IVdsHwProviderType2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsHwProviderType2, "8190236f-c4d0-4e81-8011-d69512fcc984")

.comdef IVdsHwProviderType2 : public IUnknown
    GetProviderType2	proc :ptr
   .ends

endif

ifndef __IVdsHwProviderStoragePools_INTERFACE_DEFINED__
define __IVdsHwProviderStoragePools_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsHwProviderStoragePools, "d5b5937a-f188-4c79-b86c-11c920ad11b8")

.comdef IVdsHwProviderStoragePools : public IUnknown
    QueryStoragePools	proc :ULONG, :ULONGLONG, :ptr, :ptr ptr
    CreateLunInStoragePool proc :VDS_LUN_TYPE, :ULONGLONG, :VDS_OBJECT_ID, :LPWSTR, :ptr, :ptr ptr
    QueryMaxLunCreateSizeInStoragePool proc :VDS_LUN_TYPE, :VDS_OBJECT_ID, :ptr, :ptr
   .ends

endif

ifndef __IVdsSubSystem_INTERFACE_DEFINED__
define __IVdsSubSystem_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSubSystem, "6fcee2d3-6d90-4f91-80e2-a5c7caaca9d8")

.comdef IVdsSubSystem : public IUnknown
    GetProperties	proc :ptr
    GetProvider		proc :ptr ptr
    QueryControllers	proc :ptr ptr
    QueryLuns		proc :ptr ptr
    QueryDrives		proc :ptr ptr
    GetDrive		proc :SWORD, :SWORD, :ptr ptr
    Reenumerate		proc
    SetControllerStatus proc :ptr, :LONG, :ptr, :LONG
    CreateLun		proc :VDS_LUN_TYPE, :ULONGLONG, :ptr, :LONG, :LPWSTR, :ptr, :ptr ptr
    ReplaceDrive	proc :VDS_OBJECT_ID, :VDS_OBJECT_ID
    SetStatus		proc :VDS_SUB_SYSTEM_STATUS
    QueryMaxLunCreateSize proc :VDS_LUN_TYPE, :ptr, :LONG, :ptr, :ptr
   .ends

endif

ifndef __IVdsSubSystem2_INTERFACE_DEFINED__
define __IVdsSubSystem2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSubSystem2, "be666735-7800-4a77-9d9c-40f85b87e292")

.comdef IVdsSubSystem2 : public IUnknown
    GetProperties2	proc :ptr
    GetDrive2		proc :SWORD, :SWORD, :ULONG, :ptr ptr
    CreateLun2		proc :VDS_LUN_TYPE, :ULONGLONG, :ptr, :LONG, :LPWSTR, :ptr, :ptr ptr
    QueryMaxLunCreateSize2 proc :VDS_LUN_TYPE, :ptr, :LONG, :ptr, :ptr
   .ends

endif

ifndef __IVdsSubSystemNaming_INTERFACE_DEFINED__
define __IVdsSubSystemNaming_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSubSystemNaming, "0d70faa3-9cd4-4900-aa20-6981b6aafc75")

.comdef IVdsSubSystemNaming : public IUnknown
    SetFriendlyName	proc :LPWSTR
   .ends

endif

ifndef __IVdsSubSystemIscsi_INTERFACE_DEFINED__
define __IVdsSubSystemIscsi_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSubSystemIscsi, "0027346f-40d0-4b45-8cec-5906dc0380c8")

.comdef IVdsSubSystemIscsi : public IUnknown
    QueryTargets	proc :ptr ptr
    QueryPortals	proc :ptr ptr
    CreateTarget	proc :LPWSTR, :LPWSTR, :ptr ptr
    SetIpsecGroupPresharedKey proc :ptr
   .ends

endif

ifndef __IVdsSubSystemInterconnect_INTERFACE_DEFINED__
define __IVdsSubSystemInterconnect_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSubSystemInterconnect, "9e6fa560-c141-477b-83ba-0b6c38f7febf")

.comdef IVdsSubSystemInterconnect : public IUnknown
    GetSupportedInterconnects proc :ptr
   .ends

endif

ifndef __IVdsControllerPort_INTERFACE_DEFINED__
define __IVdsControllerPort_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsControllerPort, "18691d0d-4e7f-43e8-92e4-cf44beeed11c")

.comdef IVdsControllerPort : public IUnknown
    GetProperties	proc :ptr
    GetController	proc :ptr ptr
    QueryAssociatedLuns proc :ptr ptr
    Reset		proc
    SetStatus		proc :VDS_PORT_STATUS
   .ends

endif

ifndef __IVdsController_INTERFACE_DEFINED__
define __IVdsController_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsController, "cb53d96e-dffb-474a-a078-790d1e2bc082")

.comdef IVdsController : public IUnknown
    GetProperties	proc :ptr
    GetSubSystem	proc :ptr ptr
    GetPortProperties	proc :SWORD, :ptr
    FlushCache		proc
    InvalidateCache	proc
    Reset		proc
    QueryAssociatedLuns proc :ptr ptr
    SetStatus		proc :VDS_CONTROLLER_STATUS
   .ends

endif

ifndef __IVdsControllerControllerPort_INTERFACE_DEFINED__
define __IVdsControllerControllerPort_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsControllerControllerPort, "ca5d735f-6bae-42c0-b30e-f2666045ce71")

.comdef IVdsControllerControllerPort : public IUnknown
    QueryControllerPorts proc :ptr ptr
   .ends

endif

ifndef __IVdsDrive_INTERFACE_DEFINED__
define __IVdsDrive_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDrive, "ff24efa4-aade-4b6b-898b-eaa6a20887c7")

.comdef IVdsDrive : public IUnknown
    GetProperties	proc :ptr
    GetSubSystem	proc :ptr ptr
    QueryExtents	proc :ptr ptr, :ptr
    SetFlags		proc :ULONG
    ClearFlags		proc :ULONG
    SetStatus		proc :VDS_DRIVE_STATUS
   .ends

endif

ifndef __IVdsDrive2_INTERFACE_DEFINED__
define __IVdsDrive2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDrive2, "60b5a730-addf-4436-8ca7-5769e2d1ffa4")

.comdef IVdsDrive2 : public IUnknown
    GetProperties2	proc :ptr
   .ends

endif

ifndef __IVdsLun_INTERFACE_DEFINED__
define __IVdsLun_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLun, "3540a9c7-e60f-4111-a840-8bba6c2c83d8")

.comdef IVdsLun : public IUnknown
    GetProperties	proc :ptr
    GetSubSystem	proc :ptr ptr
    GetIdentificationData proc :ptr
    QueryActiveControllers proc :ptr ptr
    Extend		proc :ULONGLONG, :ptr, :LONG, :ptr ptr
    Shrink		proc :ULONGLONG, :ptr ptr
    QueryPlexes		proc :ptr ptr
    AddPlex		proc :VDS_OBJECT_ID, :ptr ptr
    RemovePlex		proc :VDS_OBJECT_ID, :ptr ptr
    Recover		proc :ptr ptr
    SetMask		proc :LPWSTR
    Delete		proc
    AssociateControllers proc :ptr, :LONG, :ptr, :LONG
    QueryHints		proc :ptr
    ApplyHints		proc :ptr
    SetStatus		proc :VDS_LUN_STATUS
    QueryMaxLunExtendSize proc :ptr, :LONG, :ptr
   .ends

endif

ifndef __IVdsLun2_INTERFACE_DEFINED__
define __IVdsLun2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLun2, "e5b3a735-9efb-499a-8071-4394d9ee6fcb")

.comdef IVdsLun2 : public IUnknown
    QueryHints2		proc :ptr
    ApplyHints2		proc :ptr
   .ends

endif

ifndef __IVdsLunNaming_INTERFACE_DEFINED__
define __IVdsLunNaming_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLunNaming, "907504cb-6b4e-4d88-a34d-17ba661fbb06")

.comdef IVdsLunNaming : public IUnknown
    SetFriendlyName	proc :LPWSTR
   .ends

endif

ifndef __IVdsLunNumber_INTERFACE_DEFINED__
define __IVdsLunNumber_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLunNumber, "d3f95e46-54b3-41f9-b678-0f1871443a08")

.comdef IVdsLunNumber : public IUnknown
    GetLunNumber	proc :ptr
   .ends

endif

ifndef __IVdsLunControllerPorts_INTERFACE_DEFINED__
define __IVdsLunControllerPorts_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLunControllerPorts, "451fe266-da6d-406a-bb60-82e534f85aeb")

.comdef IVdsLunControllerPorts : public IUnknown
    AssociateControllerPorts proc :ptr, :LONG, :ptr, :LONG
    QueryActiveControllerPorts proc :ptr ptr
   .ends

endif

ifndef __IVdsLunMpio_INTERFACE_DEFINED__
define __IVdsLunMpio_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLunMpio, "7c5fbae3-333a-48a1-a982-33c15788cde3")

.comdef IVdsLunMpio : public IUnknown
    GetPathInfo		proc :ptr ptr, :ptr
    GetLoadBalancePolicy proc :ptr, :ptr ptr, :ptr
    SetLoadBalancePolicy proc :VDS_LOADBALANCE_POLICY_ENUM, :ptr, :LONG
    GetSupportedLbPolicies proc :ptr
   .ends

endif

ifndef __IVdsLunIscsi_INTERFACE_DEFINED__
define __IVdsLunIscsi_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLunIscsi, "0d7c1e64-b59b-45ae-b86a-2c2cc6a42067")

.comdef IVdsLunIscsi : public IUnknown
    AssociateTargets	proc :ptr, :LONG
    QueryAssociatedTargets proc :ptr ptr
   .ends

endif

ifndef __IVdsLunPlex_INTERFACE_DEFINED__
define __IVdsLunPlex_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsLunPlex, "0ee1a790-5d2e-4abb-8c99-c481e8be2138")

.comdef IVdsLunPlex : public IUnknown
    GetProperties	proc :ptr
    GetLun		proc :ptr ptr
    QueryExtents	proc :ptr ptr, :ptr
    QueryHints		proc :ptr
    ApplyHints		proc :ptr
   .ends

endif

ifndef __IVdsIscsiPortal_INTERFACE_DEFINED__
define __IVdsIscsiPortal_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsIscsiPortal, "7fa1499d-ec85-4a8a-a47b-ff69201fcd34")

.comdef IVdsIscsiPortal : public IUnknown
    GetProperties	proc :ptr
    GetSubSystem	proc :ptr ptr
    QueryAssociatedPortalGroups proc :ptr ptr
    SetStatus		proc :VDS_ISCSI_PORTAL_STATUS
    SetIpsecTunnelAddress proc :ptr, :ptr
    GetIpsecSecurity	proc :ptr, :ptr
    SetIpsecSecurity	proc :ptr, :ULONGLONG, :ptr
   .ends

endif

ifndef __IVdsIscsiTarget_INTERFACE_DEFINED__
define __IVdsIscsiTarget_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsIscsiTarget, "aa8f5055-83e5-4bcc-aa73-19851a36a849")

.comdef IVdsIscsiTarget : public IUnknown
    GetProperties	proc :ptr
    GetSubSystem	proc :ptr ptr
    QueryPortalGroups	proc :ptr ptr
    QueryAssociatedLuns proc :ptr ptr
    CreatePortalGroup	proc :ptr ptr
    Delete		proc :ptr ptr
    SetFriendlyName	proc :LPWSTR
    SetSharedSecret	proc :ptr, :LPWSTR
    RememberInitiatorSharedSecret proc :LPWSTR, :ptr
    GetConnectedInitiators proc :ptr ptr, :ptr
   .ends

endif

ifndef __IVdsIscsiPortalGroup_INTERFACE_DEFINED__
define __IVdsIscsiPortalGroup_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsIscsiPortalGroup, "fef5f89d-a3dd-4b36-bf28-e7dde045c593")

.comdef IVdsIscsiPortalGroup : public IUnknown
    GetProperties	proc :ptr
    GetTarget		proc :ptr ptr
    QueryAssociatedPortals proc :ptr ptr
    AddPortal		proc :VDS_OBJECT_ID, :ptr ptr
    RemovePortal	proc :VDS_OBJECT_ID, :ptr ptr
    Delete		proc :ptr ptr
   .ends

endif

ifndef __IVdsStoragePool_INTERFACE_DEFINED__
define __IVdsStoragePool_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsStoragePool, "932ca8cf-0eb3-4ba8-9620-22665d7f8450")

.comdef IVdsStoragePool : public IUnknown
    GetProvider		proc :ptr ptr
    GetProperties	proc :ptr
    GetAttributes	proc :ptr
    QueryDriveExtents	proc :ptr ptr, :ptr
    QueryAllocatedLuns	proc :ptr ptr
    QueryAllocatedStoragePools proc :ptr ptr
   .ends

endif

ifndef __IVdsMaintenance_INTERFACE_DEFINED__
define __IVdsMaintenance_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsMaintenance, "daebeef3-8523-47ed-a2b9-05cecce2a1ae")

.comdef IVdsMaintenance : public IUnknown
    StartMaintenance	proc :VDS_MAINTENANCE_OPERATION
    StopMaintenance	proc :VDS_MAINTENANCE_OPERATION
    PulseMaintenance	proc :VDS_MAINTENANCE_OPERATION, :ULONG
   .ends

endif

endif

if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
if (WINVER ge _WIN32_WINNT_WIN7)

VDS_CREATE_VDISK_PARAMETERS struct
UniqueId		GUID <>
MaximumSize		ULONGLONG ?
BlockSizeInBytes	ULONG ?
SectorSizeInBytes	ULONG ?
pParentPath		LPWSTR ?
pSourcePath		LPWSTR ?
VDS_CREATE_VDISK_PARAMETERS ends
PVDS_CREATE_VDISK_PARAMETERS typedef ptr VDS_CREATE_VDISK_PARAMETERS

ifndef __IVdsVdProvider_INTERFACE_DEFINED__
define __IVdsVdProvider_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVdProvider, "b481498c-8354-45f9-84a0-0bdd2832a91f")

.comdef IVdsVdProvider : public IUnknown
    QueryVDisks		proc :ptr ptr
    CreateVDisk		proc :PVIRTUAL_STORAGE_TYPE, :LPWSTR, :LPWSTR, :CREATE_VIRTUAL_DISK_FLAG, :ULONG, :ULONG, :PVDS_CREATE_VDISK_PARAMETERS, :ptr ptr
    AddVDisk		proc :PVIRTUAL_STORAGE_TYPE, :LPWSTR, :ptr ptr
    GetDiskFromVDisk	proc :ptr, :ptr ptr
    GetVDiskFromDisk	proc :ptr, :ptr ptr
   .ends

endif

.enum VDS_VDISK_STATE {
	VDS_VST_UNKNOWN,
	VDS_VST_ADDED,
	VDS_VST_OPEN,
	VDS_VST_ATTACH_PENDING,
	VDS_VST_ATTACHED_NOT_OPEN,
	VDS_VST_ATTACHED,
	VDS_VST_DETACH_PENDING,
	VDS_VST_COMPACTING,
	VDS_VST_MERGING,
	VDS_VST_EXPANDING,
	VDS_VST_DELETED,
	VDS_VST_MAX
	}

VDS_VDISK_PROPERTIES	struct
Id			VDS_OBJECT_ID <>
State			VDS_VDISK_STATE ?
VirtualDeviceType	VIRTUAL_STORAGE_TYPE <>
VirtualSize		ULONGLONG ?
PhysicalSize		ULONGLONG ?
pPath			LPWSTR ?
pDeviceName		LPWSTR ?
DiskFlag		DEPENDENT_DISK_FLAG ?
bIsChild		BOOL ?
pParentPath		LPWSTR ?
VDS_VDISK_PROPERTIES	ends
PVDS_VDISK_PROPERTIES	typedef ptr VDS_VDISK_PROPERTIES

ifndef __IVdsVDisk_INTERFACE_DEFINED__
define __IVdsVDisk_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVDisk, "1e062b84-e5e6-4b4b-8a25-67b81e8f13e8")

.comdef IVdsVDisk : public IUnknown
    Open		proc :VIRTUAL_DISK_ACCESS_MASK, :OPEN_VIRTUAL_DISK_FLAG, :ULONG, :ptr ptr
    GetProperties	proc :PVDS_VDISK_PROPERTIES
    GetHostVolume	proc :ptr ptr
    GetDeviceName	proc :ptr
   .ends

endif

ifndef __IVdsOpenVDisk_INTERFACE_DEFINED__
define __IVdsOpenVDisk_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsOpenVDisk, "75c8f324-f715-4fe3-a28e-f9011b61a4a1")

.comdef IVdsOpenVDisk : public IUnknown
    Attach		proc :LPWSTR, :ATTACH_VIRTUAL_DISK_FLAG, :ULONG, :ULONG, :ptr ptr
    Detach		proc :DETACH_VIRTUAL_DISK_FLAG, :ULONG
    DetachAndDelete	proc :DETACH_VIRTUAL_DISK_FLAG, :ULONG
    Compact		proc :COMPACT_VIRTUAL_DISK_FLAG, :ULONG, :ptr ptr
    Merge		proc :MERGE_VIRTUAL_DISK_FLAG, :ULONG, :ptr ptr
    Expand		proc :EXPAND_VIRTUAL_DISK_FLAG, :ULONGLONG, :ptr ptr
   .ends

endif

define VDS_ATTACH_VIRTUAL_DISK_FLAG_USE_FILE_ACL 0x1

endif
endif

DEFINE_GUID(CLSID_VdsLoader, 0X9C38ED61,0xD565,0x4728,0xAE,0xEE,0xC8,0x09,0x52,0xF0,0xEC,0xDE)
DEFINE_GUID(CLSID_VdsService, 0x7D1933CB,0x86F6,0x4A98,0x86,0x28,0x01,0xBE,0x94,0xC9,0xA5,0x75)

define MAX_FS_NAME_SIZE			8
define MAX_FS_FORMAT_SUPPORT_NAME_SIZE	32
define MAX_FS_ALLOWED_CLUSTER_SIZES_SIZE 32

.enum VDS_SERVICE_FLAG {
	VDS_SVF_SUPPORT_DYNAMIC		= 0x1,
	VDS_SVF_SUPPORT_FAULT_TOLERANT	= 0x2,
	VDS_SVF_SUPPORT_GPT		= 0x4,
	VDS_SVF_SUPPORT_DYNAMIC_1394	= 0x8,
	VDS_SVF_CLUSTER_SERVICE_CONFIGURED	= 0x10,
	VDS_SVF_AUTO_MOUNT_OFF		= 0x20,
	VDS_SVF_OS_UNINSTALL_VALID	= 0x40,
	VDS_SVF_EFI			= 0x80,
	VDS_SVF_SUPPORT_MIRROR		= 0x100,
	VDS_SVF_SUPPORT_RAID5		= 0x200,
	VDS_SVF_SUPPORT_REFS		= 0x400
	}

VDS_SERVICE_PROP	struct
pwszVersion		LPWSTR ?
ulFlags			ULONG ?
VDS_SERVICE_PROP	ends

.enum VDS_SAN_POLICY {
	VDS_SP_UNKNOWN		= 0,
	VDS_SP_ONLINE		= 0x1,
	VDS_SP_OFFLINE_SHARED	= 0x2,
	VDS_SP_OFFLINE		= 0x3,
	VDS_SP_OFFLINE_INTERNAL = 0x4,
	VDS_SP_MAX		= 0x5
	}

VDS_REPARSE_POINT_PROP	struct
SourceVolumeId		VDS_OBJECT_ID <>
pwszPath		LPWSTR ?
VDS_REPARSE_POINT_PROP	ends

PVDS_REPARSE_POINT_PROP typedef ptr VDS_REPARSE_POINT_PROP

.enum VDS_DRIVE_LETTER_FLAG {
	VDS_DLF_NON_PERSISTENT	= 0x1
	}

VDS_DRIVE_LETTER_PROP	struct
wcLetter		WCHAR ?
volumeId		VDS_OBJECT_ID <>
ulFlags			ULONG ?
bUsed			BOOL ?
VDS_DRIVE_LETTER_PROP	ends
PVDS_DRIVE_LETTER_PROP	typedef ptr VDS_DRIVE_LETTER_PROP

.enum VDS_FILE_SYSTEM_FLAG {
	VDS_FSF_SUPPORT_FORMAT		= 0x1,
	VDS_FSF_SUPPORT_QUICK_FORMAT	= 0x2,
	VDS_FSF_SUPPORT_COMPRESS	= 0x4,
	VDS_FSF_SUPPORT_SPECIFY_LABEL	= 0x8,
	VDS_FSF_SUPPORT_MOUNT_POINT	= 0x10,
	VDS_FSF_SUPPORT_REMOVABLE_MEDIA = 0x20,
	VDS_FSF_SUPPORT_EXTEND		= 0x40,
	VDS_FSF_ALLOCATION_UNIT_512	= 0x10000,
	VDS_FSF_ALLOCATION_UNIT_1K	= 0x20000,
	VDS_FSF_ALLOCATION_UNIT_2K	= 0x40000,
	VDS_FSF_ALLOCATION_UNIT_4K	= 0x80000,
	VDS_FSF_ALLOCATION_UNIT_8K	= 0x100000,
	VDS_FSF_ALLOCATION_UNIT_16K	= 0x200000,
	VDS_FSF_ALLOCATION_UNIT_32K	= 0x400000,
	VDS_FSF_ALLOCATION_UNIT_64K	= 0x800000,
	VDS_FSF_ALLOCATION_UNIT_128K	= 0x1000000,
	VDS_FSF_ALLOCATION_UNIT_256K	= 0x2000000
	}

VDS_FILE_SYSTEM_TYPE_PROP struct
type			VDS_FILE_SYSTEM_TYPE ?
wszName			WCHAR 8 dup(?)
ulFlags			ULONG ?
ulCompressionFlags	ULONG ?
ulMaxLableLength	ULONG ?
pwszIllegalLabelCharSet LPWSTR ?
VDS_FILE_SYSTEM_TYPE_PROP ends
PVDS_FILE_SYSTEM_TYPE_PROP typedef ptr VDS_FILE_SYSTEM_TYPE_PROP

.enum VDS_FILE_SYSTEM_FORMAT_SUPPORT_FLAG {
	VDS_FSS_DEFAULT			= 0x1,
	VDS_FSS_PREVIOUS_REVISION	= 0x2,
	VDS_FSS_RECOMMENDED		= 0x4
	}

VDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP struct
ulFlags			ULONG ?
usRevision		USHORT ?
ulDefaultUnitAllocationSize ULONG ?
rgulAllowedUnitAllocationSizes ULONG 32 dup(?)
wszName			WCHAR 32 dup(?)
VDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP ends
PVDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP typedef ptr VDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP

.enum VDS_FILE_SYSTEM_PROP_FLAG {
	VDS_FPF_COMPRESSED	= 0x1
	}

.enum VDS_FORMAT_OPTION_FLAGS {
	VDS_FSOF_NONE	= 0,
	VDS_FSOF_FORCE	= 0x1,
	VDS_FSOF_QUICK	= 0x2,
	VDS_FSOF_COMPRESSION	= 0x4,
	VDS_FSOF_DUPLICATE_METADATA	= 0x8
	}

VDS_FILE_SYSTEM_PROP	struct
type			VDS_FILE_SYSTEM_TYPE ?
volumeId		VDS_OBJECT_ID <>
ulFlags			ULONG ?
ullTotalAllocationUnits ULONGLONG ?
ullAvailableAllocationUnits ULONGLONG ?
ulAllocationUnitSize	ULONG ?
pwszLabel		LPWSTR ?
VDS_FILE_SYSTEM_PROP	ends
PVDS_FILE_SYSTEM_PROP	typedef ptr VDS_FILE_SYSTEM_PROP

.enum VDS_QUERY_PROVIDER_FLAG {
	VDS_QUERY_SOFTWARE_PROVIDERS	= 0x1,
	VDS_QUERY_HARDWARE_PROVIDERS	= 0x2,
	VDS_QUERY_VIRTUALDISK_PROVIDERS = 0x4
	}

ifndef __IVdsServiceLoader_INTERFACE_DEFINED__
define __IVdsServiceLoader_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceLoader, "e0393303-90d4-4a97-ab71-e9b671ee2729")

.comdef IVdsServiceLoader : public IUnknown
    LoadService		proc :LPWSTR, :ptr ptr
   .ends

endif

ifndef __IVdsService_INTERFACE_DEFINED__
define __IVdsService_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsService, "0818a8ef-9ba9-40d8-a6f9-e22833cc771e")

.comdef IVdsService : public IUnknown
    IsServiceReady	proc
    WaitForServiceReady proc
    GetProperties	proc :ptr
    QueryProviders	proc :DWORD, :ptr ptr
    QueryMaskedDisks	proc :ptr ptr
    QueryUnallocatedDisks proc :ptr ptr
    GetObject		proc :VDS_OBJECT_ID, :VDS_OBJECT_TYPE, :ptr ptr
    QueryDriveLetters	proc :WCHAR, :DWORD, :ptr
    QueryFileSystemTypes proc :ptr ptr, :ptr
    Reenumerate		proc
    Refresh		proc
    CleanupObsoleteMountPoints proc
    Advise		proc :ptr, :ptr
    Unadvise		proc :DWORD
    Reboot		proc
    SetFlags		proc :ULONG
    ClearFlags		proc :ULONG
   .ends

endif

ifndef __IVdsServiceUninstallDisk_INTERFACE_DEFINED__
define __IVdsServiceUninstallDisk_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceUninstallDisk, "B6B22DA8-F903-4be7-B492-C09D875AC9DA")

.comdef IVdsServiceUninstallDisk : public IUnknown
    GetDiskIdFromLunInfo proc :ptr, :ptr
    UninstallDisks	proc :ptr, :ULONG, :BOOLEAN, :ptr, :ptr
   .ends

endif

ifndef __IVdsServiceHba_INTERFACE_DEFINED__
define __IVdsServiceHba_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceHba, "0ac13689-3134-47c6-a17c-4669216801be")

.comdef IVdsServiceHba : public IUnknown
    QueryHbaPorts	proc :ptr ptr
   .ends

endif

ifndef __IVdsServiceIscsi_INTERFACE_DEFINED__
define __IVdsServiceIscsi_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceIscsi, "14fbe036-3ed7-4e10-90e9-a5ff991aff01")

.comdef IVdsServiceIscsi : public IUnknown
    GetInitiatorName	proc :ptr
    QueryInitiatorAdapters proc :ptr ptr
    SetIpsecGroupPresharedKey proc :ptr
    SetAllIpsecTunnelAddresses proc :ptr, :ptr
    SetAllIpsecSecurity proc :VDS_OBJECT_ID, :ULONGLONG, :ptr
    SetInitiatorSharedSecret proc :ptr, :VDS_OBJECT_ID
    RememberTargetSharedSecret proc :VDS_OBJECT_ID, :ptr
   .ends

endif

ifndef __IVdsServiceInitialization_INTERFACE_DEFINED__
define __IVdsServiceInitialization_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceInitialization, "4afc3636-db01-4052-80c3-03bbcb8d3c69")

.comdef IVdsServiceInitialization : public IUnknown
    Initialize		proc :LPWSTR
   .ends

endif

ifndef __IVdsHbaPort_INTERFACE_DEFINED__
define __IVdsHbaPort_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsHbaPort, "2abd757f-2851-4997-9a13-47d2a885d6ca")

.comdef IVdsHbaPort : public IUnknown
    GetProperties	proc :ptr
    SetAllPathStatuses	proc :VDS_PATH_STATUS
   .ends

endif

ifndef __IVdsIscsiInitiatorAdapter_INTERFACE_DEFINED__
define __IVdsIscsiInitiatorAdapter_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsIscsiInitiatorAdapter, "b07fedd4-1682-4440-9189-a39b55194dc5")

.comdef IVdsIscsiInitiatorAdapter : public IUnknown
    GetProperties	proc :ptr
    QueryInitiatorPortals proc :ptr ptr
    LoginToTarget	proc :VDS_ISCSI_LOGIN_TYPE, :VDS_OBJECT_ID, :VDS_OBJECT_ID, :VDS_OBJECT_ID, :ULONG, :BOOL, :BOOL, :VDS_ISCSI_AUTH_TYPE, :ptr ptr
    LogoutFromTarget	proc :VDS_OBJECT_ID, :ptr ptr
   .ends

endif

ifndef __IVdsIscsiInitiatorPortal_INTERFACE_DEFINED__
define __IVdsIscsiInitiatorPortal_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsIscsiInitiatorPortal, "38a0a9ab-7cc8-4693-ac07-1f28bd03c3da")

.comdef IVdsIscsiInitiatorPortal : public IUnknown
    GetProperties	proc :ptr
    GetInitiatorAdapter proc :ptr ptr
    SetIpsecTunnelAddress proc :ptr, :ptr
    GetIpsecSecurity	proc :VDS_OBJECT_ID, :ptr
    SetIpsecSecurity	proc :VDS_OBJECT_ID, :ULONGLONG, :ptr
   .ends

endif

ifndef __IVdsDiskPartitionMF_INTERFACE_DEFINED__
define __IVdsDiskPartitionMF_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDiskPartitionMF, "538684e0-ba3d-4bc0-aca9-164aff85c2a9")

.comdef IVdsDiskPartitionMF : public IUnknown
    GetPartitionFileSystemProperties proc :ULONGLONG, :ptr
    GetPartitionFileSystemTypeName proc :ULONGLONG, :ptr
    QueryPartitionFileSystemFormatSupport proc :ULONGLONG, :ptr ptr, :ptr
    FormatPartitionEx	proc :ULONGLONG, :LPWSTR, :USHORT, :ULONG, :LPWSTR, :BOOL, :BOOL, :BOOL, :ptr ptr
   .ends

endif

ifndef __IVdsVolumeMF_INTERFACE_DEFINED__
define __IVdsVolumeMF_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolumeMF, "ee2d5ded-6236-4169-931d-b9778ce03dc6")

.comdef IVdsVolumeMF : public IUnknown
    GetFileSystemProperties proc :ptr
    Format		proc :VDS_FILE_SYSTEM_TYPE, :LPWSTR, :DWORD, :BOOL, :BOOL, :BOOL, :ptr ptr
    AddAccessPath	proc :LPWSTR
    QueryAccessPaths	proc :ptr ptr, :ptr
    QueryReparsePoints	proc :ptr ptr, :ptr
    DeleteAccessPath	proc :LPWSTR, :BOOL
    Mount		proc
    Dismount		proc :BOOL, :BOOL
    SetFileSystemFlags	proc :ULONG
    ClearFileSystemFlags proc :ULONG
   .ends

endif

ifndef __IVdsVolumeMF2_INTERFACE_DEFINED__
define __IVdsVolumeMF2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolumeMF2, "4dbcee9a-6343-4651-b85f-5e75d74d983c")

.comdef IVdsVolumeMF2 : public IUnknown
    GetFileSystemTypeName proc :ptr
    QueryFileSystemFormatSupport proc :ptr ptr, :ptr
    FormatEx		proc :LPWSTR, :USHORT, :ULONG, :LPWSTR, :BOOL, :BOOL, :BOOL, :ptr ptr
   .ends

endif

ifndef __IVdsVolumeShrink_INTERFACE_DEFINED__
define __IVdsVolumeShrink_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolumeShrink, "d68168c9-82a2-4f85-b6e9-74707c49a58f")

.comdef IVdsVolumeShrink : public IUnknown
    QueryMaxReclaimableBytes proc :ptr
    Shrink		proc :ULONGLONG, :ULONGLONG, :ptr ptr
   .ends

endif

ifndef __IVdsSubSystemImportTarget_INTERFACE_DEFINED__
define __IVdsSubSystemImportTarget_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsSubSystemImportTarget, "83bfb87f-43fb-4903-baa6-127f01029eec")

.comdef IVdsSubSystemImportTarget : public IUnknown
    GetImportTarget	proc :ptr
    SetImportTarget	proc :LPWSTR
   .ends

endif

ifndef __IVdsIscsiPortalLocal_INTERFACE_DEFINED__
define __IVdsIscsiPortalLocal_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsIscsiPortalLocal, "ad837c28-52c1-421d-bf04-fae7da665396")

.comdef IVdsIscsiPortalLocal : public IUnknown
    SetIpsecSecurityLocal proc :ULONGLONG, :ptr
   .ends

endif

ifndef __IVdsServiceSAN_INTERFACE_DEFINED__
define __IVdsServiceSAN_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceSAN, "FC5D23E8-A88B-41a5-8DE0-2D2F73C5A630")

.comdef IVdsServiceSAN : public IUnknown
    GetSANPolicy	proc :ptr
    SetSANPolicy	proc :VDS_SAN_POLICY
   .ends

endif

ifndef __IVdsVolumeMF3_INTERFACE_DEFINED__
define __IVdsVolumeMF3_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsVolumeMF3, "6788FAF9-214E-4b85-BA59-266953616E09")

.comdef IVdsVolumeMF3 : public IUnknown
    QueryVolumeGuidPathnames proc :ptr ptr, :ptr
    FormatEx2		proc :LPWSTR, :USHORT, :ULONG, :LPWSTR, :DWORD, :ptr ptr
    OfflineVolume	proc
   .ends

endif

ifndef __IVdsDiskPartitionMF2_INTERFACE_DEFINED__
define __IVdsDiskPartitionMF2_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsDiskPartitionMF2, "9CBE50CA-F2D2-4bf4-ACE1-96896B729625")

.comdef IVdsDiskPartitionMF2 : public IUnknown
    FormatPartitionEx2	proc :ULONGLONG, :LPWSTR, :USHORT, :ULONG, :LPWSTR, :DWORD, :ptr ptr
   .ends

endif

ifndef __IVdsServiceSw_INTERFACE_DEFINED__
define __IVdsServiceSw_INTERFACE_DEFINED__
DEFINE_IIDX(IVdsServiceSw, "15fc031c-0652-4306-b2c3-f558b8f837e2")

.comdef IVdsServiceSw : public IUnknown
    GetDiskObject	proc :LPCWSTR, :ptr ptr
   .ends

endif

endif
