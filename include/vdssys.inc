ifndef _RPC500_
include rpc500.inc
endif
ifndef __vdssys_h__
define __vdssys_h__

include wtypes.inc
ifndef __oaidl_h__
include oaidl.inc
endif
ifndef _WINAPIFAMILY_
include winapifamily.inc
endif

if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
if (WINVER ge _WIN32_WINNT_WIN7)
if defined(VDS_MIDL_PASS)
PWSTR			typedef LPWSTR
PCWSTR			typedef LPCWSTR
ACCESS_MASK		typedef DWORD
PSECURITY_DESCRIPTOR	typedef PVOID
LPOVERLAPPED		typedef PVOID
PULONG			typedef ptr ULONG
PHANDLE			typedef ptr HANDLE

VIRTUAL_STORAGE_TYPE	struct
DeviceId		ULONG ?
VendorId		GUID <>
VIRTUAL_STORAGE_TYPE	ends
PVIRTUAL_STORAGE_TYPE	typedef ptr VIRTUAL_STORAGE_TYPE

.enum OPEN_VIRTUAL_DISK_VERSION {
	OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	OPEN_VIRTUAL_DISK_VERSION_1,
	OPEN_VIRTUAL_DISK_VERSION_2,
	OPEN_VIRTUAL_DISK_VERSION_3
	}

OPEN_VIRTUAL_DISK_PARAMETERS struct
Version			OPEN_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  RWDepth		ULONG ?
ends
 struct Version2
  GetInfoOnly		BOOL ?
  ReadOnly		BOOL ?
  ResiliencyGuid	GUID <>
 ends
 struct Version3
  GetInfoOnly		BOOL ?
  ReadOnly		BOOL ?
  ResiliencyGuid	GUID <>
  SnapshotId		GUID <>
 ends
ends
OPEN_VIRTUAL_DISK_PARAMETERS ends
POPEN_VIRTUAL_DISK_PARAMETERS typedef ptr OPEN_VIRTUAL_DISK_PARAMETERS

.enum VIRTUAL_DISK_ACCESS_MASK {
	VIRTUAL_DISK_ACCESS_NONE	= 0,
	VIRTUAL_DISK_ACCESS_ATTACH_RO	= 0x10000,
	VIRTUAL_DISK_ACCESS_ATTACH_RW	= 0x20000,
	VIRTUAL_DISK_ACCESS_DETACH	= 0x40000,
	VIRTUAL_DISK_ACCESS_GET_INFO	= 0x80000,
	VIRTUAL_DISK_ACCESS_CREATE	= 0x100000,
	VIRTUAL_DISK_ACCESS_METAOPS	= 0x200000,
	VIRTUAL_DISK_ACCESS_READ	= 0xd0000,
	VIRTUAL_DISK_ACCESS_ALL		= 0x3f0000,
	VIRTUAL_DISK_ACCESS_WRITABLE	= 0x320000
	}

.enum OPEN_VIRTUAL_DISK_FLAG {
	OPEN_VIRTUAL_DISK_FLAG_NONE				= 0,
	OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS			= 0x1,
	OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE			= 0x2,
	OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE			= 0x4,
	OPEN_VIRTUAL_DISK_FLAG_CACHED_IO			= 0x8,
	OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN		= 0x10,
	OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO			= 0x20,
	OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY			= 0x40,
	OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR	= 0x80,
	OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING		= 0x100,
	OPEN_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES	= 0x200,
	OPEN_VIRTUAL_DISK_FLAG_SUPPORT_SPARSE_FILES_ANY_FS	= 0x400,
	OPEN_VIRTUAL_DISK_FLAG_SUPPORT_ENCRYPTED_FILES		= 0x800
	}

OpenVirtualDisk proto WINAPI :PVIRTUAL_STORAGE_TYPE, :PCWSTR, :VIRTUAL_DISK_ACCESS_MASK, :OPEN_VIRTUAL_DISK_FLAG, :POPEN_VIRTUAL_DISK_PARAMETERS, :PHANDLE

.enum CREATE_VIRTUAL_DISK_VERSION {
	CREATE_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	CREATE_VIRTUAL_DISK_VERSION_1,
	CREATE_VIRTUAL_DISK_VERSION_2,
	CREATE_VIRTUAL_DISK_VERSION_3,
	CREATE_VIRTUAL_DISK_VERSION_4
	}

CREATE_VIRTUAL_DISK_PARAMETERS struct
Version			CREATE_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  UniqueId		GUID <>
  MaximumSize		ULONGLONG ?
  BlockSizeInBytes	ULONG ?
  SectorSizeInBytes	ULONG ?
  ParentPath		PCWSTR ?
  SourcePath		PCWSTR ?
ends
 struct Version2
  UniqueId		GUID <>
  MaximumSize		ULONGLONG ?
  BlockSizeInBytes	ULONG ?
  SectorSizeInBytes	ULONG ?
  PhysicalSectorSizeInBytes ULONG ?
  ParentPath		PCWSTR ?
  SourcePath		PCWSTR ?
  OpenFlags		OPEN_VIRTUAL_DISK_FLAG ?
  ParentVirtualStorageType VIRTUAL_STORAGE_TYPE ?
  SourceVirtualStorageType VIRTUAL_STORAGE_TYPE ?
  ResiliencyGuid	GUID <>
 ends
 struct Version3
  UniqueId		GUID <>
  MaximumSize		ULONGLONG ?
  BlockSizeInBytes	ULONG ?
  SectorSizeInBytes	ULONG ?
  PhysicalSectorSizeInBytes ULONG ?
  ParentPath		PCWSTR ?
  SourcePath		PCWSTR ?
  OpenFlags		OPEN_VIRTUAL_DISK_FLAG ?
  ParentVirtualStorageType VIRTUAL_STORAGE_TYPE ?
  SourceVirtualStorageType VIRTUAL_STORAGE_TYPE ?
  ResiliencyGuid	GUID <>
  SourceLimitPath	PCWSTR ?
  BackingStorageType	VIRTUAL_STORAGE_TYPE ?
 ends
 struct Version4
  UniqueId		GUID <>
  MaximumSize		ULONGLONG ?
  BlockSizeInBytes	ULONG ?
  SectorSizeInBytes	ULONG ?
  PhysicalSectorSizeInBytes ULONG ?
  ParentPath		PCWSTR ?
  SourcePath		PCWSTR ?
  OpenFlags		OPEN_VIRTUAL_DISK_FLAG ?
  ParentVirtualStorageType VIRTUAL_STORAGE_TYPE ?
  SourceVirtualStorageType VIRTUAL_STORAGE_TYPE ?
  ResiliencyGuid	GUID <>
  SourceLimitPath	PCWSTR ?
  BackingStorageType	VIRTUAL_STORAGE_TYPE ?
  PmemAddressAbstractionType GUID <>
  DataAlignment		ULONGLONG ?
 ends
ends
CREATE_VIRTUAL_DISK_PARAMETERS ends
PCREATE_VIRTUAL_DISK_PARAMETERS typedef ptr CREATE_VIRTUAL_DISK_PARAMETERS

.enum CREATE_VIRTUAL_DISK_FLAG {
	CREATE_VIRTUAL_DISK_FLAG_NONE,
	CREATE_VIRTUAL_DISK_FLAG_FULL_PHYSICAL_ALLOCATION,
	CREATE_VIRTUAL_DISK_FLAG_PREVENT_WRITES_TO_SOURCE_DISK,
	CREATE_VIRTUAL_DISK_FLAG_DO_NOT_COPY_METADATA_FROM_PARENT	= 0x4,
	CREATE_VIRTUAL_DISK_FLAG_CREATE_BACKING_STORAGE			= 0x8,
	CREATE_VIRTUAL_DISK_FLAG_USE_CHANGE_TRACKING_SOURCE_LIMIT	= 0x10,
	CREATE_VIRTUAL_DISK_FLAG_PRESERVE_PARENT_CHANGE_TRACKING_STATE	= 0x20,
	CREATE_VIRTUAL_DISK_FLAG_VHD_SET_USE_ORIGINAL_BACKING_STORAGE	= 0x40,
	CREATE_VIRTUAL_DISK_FLAG_SPARSE_FILE				= 0x80,
	CREATE_VIRTUAL_DISK_FLAG_PMEM_COMPATIBLE			= 0x100,
	CREATE_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES		= 0x200,
	CREATE_VIRTUAL_DISK_FLAG_SUPPORT_SPARSE_FILES_ANY_FS		= 0x400
	}

CreateVirtualDisk proto WINAPI :PVIRTUAL_STORAGE_TYPE, :PCWSTR, :VIRTUAL_DISK_ACCESS_MASK, :PSECURITY_DESCRIPTOR, :CREATE_VIRTUAL_DISK_FLAG, :ULONG, :PCREATE_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED, :PHANDLE

.enum ATTACH_VIRTUAL_DISK_VERSION {
	ATTACH_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	ATTACH_VIRTUAL_DISK_VERSION_1,
	ATTACH_VIRTUAL_DISK_VERSION_2
	}

ATTACH_VIRTUAL_DISK_PARAMETERS struct
Version			ATTACH_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  Reserved		ULONG ?
 ends
 struct Version2
  RestrictedOffset	ULONGLONG ?
  RestrictedLength	ULONGLONG ?
 ends
ends
ATTACH_VIRTUAL_DISK_PARAMETERS ends
PATTACH_VIRTUAL_DISK_PARAMETERS typedef ptr ATTACH_VIRTUAL_DISK_PARAMETERS

.enum ATTACH_VIRTUAL_DISK_FLAG {
	ATTACH_VIRTUAL_DISK_FLAG_NONE,
	ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY,
	ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER,
	ATTACH_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME			= 0x4,
	ATTACH_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST				= 0x8,
	ATTACH_VIRTUAL_DISK_FLAG_NO_SECURITY_DESCRIPTOR			= 0x10,
	ATTACH_VIRTUAL_DISK_FLAG_BYPASS_DEFAULT_ENCRYPTION_POLICY	= 0x20,
	ATTACH_VIRTUAL_DISK_FLAG_NON_PNP				= 0x40,
	ATTACH_VIRTUAL_DISK_FLAG_RESTRICTED_RANGE			= 0x80,
	ATTACH_VIRTUAL_DISK_FLAG_SINGLE_PARTITION			= 0x100,
	ATTACH_VIRTUAL_DISK_FLAG_REGISTER_VOLUME			= 0x200
	}

AttachVirtualDisk proto WINAPI :HANDLE, :PSECURITY_DESCRIPTOR, :ATTACH_VIRTUAL_DISK_FLAG, :ULONG, :PATTACH_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED

.enum DETACH_VIRTUAL_DISK_FLAG {
	DETACH_VIRTUAL_DISK_FLAG_NONE
	}

DetachVirtualDisk proto WINAPI :HANDLE, :DETACH_VIRTUAL_DISK_FLAG, :ULONG

GetVirtualDiskPhysicalPath proto WINAPI :HANDLE, :PULONG, :PWSTR

GetAllAttachedVirtualDiskPhysicalPaths proto WINAPI :PULONG, :PWSTR

.enum DEPENDENT_DISK_FLAG {
	DEPENDENT_DISK_FLAG_NONE			= 0,
	DEPENDENT_DISK_FLAG_MULT_BACKING_FILES		= 0x1,
	DEPENDENT_DISK_FLAG_FULLY_ALLOCATED		= 0x2,
	DEPENDENT_DISK_FLAG_READ_ONLY			= 0x4,
	DEPENDENT_DISK_FLAG_REMOTE			= 0x8,
	DEPENDENT_DISK_FLAG_SYSTEM_VOLUME		= 0x10,
	DEPENDENT_DISK_FLAG_SYSTEM_VOLUME_PARENT	= 0x20,
	DEPENDENT_DISK_FLAG_REMOVABLE			= 0x40,
	DEPENDENT_DISK_FLAG_NO_DRIVE_LETTER		= 0x80,
	DEPENDENT_DISK_FLAG_PARENT			= 0x100,
	DEPENDENT_DISK_FLAG_NO_HOST_DISK		= 0x200,
	DEPENDENT_DISK_FLAG_PERMANENT_LIFETIME		= 0x400,
	DEPENDENT_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES	= 0x800,
	DEPENDENT_DISK_FLAG_ALWAYS_ALLOW_SPARSE		= 0x1000,
	DEPENDENT_DISK_FLAG_SUPPORT_ENCRYPTED_FILES	= 0x2000
	}

.enum STORAGE_DEPENDENCY_INFO_VERSION {
	STORAGE_DEPENDENCY_INFO_VERSION_UNSPECIFIED,
	STORAGE_DEPENDENCY_INFO_VERSION_1,
	STORAGE_DEPENDENCY_INFO_VERSION_2
	}

STORAGE_DEPENDENCY_INFO_TYPE_1 struct
DependencyTypeFlags	DEPENDENT_DISK_FLAG ?
ProviderSpecificFlags	ULONG ?
VirtualStorageType	VIRTUAL_STORAGE_TYPE ?
STORAGE_DEPENDENCY_INFO_TYPE_1 ends
PSTORAGE_DEPENDENCY_INFO_TYPE_1 typedef ptr STORAGE_DEPENDENCY_INFO_TYPE_1

STORAGE_DEPENDENCY_INFO_TYPE_2 struct
DependencyTypeFlags	DEPENDENT_DISK_FLAG ?
ProviderSpecificFlags	ULONG ?
VirtualStorageType	VIRTUAL_STORAGE_TYPE ?
AncestorLevel		ULONG ?
DependencyDeviceName	PWSTR ?
HostVolumeName		PWSTR ?
DependentVolumeName	PWSTR ?
DependentVolumeRelativePath PWSTR ?
STORAGE_DEPENDENCY_INFO_TYPE_2 ends
PSTORAGE_DEPENDENCY_INFO_TYPE_2 typedef ptr STORAGE_DEPENDENCY_INFO_TYPE_2

STORAGE_DEPENDENCY_INFO struct
Version			STORAGE_DEPENDENCY_INFO_VERSION ?
NumberEntries		ULONG ?
union
 Version1Entries	STORAGE_DEPENDENCY_INFO_TYPE_1 1 dup(?)
 Version2Entries	STORAGE_DEPENDENCY_INFO_TYPE_2 1 dup(?)
ends
STORAGE_DEPENDENCY_INFO ends
PSTORAGE_DEPENDENCY_INFO typedef ptr STORAGE_DEPENDENCY_INFO

.enum GET_STORAGE_DEPENDENCY_FLAG {
	GET_STORAGE_DEPENDENCY_FLAG_NONE,
	GET_STORAGE_DEPENDENCY_FLAG_HOST_VOLUMES,
	GET_STORAGE_DEPENDENCY_FLAG_DISK_HANDLE
	}

GetStorageDependencyInformation proto WINAPI :HANDLE, :GET_STORAGE_DEPENDENCY_FLAG, :ULONG, :PSTORAGE_DEPENDENCY_INFO, :PULONG

.enum GET_VIRTUAL_DISK_INFO_VERSION {
	GET_VIRTUAL_DISK_INFO_UNSPECIFIED,
	GET_VIRTUAL_DISK_INFO_SIZE,
	GET_VIRTUAL_DISK_INFO_IDENTIFIER,
	GET_VIRTUAL_DISK_INFO_PARENT_LOCATION,
	GET_VIRTUAL_DISK_INFO_PARENT_IDENTIFIER,
	GET_VIRTUAL_DISK_INFO_PARENT_TIMESTAMP,
	GET_VIRTUAL_DISK_INFO_VIRTUAL_STORAGE_TYPE,
	GET_VIRTUAL_DISK_INFO_PROVIDER_SUBTYPE,
	GET_VIRTUAL_DISK_INFO_IS_4K_ALIGNED,
	GET_VIRTUAL_DISK_INFO_PHYSICAL_DISK,
	GET_VIRTUAL_DISK_INFO_VHD_PHYSICAL_SECTOR_SIZE,
	GET_VIRTUAL_DISK_INFO_SMALLEST_SAFE_VIRTUAL_SIZE,
	GET_VIRTUAL_DISK_INFO_FRAGMENTATION,
	GET_VIRTUAL_DISK_INFO_IS_LOADED,
	GET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID,
	GET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE
	}

GET_VIRTUAL_DISK_INFO	struct
Version			GET_VIRTUAL_DISK_INFO_VERSION ?
union
 struct Size
  VirtualSize		ULONGLONG ?
  PhysicalSize		ULONGLONG ?
  BlockSize		ULONG ?
  SectorSize		ULONG ?
 ends
 Identifier		GUID <>
 struct ParentLocation
  ParentResolved	BOOL ?
  ParentLocationBuffer	WCHAR 1 dup(?)
 ends
 ParentIdentifier	GUID <>
 ParentTimestamp	ULONG ?
 VirtualStorageType	VIRTUAL_STORAGE_TYPE ?
 ProviderSubtype	ULONG ?
 Is4kAligned		BOOL ?
 IsLoaded		BOOL ?
 struct PhysicalDisk
  LogicalSectorSize	ULONG ?
  PhysicalSectorSize	ULONG ?
  IsRemote		BOOL ?
 ends
 VhdPhysicalSectorSize	ULONG ?
 SmallestSafeVirtualSize ULONGLONG ?
 FragmentationPercentage ULONG ?
 VirtualDiskId		GUID <>
 struct ChangeTrackingState
  Enabled		BOOL ?
  NewerChanges		BOOL ?
  MostRecentId		WCHAR 1 dup(?)
 ends
ends
GET_VIRTUAL_DISK_INFO	ends
PGET_VIRTUAL_DISK_INFO	typedef ptr GET_VIRTUAL_DISK_INFO

GetVirtualDiskInformation proto WINAPI :HANDLE, :PULONG, :PGET_VIRTUAL_DISK_INFO, :PULONG

.enum SET_VIRTUAL_DISK_INFO_VERSION {
	SET_VIRTUAL_DISK_INFO_UNSPECIFIED,
	SET_VIRTUAL_DISK_INFO_PARENT_PATH,
	SET_VIRTUAL_DISK_INFO_IDENTIFIER,
	SET_VIRTUAL_DISK_INFO_PARENT_PATH_WITH_DEPTH,
	SET_VIRTUAL_DISK_INFO_PHYSICAL_SECTOR_SIZE,
	SET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID,
	SET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE,
	SET_VIRTUAL_DISK_INFO_PARENT_LOCATOR
	}

SET_VIRTUAL_DISK_INFO	struct
Version			SET_VIRTUAL_DISK_INFO_VERSION ?
union
 ParentFilePath		PCWSTR ?
 UniqueIdentifier	GUID <>
 struct ParentPathWithDepthInfo
  ChildDepth		ULONG ?
  ParentFilePath	 PCWSTR ?
 ends
 VhdPhysicalSectorSize	ULONG ?
 VirtualDiskId		GUID <>
 ChangeTrackingEnabled	BOOL ?
 struct ParentLocator
  LinkageId		GUID <>
  ParentFilePath	PCWSTR ?
 ends
ends
SET_VIRTUAL_DISK_INFO	ends
PSET_VIRTUAL_DISK_INFO	typedef ptr SET_VIRTUAL_DISK_INFO

SetVirtualDiskInformation proto WINAPI :HANDLE, :PSET_VIRTUAL_DISK_INFO
EnumerateVirtualDiskMetadata proto WINAPI :HANDLE, :PULONG, :ptr
GetVirtualDiskMetadata proto WINAPI :HANDLE, :ptr, :PULONG, :PVOID
SetVirtualDiskMetadata proto WINAPI :HANDLE, :ptr, :ULONG, :ptr
DeleteVirtualDiskMetadata proto WINAPI :HANDLE, :ptr

VIRTUAL_DISK_PROGRESS	struct
OperationStatus		DWORD ?
CurrentValue		ULONGLONG ?
CompletionValue		ULONGLONG ?
VIRTUAL_DISK_PROGRESS	ends
PVIRTUAL_DISK_PROGRESS	typedef ptr VIRTUAL_DISK_PROGRESS

GetVirtualDiskOperationProgress proto WINAPI :HANDLE, :LPOVERLAPPED, :PVIRTUAL_DISK_PROGRESS

.enum COMPACT_VIRTUAL_DISK_VERSION {
	COMPACT_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	COMPACT_VIRTUAL_DISK_VERSION_1
	}

COMPACT_VIRTUAL_DISK_PARAMETERS struct
Version			COMPACT_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  Reserved		ULONG ?
 ends
ends
COMPACT_VIRTUAL_DISK_PARAMETERS ends
PCOMPACT_VIRTUAL_DISK_PARAMETERS typedef ptr COMPACT_VIRTUAL_DISK_PARAMETERS

.enum COMPACT_VIRTUAL_DISK_FLAG {
	COMPACT_VIRTUAL_DISK_FLAG_NONE,
	COMPACT_VIRTUAL_DISK_FLAG_NO_ZERO_SCAN,
	COMPACT_VIRTUAL_DISK_FLAG_NO_BLOCK_MOVES
	}

CompactVirtualDisk proto WINAPI :HANDLE, :COMPACT_VIRTUAL_DISK_FLAG, :PCOMPACT_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED

.enum MERGE_VIRTUAL_DISK_VERSION {
	MERGE_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	MERGE_VIRTUAL_DISK_VERSION_1,
	MERGE_VIRTUAL_DISK_VERSION_2
	}

MERGE_VIRTUAL_DISK_PARAMETERS struct
Version			MERGE_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  MergeDepth		ULONG ?
 ends
 struct Version2
  MergeSourceDepth	ULONG ?
  MergeTargetDepth	ULONG ?
 ends
ends
MERGE_VIRTUAL_DISK_PARAMETERS ends
PMERGE_VIRTUAL_DISK_PARAMETERS typedef ptr MERGE_VIRTUAL_DISK_PARAMETERS

.enum MERGE_VIRTUAL_DISK_FLAG {
	MERGE_VIRTUAL_DISK_FLAG_NONE
	}

MergeVirtualDisk proto WINAPI :HANDLE, :MERGE_VIRTUAL_DISK_FLAG, :PMERGE_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED

.enum EXPAND_VIRTUAL_DISK_VERSION {
	EXPAND_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	EXPAND_VIRTUAL_DISK_VERSION_1
	}

EXPAND_VIRTUAL_DISK_PARAMETERS struct
Version			EXPAND_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  NewSize		ULONGLONG ?
 ends
ends
EXPAND_VIRTUAL_DISK_PARAMETERS ends
EXPAND_VIRTUAL_DISK_PARAMETERS typedef _EXPAND_VIRTUAL_DISK_PARAMETERS

PEXPAND_VIRTUAL_DISK_PARAMETERS typedef ptr _EXPAND_VIRTUAL_DISK_PARAMETERS

.enum EXPAND_VIRTUAL_DISK_FLAG {
	EXPAND_VIRTUAL_DISK_FLAG_NONE,
	EXPAND_VIRTUAL_DISK_FLAG_NOTIFY_CHANGE
	}

ExpandVirtualDisk proto WINAPI :HANDLE, :EXPAND_VIRTUAL_DISK_FLAG, :PEXPAND_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED

.enum RESIZE_VIRTUAL_DISK_VERSION {
	RESIZE_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	RESIZE_VIRTUAL_DISK_VERSION_1
	}

RESIZE_VIRTUAL_DISK_PARAMETERS struct
Version			RESIZE_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  NewSize		ULONGLONG ?
 ends
ends
RESIZE_VIRTUAL_DISK_PARAMETERS ends
PRESIZE_VIRTUAL_DISK_PARAMETERS typedef ptr RESIZE_VIRTUAL_DISK_PARAMETERS

.enum RESIZE_VIRTUAL_DISK_FLAG {
	RESIZE_VIRTUAL_DISK_FLAG_NONE,
	RESIZE_VIRTUAL_DISK_FLAG_ALLOW_UNSAFE_VIRTUAL_SIZE,
	RESIZE_VIRTUAL_DISK_FLAG_RESIZE_TO_SMALLEST_SAFE_VIRTUAL_SIZE
	}

ResizeVirtualDisk proto WINAPI :HANDLE, :RESIZE_VIRTUAL_DISK_FLAG, :PRESIZE_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED

.enum MIRROR_VIRTUAL_DISK_VERSION {
	MIRROR_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	MIRROR_VIRTUAL_DISK_VERSION_1
	}

MIRROR_VIRTUAL_DISK_PARAMETERS struct
Version			MIRROR_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  MirrorVirtualDiskPath PCWSTR ?
 ends
ends
MIRROR_VIRTUAL_DISK_PARAMETERS ends
PMIRROR_VIRTUAL_DISK_PARAMETERS typedef ptr MIRROR_VIRTUAL_DISK_PARAMETERS

.enum MIRROR_VIRTUAL_DISK_FLAG {
	MIRROR_VIRTUAL_DISK_FLAG_NONE,
	MIRROR_VIRTUAL_DISK_FLAG_EXISTING_FILE,
	MIRROR_VIRTUAL_DISK_FLAG_SKIP_MIRROR_ACTIVATION,
	MIRROR_VIRTUAL_DISK_FLAG_ENABLE_SMB_COMPRESSION = 0x4,
	MIRROR_VIRTUAL_DISK_FLAG_IS_LIVE_MIGRATION	= 0x8
	}

MirrorVirtualDisk proto WINAPI :HANDLE, :MIRROR_VIRTUAL_DISK_FLAG, :PMIRROR_VIRTUAL_DISK_PARAMETERS, :LPOVERLAPPED
BreakMirrorVirtualDisk proto WINAPI :HANDLE
AddVirtualDiskParent proto WINAPI :HANDLE, :PCWSTR

QUERY_CHANGES_VIRTUAL_DISK_RANGE struct
ByteOffset		ULONG64 ?
ByteLength		ULONG64 ?
Reserved		ULONG64 ?
QUERY_CHANGES_VIRTUAL_DISK_RANGE ends
PQUERY_CHANGES_VIRTUAL_DISK_RANGE typedef ptr QUERY_CHANGES_VIRTUAL_DISK_RANGE

.enum QUERY_CHANGES_VIRTUAL_DISK_FLAG {
	QUERY_CHANGES_VIRTUAL_DISK_FLAG_NONE
	}

.enum TAKE_SNAPSHOT_VHDSET_FLAG {
	TAKE_SNAPSHOT_VHDSET_FLAG_NONE,
	TAKE_SNAPSHOT_VHDSET_FLAG_WRITEABLE
	}

PTAKE_SNAPSHOT_VHDSET_FLAG typedef ptr TAKE_SNAPSHOT_VHDSET_FLAG

.enum TAKE_SNAPSHOT_VHDSET_VERSION {
	TAKE_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED,
	TAKE_SNAPSHOT_VHDSET_VERSION_1
	}

TAKE_SNAPSHOT_VHDSET_PARAMETERS struct
Version			TAKE_SNAPSHOT_VHDSET_VERSION ?
union
 struct Version1
  SnapshotId		GUID <>
ends
ends
TAKE_SNAPSHOT_VHDSET_PARAMETERS ends
PTAKE_SNAPSHOT_VHDSET_PARAMETERS typedef ptr TAKE_SNAPSHOT_VHDSET_PARAMETERS

.enum DELETE_SNAPSHOT_VHDSET_FLAG {
	DELETE_SNAPSHOT_VHDSET_FLAG_NONE,
	DELETE_SNAPSHOT_VHDSET_FLAG_PERSIST_RCT
	}

PDELETE_SNAPSHOT_VHDSET_FLAG typedef ptr DELETE_SNAPSHOT_VHDSET_FLAG

.enum DELETE_SNAPSHOT_VHDSET_VERSION {
	DELETE_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED,
	DELETE_SNAPSHOT_VHDSET_VERSION_1
	}

DELETE_SNAPSHOT_VHDSET_PARAMETERS struct
Version			DELETE_SNAPSHOT_VHDSET_VERSION ?
union
 struct Version1
  SnapshotId		GUID <>
 ends
ends
DELETE_SNAPSHOT_VHDSET_PARAMETERS ends
PDELETE_SNAPSHOT_VHDSET_PARAMETERS typedef ptr DELETE_SNAPSHOT_VHDSET_PARAMETERS

.enum MODIFY_VHDSET_VERSION {
	MODIFY_VHDSET_UNSPECIFIED,
	MODIFY_VHDSET_SNAPSHOT_PATH,
	MODIFY_VHDSET_REMOVE_SNAPSHOT,
	MODIFY_VHDSET_DEFAULT_SNAPSHOT_PATH
	}

PMODIFY_VHDSET_VERSION typedef ptr MODIFY_VHDSET_VERSION

.enum MODIFY_VHDSET_FLAG {
	MODIFY_VHDSET_FLAG_NONE,
	MODIFY_VHDSET_FLAG_WRITEABLE_SNAPSHOT
	}

PMODIFY_VHDSET_FLAG typedef ptr MODIFY_VHDSET_FLAG

MODIFY_VHDSET_PARAMETERS struct
Version			MODIFY_VHDSET_VERSION ?
union
 struct SnapshotPath
  SnapshotId		GUID <>
  SnapshotFilePath	PCWSTR ?
 ends
 SnapshotId		GUID <>
 DefaultFilePath	PCWSTR ?
ends
MODIFY_VHDSET_PARAMETERS ends
PMODIFY_VHDSET_PARAMETERS typedef ptr MODIFY_VHDSET_PARAMETERS

.enum APPLY_SNAPSHOT_VHDSET_FLAG {
	APPLY_SNAPSHOT_VHDSET_FLAG_NONE,
	APPLY_SNAPSHOT_VHDSET_FLAG_WRITEABLE
	}

PAPPLY_SNAPSHOT_VHDSET_FLAG typedef ptr APPLY_SNAPSHOT_VHDSET_FLAG

.enum APPLY_SNAPSHOT_VHDSET_VERSION {
	APPLY_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED,
	APPLY_SNAPSHOT_VHDSET_VERSION_1
	}

APPLY_SNAPSHOT_VHDSET_PARAMETERS struct
Version			APPLY_SNAPSHOT_VHDSET_VERSION ?
union
 struct Version1
  SnapshotId		GUID <>
  LeafSnapshotId	GUID <>
 ends
ends
APPLY_SNAPSHOT_VHDSET_PARAMETERS ends
PAPPLY_SNAPSHOT_VHDSET_PARAMETERS typedef ptr APPLY_SNAPSHOT_VHDSET_PARAMETERS

.enum RAW_SCSI_VIRTUAL_DISK_FLAG {
	RAW_SCSI_VIRTUAL_DISK_FLAG_NONE
	}

PRAW_SCSI_VIRTUAL_DISK_FLAG typedef ptr RAW_SCSI_VIRTUAL_DISK_FLAG

.enum RAW_SCSI_VIRTUAL_DISK_VERSION {
	RAW_SCSI_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	RAW_SCSI_VIRTUAL_DISK_VERSION_1
	}

RAW_SCSI_VIRTUAL_DISK_PARAMETERS struct
Version			RAW_SCSI_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  RSVDHandle		BOOL ?
  DataIn		UCHAR ?
  CdbLength		UCHAR ?
  SenseInfoLength	UCHAR ?
  SrbFlags		ULONG ?
  DataTransferLength	ULONG ?
  DataBuffer		PVOID ?
  SenseInfo		ptr UCHAR ?
  Cdb			ptr UCHAR ?
 ends
ends
RAW_SCSI_VIRTUAL_DISK_PARAMETERS ends
PRAW_SCSI_VIRTUAL_DISK_PARAMETERS typedef ptr RAW_SCSI_VIRTUAL_DISK_PARAMETERS

RAW_SCSI_VIRTUAL_DISK_RESPONSE struct
Version			RAW_SCSI_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  ScsiStatus		UCHAR ?
  SenseInfoLength	UCHAR ?
  DataTransferLength	ULONG ?
 ends
ends
RAW_SCSI_VIRTUAL_DISK_RESPONSE ends
PRAW_SCSI_VIRTUAL_DISK_RESPONSE typedef ptr RAW_SCSI_VIRTUAL_DISK_RESPONSE

QueryChangesVirtualDisk proto WINAPI :HANDLE, :PCWSTR, :ULONG64, :ULONG64, :QUERY_CHANGES_VIRTUAL_DISK_FLAG, :PQUERY_CHANGES_VIRTUAL_DISK_RANGE, :PULONG, :PULONG64
TakeSnapshotVhdSet proto WINAPI :HANDLE, :PTAKE_SNAPSHOT_VHDSET_PARAMETERS, :TAKE_SNAPSHOT_VHDSET_FLAG
DeleteSnapshotVhdSet proto WINAPI :HANDLE, :PDELETE_SNAPSHOT_VHDSET_PARAMETERS, :DELETE_SNAPSHOT_VHDSET_FLAG
ModifyVhdSet proto WINAPI :HANDLE, :PMODIFY_VHDSET_PARAMETERS, :MODIFY_VHDSET_FLAG
ApplySnapshotVhdSet proto WINAPI :HANDLE, :PAPPLY_SNAPSHOT_VHDSET_PARAMETERS, :APPLY_SNAPSHOT_VHDSET_FLAG
RawSCSIVirtualDisk proto WINAPI :HANDLE, :PRAW_SCSI_VIRTUAL_DISK_PARAMETERS, :RAW_SCSI_VIRTUAL_DISK_FLAG, :PRAW_SCSI_VIRTUAL_DISK_RESPONSE

.enum FORK_VIRTUAL_DISK_VERSION {
	FORK_VIRTUAL_DISK_VERSION_UNSPECIFIED,
	FORK_VIRTUAL_DISK_VERSION_1
	}

FORK_VIRTUAL_DISK_PARAMETERS struct
Version			FORK_VIRTUAL_DISK_VERSION ?
union
 struct Version1
  ForkedVirtualDiskPath PCWSTR ?
ends
ends
FORK_VIRTUAL_DISK_PARAMETERS ends
PFORK_VIRTUAL_DISK_PARAMETERS typedef ptr FORK_VIRTUAL_DISK_PARAMETERS

.enum FORK_VIRTUAL_DISK_FLAG {
	FORK_VIRTUAL_DISK_FLAG_NONE,
	FORK_VIRTUAL_DISK_FLAG_EXISTING_FILE
	}

ForkVirtualDisk proto WINAPI :HANDLE, :FORK_VIRTUAL_DISK_FLAG, :ptr, :LPOVERLAPPED
CompleteForkVirtualDisk proto WINAPI :HANDLE

.enum SURFACE_VIRTUAL_DISK_FLAG {
	SURFACE_VIRTUAL_DISK_FLAG_NONE,
	SURFACE_VIRTUAL_DISK_FLAG_READ_ONLY,
	SURFACE_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER,
	SURFACE_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME		= 0x4,
	SURFACE_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST			= 0x8,
	SURFACE_VIRTUAL_DISK_FLAG_NO_SECURITY_DESCRIPTOR	= 0x10
	}

.enum UNSURFACE_VIRTUAL_DISK_FLAG {
	UNSURFACE_VIRTUAL_DISK_FLAG_NONE
	}

else
include virtdisk.inc
endif
endif
endif

endif
