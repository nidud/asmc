HISTORY.TXT--
Change Log File for ASMC
========================

Changes in 2.37 - xx xxx 2025
- fixed forward referenced symbols in codeview - name struct { next ptr name ? }
- added support for 64-bit C-type RECORD fields
- added WIDTHOF
- added [X]OR/TEST and MOV mem,reg to C-type RECORD fields - see record6.asm
- added more debug support for anonymous STRUCT/UNION/RECORD
- added MOV/CMP to C-type RECORD fields - see record5.asm
- added prefix VEX, VEX2, VEX3, EXEX, XACQUIRE, and XRELEASE
- removed switch -sysvregs
- added switch -Gw -- Watcom calling conventions
- added switch	-Fe<file> -- Name executable
- fixed bug in debug info for included files
- fixed bug in option avxencoding -- scope was global
- added operator BCST -- Masm style "embedded broadcast"
- added SHA instructions
- added update for -Z7 (full symbolic debug info)
  - undefined symbol from <void **> to <char **>
  - typedef in struct from <void **> to <type *> if defined

Changes in 2.36 - 15 Oct 2024
- added .pragma wstring
- added __ImageBase to -pe
- added options -pec, -peg, -ped, and -link [link_options]
- removed options -gui and -cui
- added options -Bl <linker> -- Selects an alternate <linker>
- removed _LINUX --> use __UNIX__ and _WIN64
- activated option -c

Changes in 2.35 - 6 Jul 2024
- added separate list section for -Sf
- fixed bug in listing output
- @Date symbol (back) to MM/DD/YY
- fixed name conflict with register param and stuct members
- added sqrt operator
- fixed bug in __FILE__ macro
- added switch -dotn[name]
- added Octal escape sequence
- added option dotnamex:<on|off>
- added stack params for 64-bit SYSCALL
- removed switches -pf, -swc, -swn, -swr, -swt
- added directive LDR - Load Register param
- added switch -Z7 - Add full symbolic debug info (-Zi8)
- fixed bug(s) in debug info - struct members > 0x8000 failed
- fixed bug in string input - "\\\"" failed
- fixed bug in dynamic line size extension
- added extension * to -Fo when wildcard used: -Fo _*_ will output _name_ files
- added alignment for Unicode strings
- added "quotes" to .pragma comment(lib, "lib-2.0")
- removed -? from Linux and added --help (@piglu)
- added switch -sysvregs : skip RDI and RSI in USES
- added macro @REG8, @REG16, and @REG32(reg)
- fixed bug in Unicode "strings" in struct
- chanded linkw.lnk to linkw.cfg and LINKW_LNK to LINKW_CFG
- added switch -MD[d] and -MT[d]
- added optimization for TEST mem,imm
- changed @REGnn macros to @Reg(reg[,bits]), bits: 8, 16, 32 (default), and 64
- changed @Reg(reg[,bits]) to @Reg(reg[,size]), size: 1, 2, 4 (default), and 8
- fixed alignment bug in RECORD
- removed switch -Znk, .pragma asmc
- removed directive .name, .page, .subtitle, .subttl, .title, .low, .high,
	.size, .length, .this, .mask, and .width
- added swtich -idd and -iddt -- Assemble source as binary data / text
- added operator LOWBYTE, HIGHBYTE, MASKOF
- added option AVXENCODING
- added instructions: VPDPBUSD, VPDPBUSDS, VPDPWSSD, VPDPWSSDS, RDPKRU,
	WRPKRU, STUI, HRESET, CLUI, SENDUIPI, TESTUI, UIRET
- added .pragma aux - to customize a Register Calling Convention
- added ASMCALL - User defined calling convention
- added SOWORD - signed 128-bit integer

Changes in 2.34 - 19 Jun 2022
- added __FILE__, __LINE__, and __func__ macros
- fixed bug in CodeView 8 (/zi8) for files without code
- added unwind information (/frame) to /pe 64-bit
- added switch -Gs -- Use System V calling convention
- added switch -endbr -- Insert ENDBR instruction at function entry
- added endbr32 and endbr64 instructions
- added switch -fpic and -fno-pic
- changed .obj to .o for /elf[64]
- fixed bug in relocation for /elf64 -- @Hello71
- added directive .namespace and .endn

Changes in 2.33 - 10 Sep 2021
- added option float:<4|8>
- added option floatformat:<x>
- added option linesize:<value>
- added option floatdigits:<value>
- added option floatformat:<e|f|g>
- added directive .ENUMT [ <name> ] [ : <type> ] [ { ]
- added OPTION FRAME: ALL
- added switch /frame -- Auto generate unwind information
- added DEFINE directive
- added warning on use of Masm spesific keywords
- added directive .inline
- changed typeid() format
- added struct assignment to .new name:type = {1,2,...}
- added clear to .new name:type = {0}
- removed typedefs for CLASS/COMDEF
- added PTR to STRUCT and data types
- added __UNIX__ define for /elf[64]
- added CodeView 5 and 8 -- /Zi5 /zi8 (experimental)
- added assignment to .new name:type = value
- added multiple lines to .pragma comment(linker, ...)
- added .pragma comment(linker, "/<link_option>")

Changes in 2.32 - 11 Nov 2020
- added directive .static
- changed inline proto anonymous arguments
  - "this" removed: only used in inline class methods
  - name used if provided: [proto a:byte, :word] --> [macro a, _2]
- added binary operators ADD, SUB, MUL, DIV for 128-bit
- added 128-bit for MOD, NOT, SAL, SHL, SAR, SHR, AND, OR, XOR
- added floats as binary operators for GT,LT,EQ,NE,LE,GE
- added SAL and SAR as binary operators
- added switch /arch:AVX[2|512]
- added inline macro typeid( [id,] expression )
- added more support for 32-bit watcall
  - removed mov reg,reg if equal
  - changed mov reg,0 to xor
  - allow inline function calls
- fixed bug in MS fastcall 32: wrong RET n value
- added VARARG handling to inline functions
- added ADDR prefix to typeof(ADDR p)
- added imm vector(16) assignment and return
- added imm float to DATA for INVOKE to REAL4/8
- added imm float assignment and return
- fixed bug in watcall invoke for QWORD
- fixed bug in -zf1 and -zf0 switch
- added directives .elseifs, .elseifd, and .elseifsd
- added directive .operator
- added ABS as args to INVOKE - immediate value
- added YWORD and ZWORD as args to INVOKE
- added directive .template
- fixed delayed expansion of macro error
- fixed bug in mov dword ptr [reg], foo() / mov [reg].RECT.left, foo()
- fixed bug in SystemV -- stack not correct if > 8 xmm registers used.
- fixed bug in .for ... .endw
- fixed bug in vmovq r64,xmm
- fixed bug in SystemV -- missing invoke errors..
- added inline class members -- macros
- updated 16-bit source - removed SIZE (/Zne)
- fixed bug in public class - publics not added in base was empty..
- fixed bug in syscall 64-bit - :vararg-stack error
- fixed bug in .class <name> <arg>:<type> - error if arg used..

Changes in 2.30 - 3 Des 2019
- added @Cstr( n ) - get prev string labels
- added _STDCALL_SUPPORTED to switch /Gz
- added [: public class] to .class and .comdef
- fixed bug in clearing the input source stack (include files)
- fixed bug in zmm[n] registers (AVX-512)
- fixed bug in indirect addressing (AVX-512)
- fixed invalid command-line option error
- fixed .return(&address) .if ...
- fixed bug in .new directive - local size not reset for each pass.
- added address operator [&] for .return, .if, and memory operands.
- added directive .ENUM [ <name> ] [ : <type> ] [ { ]
- added switch /Znk - Disable non Masm keywords
- added directive .RETURN [ value ] [ .IF ... ]
- added .CASE [[ <label_name> ]] -- naming a case label
- added ADC and SBB to mem,mem
- added .gotosw(n:label) -- removed .gotosw[1|2|3]
- added switch /nolib - ignore includelib directive
- added directive .NEW
- added reg(...) invocation
- added [MOV|ADD|SUB|OR|XOR|AND|CMP|TEST] mem,mem
- renamed .SWITCH NOTEST to .SWITCH JMP
- renamed .CLASSDEF to .CLASS
- removed .UNTILAXZ, .UNTILDXZ, .UNTILBXZ
- added .pragma asmc(push/pop)
- removed switch /Xc
- removed option asmc
- renamed C to CCALL
- renamed TYPE to TYPEOF
- renamed SIZE, LENGTH, HIGH, LOW, THIS, and WIDTH to dot names
- renamed directive NAME, TITLE, PAGE, SUBTITLE, and SUBTTL to dot names
- changed invoke for 64-bit fastcall and vectorcall - args loaded right to left
- removed invoke error for mem-arg - foo([rsi])
- changed invoke arguments for 3,5,6,7 byte types
- fixed bug in invoke for 3 byte struct argument
- added switch /Ge - force stack checking for all funcs

Changes in 2.29 - 23 Mar 2019
- added .pragma warning(push)
- added .pragma warning(pop)
- added .pragma(warning(disable: <num>))
- added .pragma comment(lib, "name.lib"[, "name2.lib"])
- removed error "symbol not defined" from undef directive
- changed the @CStr() macro - use .const if in .data seg.
- fixed bug in define(...) macro
- added local names for calls to COM/CLASS members
- added MOVBE
- fixed .for ( [rdx+8]=rax :: )

Changes in 2.28 - 3 Oct 2018
- fixed bug bin.c - relative fixup error -- PE4.ASM
- added support for invoke(rdx::rax)
- added VEX-Encoded GPR Instructions
- added support for __int128 params in syscall (System V)
- fixed bug in .COMDEF -- directive error added in 2.28.01..
- added REAL2 in INVOKE as float for syscall, vectorcall, and fastcall
- added REAL2 - binary16 (half)
- fixed bug andpd, andnpd, xorpd, orpd -- m64 not accepted (HSE)
- added operator HIGH64 and LOW64
- fixed bug in System V :vararg
- added option cstack to System V
- fixed bug in System V epilogue -- uses registers error
- added xmm params for System V -- reg64[6] + reg128[8]
- added support for System V in .classdef
- added support for System V in Win-64
- added support for :vararg in System V (Linux)
- added optimization for 64-bit const args -- use 32-bit regs if possible

Changes in 2.27 - 31 Jul 2018
- added .switch [notest] [c|pascal] [...]
- removed option switch:notest
- fixed bug in .pragma(init(...))
- fixed bug in syscall 64-bit
- added asmc64
- removed .amd64 and .win64
- added fix for flags (ZERO? || CARRY?) in hll
- fixed bug in using double 0.0 as argument -- asin(0.0)
- allowed support for movq rax,xmm0
- added more support for 32-bit vectorcall
- added vector(16) return values (xmm0)
- fixed bug in float convertion routines
- fixed bug in vectorcall name mangling routines
- added a more portable implementation for class::member proc/proto
- added <if> [...] defined(__SYM__) [...]
- added command line option /stackalign
- added command line option /autostack
- added command line option /homeparams
- added command line option /Gv for vectorcall
- added vectorcall calling convention
- added .pragma(cref(push, <1|0>))
- added .pragma(cref(pop))
- added REAL16 as xmm parameter
- added <mov rdx,rax> after <mov rdx,p.Proc()> -- missing
- added support for .comdef and .classdef to syscall -- use EDI/RDI
- added RETM for optional Macro Return
- added .pragma(list(push, <1|0>))
- added .pragma(list(pop))
- added support for float const: (2.0 / (1.0 + 3.0))
- added .pragma(pack(push, <alignment>))
- added .pragma(pack(pop))
- added support for externdef pointer:ptr class
- added .COMDEF directive
- added mov reg,0 test for args - convert to xor reg,reg
- removed some unnecessary stack adjustments in 64-bit if LEAVE used
- added use of PROC in struct member declarations
- added .CLASSDEF directive
- added .ENDS directive
- added .PRAGMA directive
- fixed bug in .if[d|w|b] proc() & imm
- added support for Class::Method proto
- added support for Class::Method proc
- added support for Class::Method(...)
- added support for com_ptr[Vtbl].proc_ptr(...)
- added support for com_ptr.proc_ptr(...)
- added support for - assume reg:ptr struct -- [reg].proc_ptr(...)
- added support for [reg].struct.proc_ptr(...)
- added support for struct.proc_ptr(...)
- AVX-512 update

Changes in 2.26 - 27 Nov 2017
- added define __GUI__ if switch -gui used
- added define _UNICODE if switch -ws used
- added switch -assert -- same as .assert:on
- added public label::
- added {sae} {rn-sae} {ru-sae} {rd-sae} {rz-sae}
- added YWORD and ZWORD
- added {1ton} -- AVX512
- added ZMMWORD
- added mask registers k0..k7
- added {k1}{z} writemask for AVX512
- added switch -gui -- subsystem:windows for -pe
- added switch -cui -- subsystem:console for -pe (default)
- added combination of -pe -win64 switches
- added win64 longmode if model not set to -pe
- added win64 fastcall as default if missing model/lang
- added {evex} prefix
- added XMM16..31, YMM16..31, and ZMM registers
- added some changes to the 64-bit switch table
- added __PE__ = 1 to switch -pe
- fixed bug in label:opcode break -- missing line from list file
- fixed stack-fail by uncommitted stack usage..
- fixed bug in FindResWord() > 8 byte (symbol.asm)
- fixed bug in 64-bit rip-relative relocation

Changes in 2.25 - 21 Sep 2017
- fixed bug in 64-bit table-switch
- added UNDEF directive
- added quadruple precision to all float numbers
- fixed bug in list output -- zero
- added .ifc and .ifnc (same as .ifb/.ifnb)
- added const float params to C/STDCALL/PASCAL for REAL10/REAL16
- added REAL16 128-bit quad float
- added switch /pf - Preserve Flags (Epilogue/Invoke)
- fixed bug in float input (tbyte.asm)
- fixed bug in float input (LIBC)
- added [: RSP | RBP | ALIGN | ...] to option win64
- fixed bug in local offset - 64-bit/cstack
- fixed bug in EIP-related offsets in 64-bit
- fixed bug in error output - wrong filename if error in macro

Changes in 2.24 - 18 Jun 2017
- fixed bug in win64/elf64 :vararg [reg] argument
- added _LINUX and _WIN64 to switch -elf, -elf64, and -win64
  -elf	 define _LINUX = 1
  -elf64 define _LINUX = 2 + _WIN64 = 1
  -win64 define _WIN64 = 1
- added 64-bit version of SYSCALL (-elf64)
- fixed bug in switch /Fo <file> -- path removed..
- added C source and make files for Linux and win64
- added & as alias for ADDR in proc( &args )
- added option cstack to C calling convention (32-bit)
- added switch -Sp[n] Set segment alignment
- added auto detect UTF-8 header (BOM)
- added to @CStr() - skip .data/.code if already in .data segment
- added to @CStr() - skip return value if @CStr is first token
- fixed bug in codepage:64001 (UTF-8 translation)
- added switch /ws[[=]<codepage>] - default = CP_ACP (0)
- added option codepage:<value>
- fixed bug in label: .while ..
- fixed bug in operator SHR
- fixed sizeof(unicode string)
- fixed bug in [reg + type reg] and [reg + type(reg)]

Changes in 2.23 - 10 Apr 2017
- added .win64[: RSP | RBP | ALIGN | NOALIGN | SAVE | NOSAVE |
		 AUTO | NOAUTO | FRAME | NOFRAME]
- added .amd64 and .win64
- fixed bug in quoted file names -- "test".asm
- fixed bug in option:cstack + stackbase:esp
- added (L"Unicode") string macro
- added ("Multi" "Text" "Lines") for quoted strings
- added type check on function calls used as argument
- added convert reg = 0 --> xor reg,reg in .FOR loop
- added =&/=~ to .FOR <initialization> :: <increment/decrement>
- removed .BREAKxx and CONTxx
- removed .ENDCxx
- added .break(1..n) -- removed .break[1|2|3]
- added .continue(0..n) -- removed .cont[0|1|2|3]
- added ++/--/+=/-= to "initialization" of .FOR loop
- removed "if the first operand is a register" in .FOR loop
- fixed error in proto fastcall :type -- fast32.asm
- fixed switch /zlp -- renamed from /zip
- added assign option to the .for loop inc/dec section:
	.for eax = table: [eax].t_next: eax = [eax].t_next

Changes in 2.22 - 11 Feb 2017
- added .FOR[S] [<initialization>] : [<condition>] : [<increment/decrement>]
- added .GOTOSW[1|2|3] [[(<case_val>)] | [.IF <condition>]]
- added .CONT[1|2|3] and .BREAK[1|2|3]
- added .CONT0[1|2|3]
- added .ENDCxx
- added .UNTIL[SB|SW|SD]
- added .WHILE[SB|SW|SD]
- added .UNTIL[B|W|D]
- added .WHILE[B|W|D]
- added .UNTILAXZ, DX, and BX
- added switch /h and /? -- went missing..
- added .BREAKxx, CONTxx, UNTILxx, and WHILExx
- added .IFxx
	.IFA	- if Above
	.IFB	- if Below
	.IFG	- if Greater (signed)
	.IFL	- if Less (signed)
	.IFO	- if Overflow (signed)
	.IFP	- if Parity
	.IFS	- if Signed (signed)
	.IFZ	- if Zero
	.IFNA	- if Not Above
	.IFNB	- if Not Below
	.IFNG	- if Not Greater (signed)
	.IFNL	- if Not Less (signed)
	.IFNO	- if Not Overflow (signed)
	.IFNP	- if No Parity
	.IFNS	- if Not Signed (signed)
	.IFNZ	- if Not Zero
- added Signed compare: .IFS, .IFSB, .IFSW, .IFSB
- extended .IFB/.IFW to 32-bit, .IFB to 16-bit
- added use of proto typedefs in HLL
- fixed bug in switch -D, -I and -Fi used with -I"quoted text"
- added command line switch /ws - Create Unicode strings
- added OPTION WSTRING:[ON|OFF] - Toggle ASCII/Unicode
- disabled asmc-added HLL directives when switch /Xc used
  Note: OPTION ASMC:OFF do not disable these keywords
- fixed bug in .WHILE (eax || edx) && ecx
- fixed bug in .WHILE !(eax || edx) && ecx

Changes in 2.21 - 12 Oct 2016
- added .ASSERT directive
- added .IFD to down-size a 64-bit function call return -- .ifd api() == -1
- added .IFW and .IFB -- cmp ax/al, -1
- added .ASSERTD, .ASSERTW, and .ASSERTB
- added OPTION CSTACK (-Cs) to 64-bit
- added OPTION LOOPALIGN:0|1|2|4|8|16
- added OPTION CASEALIGN:0|1|2|4|8|16
- -pe dllimport:<dll> external proto <no args> (call) error
   call error A2014: cannot define as public or external : <name>
   invoke handle import prefix ([__imp_]<name>), call do not
   if <name>() is dll-import invoke will be used in HLL()
   - regress\src\pe\PE3.ASM
- set OPTION SWITCH:NOTABLE as default
- removed OPTION SWITCH:AUTO
- removed command line switch /swa - Sets jump-table creation to Auto in .SWITCH
- added command line switch /swr - use register [R|E]AX in .SWITCH code
- added OPTION SWITCH:REGAX - use register [R|E]AX in .SWITCH code
- added OPTION SWITCH:NOREGS - use stack in .SWITCH code (default)
- added OPTION SWITCH:NOTEST - skip range test in switch-table jump
- added byte index to switch (64-bit)
- added error A3022: .CASE redefinition : A(val) : B(val)
- fixed bug in environ -- %AsmcDir% accepted as %Asmc%
- fixed bug in inline macro @CStr()

Changes in 2.20 - 15 May 2016
- added OPTION SWITCH:[ C | PASCAL | AUTO | TABLE | NOTABLE ]
  The switch comes in two main types: a structured switch (Pascal) or an
  unstructured switch (C). The default type is unstructured.
  The AUTO, TABLE, and NOTABLE options control the jump-table creation in the
  switch. The default setting is AUTO.
- added command line switch /swa - Sets jump-table creation to Auto in .SWITCH
- added command line switch /swc - Emulate a C-switch with fall through
- added command line switch /swn - No jump-table creation in .SWITCH
- added command line switch /swp - Emulate a Pascal-switch
- added command line switch /swt - Force jump-table creation in .SWITCH
- added inline macro @CStr( string )
  Macro function that creates a string in the .DATA segment. The macro accepts
  C-escape characters in the string. Strings are added to a stack and reused if
  duplicated strings are found. The macro returns offset string.
  Example:
	mov eax,@CStr( "\tCreate a \"C\" string: %s%d\n" )
- changed macro @Date to yyyy-mm-dd

Changes in 2.19 - 7 Apr 2016
- CreateVariable() does not zero asym.value3264, if equate already exist.
  https://sourceforge.net/p/jwasm/bugs/303/
- fixed bug in _time() function -- day miscalculation
  after Feb the @Date macro failed: 04/05/16 --> 04/07/16

Changes in 2.18 - 3 Feb 2016
- corrected encodings for 4 AVX instructions:
  - vpermilpd xmm0, xmm1, 1
  - vpermilpd ymm0, ymm1, 1
  - vpermilps xmm0, xmm1, 1
  - vpermilps ymm0, ymm1, 1

Changes in 2.17 - 2 Feb 2016
- fixed command line switch -X -- used lower -x
- added command line switches -0..10[p] -- missing

Changes in 2.16 - 25 Jan 2016
- fixed: command line failed with more than 64 arguments.

Changes in 2.15 - 28 Nov 2015
- fixed bug in expansion of " \"quoted string\" "
- fixed %OUT directive -- didn't work
- fixed command line switch /D<tmacro>[=<value>] -- didn't work correctly

Changes in 2.14 - 16 Oct 2015
- ported some code to assembly and switched to a new C-library
- added .SWITCH, .CASE, .DEFAULT, and .ENDSW
- added switch -Xc: Disable ASMC extensions
  This will disable syntax extensions which aren't supported by JWasm
  Currently these are:
  - Delayed expansion of HLL expression in .WHILE, .ELSEIF, and .CASE
  - Use of procedures in HLL expression and INVOKE
  - Use of procedures without INVOKE
  - Use of "quoted strings" in procedures
- added OPTION ASMC: 0 (default is 1)
- added switch -Cs: C stack: push USER regs first
- added OPTION CSTACK: 1 (default is 0)
- removed use of "quoted strings" outside procedures( "" )

Changes in 2.12 - 30 Oct 2014
- Updated version from JWASM 2.12

Changes in 2.11 - 10 Sep 2014
- Updated version from JWASM 2.11

Changes in 2.10 - 06 Jun 2014
- Updated version from JWASM 2.10
- added C-string -- invoke printf,"%s\n",eax

Changes in 2.09 - 10 Des 2012
- Updated version from JWASM 2.09
  - added label() call in HLL -- .while label() < 1
  - added proc() call in HLL  -- .while proc() < 1
  - added proc( " string " ) in HLL -- .if proc( "string" )
  - added invoke proc,"string"
  - Testing result use TEST REG,REG -- not AND/OR
  - The .UNTILCXZ do not use LOOPx but DEC ECX, JNZ .REPEAT

Changes in 2.06 - 15 Des 2011
- Made a modified version of JWASM used as a TASM clone. This was used for
  some DOS tools in WinXP. The changes from JWASM was:
  - Uses full or relative path on source files (as given)
  - Do not convert short file names (DOS) to long file names
  - A switch (-r) is added to compile a directory tree

