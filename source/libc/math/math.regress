include limits.inc
include errno.inc
include stdio.inc
include string.inc
include math.inc
include assert.inc
include signal.inc

extern fltused_:word

    T equ <@CStr>

.template assert fastcall

    lastResult errno_t ?

    .static assert {

        mov this.lastResult,0
        _set_errno(0)
        }
;;;;;;;;

    .static cmp64 :ptr, :ptr {

        mov rax,[_1]
        mov rbx,[_2]
       .assert( rax == rbx )
    ifndef _WIN64
        mov eax,[_1+4]
        mov ebx,[_2+4]
       .assert( eax == ebx )
    endif
        }

    .static __d :abs, :abs, :abs, :abs {
        local a, b, r
        .data
        align 8
        a dq _2
    ifnb <_4>
        b dq _3
        r dq _4
        .code
        _1(a, b)
    else
        r dq _3
        .code
        _1(a)
    endif
    ifdef _WIN64
        movsd a,xmm0
    else
        fstp a
    endif
        this.cmp64(addr a, addr r)
        }

    .static __f :abs, :abs, :abs, :abs {
        local a, b, r
        .data
        align 4
        a dd _2
    ifnb <_4>
        b dd _3
        r dd _4
        .code
        _1(a, b)
    else
        r dd _3
        .code
        _1(a)
    endif
    ifdef _WIN64
        movss a,xmm0
    else
        fstp a
    endif
        mov eax,a
        mov ebx,r
       .assert( eax == ebx )
        }

;;;;;;;;

    .static exp {
        this.__d(exp,  1.0,  2.7182818284590450)
ifdef _WIN64
        this.__d(exp, 3.54, 34.46691919085738)
endif
        }
    .static floor {
        this.__d(floor, 2.57, 2.0)
        }
    .static fmod {
        this.__d(fmod, 1.5, 1.2, 3FD3333333333334r)
        }
    .static sqrt {
        this.__d(sqrt,  4.0, 2.0)
        this.__d(sqrt, 10.5, 3.2403703492039302)
        }
    .static round {
        this.__d(round, 12.4, 12.0)
        this.__d(round, 12.5, 13.0)
        }
    .static atan2 {
        this.__d(atan2, 1.0, 2.0, 0.4636476090008061)
        }
    .static ceil {
        this.__d(ceil, 2.5, 3.0)
        }
    .static tanh {
        this.__d(tanh, 0.5, 0.4621171572600098)
        }

    .static expf {
        this.__f(expf,  1.0, 2.718281828459045)
        this.__f(expf, 3.54, 34.46691919085739)
        }

;;;;;;;;

    .static SetStatus {
        _get_errno(addr this.lastResult)
        _set_errno(0)
        }
    .ends

    .code

main proc

    .new this:assert()

    signal(SIGSEGV, &__crtGeneralFailure)

    ; */+-

    this.exp()
    this.floor()
    this.fmod()
    this.sqrt()
    this.atan2()
    this.ceil()

ifdef _WIN64
    this.expf()
    this.round()
;    this.tanh()
endif
    this.SetStatus()
    ret

main endp

    end
